<?php
/**
 * FeesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Lago\LagoPhpClient\ApiException;
use Lago\LagoPhpClient\Configuration;
use Lago\LagoPhpClient\FormDataProcessor;
use Lago\LagoPhpClient\HeaderSelector;
use Lago\LagoPhpClient\ObjectSerializer;

/**
 * FeesApi Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FeesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteFee' => [
            'application/json',
        ],
        'findAllFees' => [
            'application/json',
        ],
        'findFee' => [
            'application/json',
        ],
        'updateFee' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteFee
     *
     * Delete a fee
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFee'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Fee|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorNotAllowed
     */
    public function deleteFee($lago_id, string $contentType = self::contentTypes['deleteFee'][0])
    {
        list($response) = $this->deleteFeeWithHttpInfo($lago_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteFeeWithHttpInfo
     *
     * Delete a fee
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFee'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Fee|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorNotAllowed, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFeeWithHttpInfo($lago_id, string $contentType = self::contentTypes['deleteFee'][0])
    {
        $request = $this->deleteFeeRequest($lago_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Fee',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotAllowed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Fee',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Fee',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotAllowed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteFeeAsync
     *
     * Delete a fee
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFeeAsync($lago_id, string $contentType = self::contentTypes['deleteFee'][0])
    {
        return $this->deleteFeeAsyncWithHttpInfo($lago_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFeeAsyncWithHttpInfo
     *
     * Delete a fee
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFeeAsyncWithHttpInfo($lago_id, string $contentType = self::contentTypes['deleteFee'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Fee';
        $request = $this->deleteFeeRequest($lago_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFee'
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFeeRequest($lago_id, string $contentType = self::contentTypes['deleteFee'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling deleteFee'
            );
        }


        $resourcePath = '/fees/{lago_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAllFees
     *
     * List all fees
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id Unique identifier assigned to the customer in your application. (optional)
     * @param  string|null $external_subscription_id External subscription ID (optional)
     * @param  string|null $event_transaction_id Filter results by event transaction ID (optional)
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Filter results by fee&#39;s currency. (optional)
     * @param  string|null $fee_type The fee type. Possible values are &#x60;add-on&#x60;, &#x60;charge&#x60;, &#x60;credit&#x60; or &#x60;subscription&#x60;. (optional)
     * @param  string|null $billable_metric_code Filter results by the &#x60;code&#x60; of the billable metric attached to the fee. Only applies to &#x60;charge&#x60; types. (optional)
     * @param  string|null $payment_status Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are &#x60;pending&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60; and refunded&#x60;. (optional)
     * @param  \DateTime|null $created_at_from Filter results created after creation date and time in UTC. (optional)
     * @param  \DateTime|null $created_at_to Filter results created before creation date and time in UTC. (optional)
     * @param  \DateTime|null $succeeded_at_from Filter results with payment success after creation date and time in UTC. (optional)
     * @param  \DateTime|null $succeeded_at_to Filter results with payment success after creation date and time in UTC. (optional)
     * @param  \DateTime|null $failed_at_from Filter results with payment failure after creation date and time in UTC. (optional)
     * @param  \DateTime|null $failed_at_to Filter results with payment failure after creation date and time in UTC. (optional)
     * @param  \DateTime|null $refunded_at_from Filter results with payment refund after creation date and time in UTC. (optional)
     * @param  \DateTime|null $refunded_at_to Filter results with payment refund after creation date and time in UTC. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllFees'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\FeesPaginated|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity
     */
    public function findAllFees($page = null, $per_page = null, $external_customer_id = null, $external_subscription_id = null, $event_transaction_id = null, $currency = null, $fee_type = null, $billable_metric_code = null, $payment_status = null, $created_at_from = null, $created_at_to = null, $succeeded_at_from = null, $succeeded_at_to = null, $failed_at_from = null, $failed_at_to = null, $refunded_at_from = null, $refunded_at_to = null, string $contentType = self::contentTypes['findAllFees'][0])
    {
        list($response) = $this->findAllFeesWithHttpInfo($page, $per_page, $external_customer_id, $external_subscription_id, $event_transaction_id, $currency, $fee_type, $billable_metric_code, $payment_status, $created_at_from, $created_at_to, $succeeded_at_from, $succeeded_at_to, $failed_at_from, $failed_at_to, $refunded_at_from, $refunded_at_to, $contentType);
        return $response;
    }

    /**
     * Operation findAllFeesWithHttpInfo
     *
     * List all fees
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id Unique identifier assigned to the customer in your application. (optional)
     * @param  string|null $external_subscription_id External subscription ID (optional)
     * @param  string|null $event_transaction_id Filter results by event transaction ID (optional)
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Filter results by fee&#39;s currency. (optional)
     * @param  string|null $fee_type The fee type. Possible values are &#x60;add-on&#x60;, &#x60;charge&#x60;, &#x60;credit&#x60; or &#x60;subscription&#x60;. (optional)
     * @param  string|null $billable_metric_code Filter results by the &#x60;code&#x60; of the billable metric attached to the fee. Only applies to &#x60;charge&#x60; types. (optional)
     * @param  string|null $payment_status Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are &#x60;pending&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60; and refunded&#x60;. (optional)
     * @param  \DateTime|null $created_at_from Filter results created after creation date and time in UTC. (optional)
     * @param  \DateTime|null $created_at_to Filter results created before creation date and time in UTC. (optional)
     * @param  \DateTime|null $succeeded_at_from Filter results with payment success after creation date and time in UTC. (optional)
     * @param  \DateTime|null $succeeded_at_to Filter results with payment success after creation date and time in UTC. (optional)
     * @param  \DateTime|null $failed_at_from Filter results with payment failure after creation date and time in UTC. (optional)
     * @param  \DateTime|null $failed_at_to Filter results with payment failure after creation date and time in UTC. (optional)
     * @param  \DateTime|null $refunded_at_from Filter results with payment refund after creation date and time in UTC. (optional)
     * @param  \DateTime|null $refunded_at_to Filter results with payment refund after creation date and time in UTC. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllFees'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\FeesPaginated|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAllFeesWithHttpInfo($page = null, $per_page = null, $external_customer_id = null, $external_subscription_id = null, $event_transaction_id = null, $currency = null, $fee_type = null, $billable_metric_code = null, $payment_status = null, $created_at_from = null, $created_at_to = null, $succeeded_at_from = null, $succeeded_at_to = null, $failed_at_from = null, $failed_at_to = null, $refunded_at_from = null, $refunded_at_to = null, string $contentType = self::contentTypes['findAllFees'][0])
    {
        $request = $this->findAllFeesRequest($page, $per_page, $external_customer_id, $external_subscription_id, $event_transaction_id, $currency, $fee_type, $billable_metric_code, $payment_status, $created_at_from, $created_at_to, $succeeded_at_from, $succeeded_at_to, $failed_at_from, $failed_at_to, $refunded_at_from, $refunded_at_to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\FeesPaginated',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\FeesPaginated',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\FeesPaginated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findAllFeesAsync
     *
     * List all fees
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id Unique identifier assigned to the customer in your application. (optional)
     * @param  string|null $external_subscription_id External subscription ID (optional)
     * @param  string|null $event_transaction_id Filter results by event transaction ID (optional)
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Filter results by fee&#39;s currency. (optional)
     * @param  string|null $fee_type The fee type. Possible values are &#x60;add-on&#x60;, &#x60;charge&#x60;, &#x60;credit&#x60; or &#x60;subscription&#x60;. (optional)
     * @param  string|null $billable_metric_code Filter results by the &#x60;code&#x60; of the billable metric attached to the fee. Only applies to &#x60;charge&#x60; types. (optional)
     * @param  string|null $payment_status Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are &#x60;pending&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60; and refunded&#x60;. (optional)
     * @param  \DateTime|null $created_at_from Filter results created after creation date and time in UTC. (optional)
     * @param  \DateTime|null $created_at_to Filter results created before creation date and time in UTC. (optional)
     * @param  \DateTime|null $succeeded_at_from Filter results with payment success after creation date and time in UTC. (optional)
     * @param  \DateTime|null $succeeded_at_to Filter results with payment success after creation date and time in UTC. (optional)
     * @param  \DateTime|null $failed_at_from Filter results with payment failure after creation date and time in UTC. (optional)
     * @param  \DateTime|null $failed_at_to Filter results with payment failure after creation date and time in UTC. (optional)
     * @param  \DateTime|null $refunded_at_from Filter results with payment refund after creation date and time in UTC. (optional)
     * @param  \DateTime|null $refunded_at_to Filter results with payment refund after creation date and time in UTC. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllFees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllFeesAsync($page = null, $per_page = null, $external_customer_id = null, $external_subscription_id = null, $event_transaction_id = null, $currency = null, $fee_type = null, $billable_metric_code = null, $payment_status = null, $created_at_from = null, $created_at_to = null, $succeeded_at_from = null, $succeeded_at_to = null, $failed_at_from = null, $failed_at_to = null, $refunded_at_from = null, $refunded_at_to = null, string $contentType = self::contentTypes['findAllFees'][0])
    {
        return $this->findAllFeesAsyncWithHttpInfo($page, $per_page, $external_customer_id, $external_subscription_id, $event_transaction_id, $currency, $fee_type, $billable_metric_code, $payment_status, $created_at_from, $created_at_to, $succeeded_at_from, $succeeded_at_to, $failed_at_from, $failed_at_to, $refunded_at_from, $refunded_at_to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAllFeesAsyncWithHttpInfo
     *
     * List all fees
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id Unique identifier assigned to the customer in your application. (optional)
     * @param  string|null $external_subscription_id External subscription ID (optional)
     * @param  string|null $event_transaction_id Filter results by event transaction ID (optional)
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Filter results by fee&#39;s currency. (optional)
     * @param  string|null $fee_type The fee type. Possible values are &#x60;add-on&#x60;, &#x60;charge&#x60;, &#x60;credit&#x60; or &#x60;subscription&#x60;. (optional)
     * @param  string|null $billable_metric_code Filter results by the &#x60;code&#x60; of the billable metric attached to the fee. Only applies to &#x60;charge&#x60; types. (optional)
     * @param  string|null $payment_status Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are &#x60;pending&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60; and refunded&#x60;. (optional)
     * @param  \DateTime|null $created_at_from Filter results created after creation date and time in UTC. (optional)
     * @param  \DateTime|null $created_at_to Filter results created before creation date and time in UTC. (optional)
     * @param  \DateTime|null $succeeded_at_from Filter results with payment success after creation date and time in UTC. (optional)
     * @param  \DateTime|null $succeeded_at_to Filter results with payment success after creation date and time in UTC. (optional)
     * @param  \DateTime|null $failed_at_from Filter results with payment failure after creation date and time in UTC. (optional)
     * @param  \DateTime|null $failed_at_to Filter results with payment failure after creation date and time in UTC. (optional)
     * @param  \DateTime|null $refunded_at_from Filter results with payment refund after creation date and time in UTC. (optional)
     * @param  \DateTime|null $refunded_at_to Filter results with payment refund after creation date and time in UTC. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllFees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllFeesAsyncWithHttpInfo($page = null, $per_page = null, $external_customer_id = null, $external_subscription_id = null, $event_transaction_id = null, $currency = null, $fee_type = null, $billable_metric_code = null, $payment_status = null, $created_at_from = null, $created_at_to = null, $succeeded_at_from = null, $succeeded_at_to = null, $failed_at_from = null, $failed_at_to = null, $refunded_at_from = null, $refunded_at_to = null, string $contentType = self::contentTypes['findAllFees'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\FeesPaginated';
        $request = $this->findAllFeesRequest($page, $per_page, $external_customer_id, $external_subscription_id, $event_transaction_id, $currency, $fee_type, $billable_metric_code, $payment_status, $created_at_from, $created_at_to, $succeeded_at_from, $succeeded_at_to, $failed_at_from, $failed_at_to, $refunded_at_from, $refunded_at_to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAllFees'
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id Unique identifier assigned to the customer in your application. (optional)
     * @param  string|null $external_subscription_id External subscription ID (optional)
     * @param  string|null $event_transaction_id Filter results by event transaction ID (optional)
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Filter results by fee&#39;s currency. (optional)
     * @param  string|null $fee_type The fee type. Possible values are &#x60;add-on&#x60;, &#x60;charge&#x60;, &#x60;credit&#x60; or &#x60;subscription&#x60;. (optional)
     * @param  string|null $billable_metric_code Filter results by the &#x60;code&#x60; of the billable metric attached to the fee. Only applies to &#x60;charge&#x60; types. (optional)
     * @param  string|null $payment_status Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are &#x60;pending&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60; and refunded&#x60;. (optional)
     * @param  \DateTime|null $created_at_from Filter results created after creation date and time in UTC. (optional)
     * @param  \DateTime|null $created_at_to Filter results created before creation date and time in UTC. (optional)
     * @param  \DateTime|null $succeeded_at_from Filter results with payment success after creation date and time in UTC. (optional)
     * @param  \DateTime|null $succeeded_at_to Filter results with payment success after creation date and time in UTC. (optional)
     * @param  \DateTime|null $failed_at_from Filter results with payment failure after creation date and time in UTC. (optional)
     * @param  \DateTime|null $failed_at_to Filter results with payment failure after creation date and time in UTC. (optional)
     * @param  \DateTime|null $refunded_at_from Filter results with payment refund after creation date and time in UTC. (optional)
     * @param  \DateTime|null $refunded_at_to Filter results with payment refund after creation date and time in UTC. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllFees'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAllFeesRequest($page = null, $per_page = null, $external_customer_id = null, $external_subscription_id = null, $event_transaction_id = null, $currency = null, $fee_type = null, $billable_metric_code = null, $payment_status = null, $created_at_from = null, $created_at_to = null, $succeeded_at_from = null, $succeeded_at_to = null, $failed_at_from = null, $failed_at_to = null, $refunded_at_from = null, $refunded_at_to = null, string $contentType = self::contentTypes['findAllFees'][0])
    {



















        $resourcePath = '/fees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_customer_id,
            'external_customer_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_subscription_id,
            'external_subscription_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_transaction_id,
            'event_transaction_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'Currency', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fee_type,
            'fee_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $billable_metric_code,
            'billable_metric_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_status,
            'payment_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_at_from,
            'created_at_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_at_to,
            'created_at_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $succeeded_at_from,
            'succeeded_at_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $succeeded_at_to,
            'succeeded_at_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $failed_at_from,
            'failed_at_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $failed_at_to,
            'failed_at_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $refunded_at_from,
            'refunded_at_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $refunded_at_to,
            'refunded_at_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findFee
     *
     * Retrieve a specific fee
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findFee'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Fee|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function findFee($lago_id, string $contentType = self::contentTypes['findFee'][0])
    {
        list($response) = $this->findFeeWithHttpInfo($lago_id, $contentType);
        return $response;
    }

    /**
     * Operation findFeeWithHttpInfo
     *
     * Retrieve a specific fee
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findFee'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Fee|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function findFeeWithHttpInfo($lago_id, string $contentType = self::contentTypes['findFee'][0])
    {
        $request = $this->findFeeRequest($lago_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Fee',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Fee',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Fee',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findFeeAsync
     *
     * Retrieve a specific fee
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findFee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findFeeAsync($lago_id, string $contentType = self::contentTypes['findFee'][0])
    {
        return $this->findFeeAsyncWithHttpInfo($lago_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findFeeAsyncWithHttpInfo
     *
     * Retrieve a specific fee
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findFee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findFeeAsyncWithHttpInfo($lago_id, string $contentType = self::contentTypes['findFee'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Fee';
        $request = $this->findFeeRequest($lago_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findFee'
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findFee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findFeeRequest($lago_id, string $contentType = self::contentTypes['findFee'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling findFee'
            );
        }


        $resourcePath = '/fees/{lago_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFee
     *
     * Update a fee
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\FeeUpdateInput|null $fee_update_input Fee payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFee'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Fee|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorNotAllowed|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity
     */
    public function updateFee($lago_id, $fee_update_input = null, string $contentType = self::contentTypes['updateFee'][0])
    {
        list($response) = $this->updateFeeWithHttpInfo($lago_id, $fee_update_input, $contentType);
        return $response;
    }

    /**
     * Operation updateFeeWithHttpInfo
     *
     * Update a fee
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\FeeUpdateInput|null $fee_update_input Fee payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFee'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Fee|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorNotAllowed|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFeeWithHttpInfo($lago_id, $fee_update_input = null, string $contentType = self::contentTypes['updateFee'][0])
    {
        $request = $this->updateFeeRequest($lago_id, $fee_update_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Fee',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotAllowed',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Fee',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Fee',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotAllowed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateFeeAsync
     *
     * Update a fee
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\FeeUpdateInput|null $fee_update_input Fee payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFeeAsync($lago_id, $fee_update_input = null, string $contentType = self::contentTypes['updateFee'][0])
    {
        return $this->updateFeeAsyncWithHttpInfo($lago_id, $fee_update_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFeeAsyncWithHttpInfo
     *
     * Update a fee
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\FeeUpdateInput|null $fee_update_input Fee payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFeeAsyncWithHttpInfo($lago_id, $fee_update_input = null, string $contentType = self::contentTypes['updateFee'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Fee';
        $request = $this->updateFeeRequest($lago_id, $fee_update_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFee'
     *
     * @param  string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\FeeUpdateInput|null $fee_update_input Fee payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFeeRequest($lago_id, $fee_update_input = null, string $contentType = self::contentTypes['updateFee'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling updateFee'
            );
        }



        $resourcePath = '/fees/{lago_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($fee_update_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($fee_update_input));
            } else {
                $httpBody = $fee_update_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
