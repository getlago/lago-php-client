<?php
/**
 * InvoicesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Lago\LagoPhpClient\ApiException;
use Lago\LagoPhpClient\Configuration;
use Lago\LagoPhpClient\FormDataProcessor;
use Lago\LagoPhpClient\HeaderSelector;
use Lago\LagoPhpClient\ObjectSerializer;

/**
 * InvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createInvoice' => [
            'application/json',
        ],
        'downloadInvoice' => [
            'application/json',
        ],
        'finalizeInvoice' => [
            'application/json',
        ],
        'findAllInvoices' => [
            'application/json',
        ],
        'findInvoice' => [
            'application/json',
        ],
        'invoicePaymentUrl' => [
            'application/json',
        ],
        'invoicePreview' => [
            'application/json',
        ],
        'loseDisputeInvoice' => [
            'application/json',
        ],
        'refreshInvoice' => [
            'application/json',
        ],
        'retryInvoice' => [
            'application/json',
        ],
        'retryPayment' => [
            'application/json',
        ],
        'updateInvoice' => [
            'application/json',
        ],
        'voidInvoice' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createInvoice
     *
     * Create a one-off invoice
     *
     * @param  \Lago\LagoPhpClient\Model\InvoiceOneOffCreateInput $invoice_one_off_create_input Invoice payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity
     */
    public function createInvoice($invoice_one_off_create_input, string $contentType = self::contentTypes['createInvoice'][0])
    {
        list($response) = $this->createInvoiceWithHttpInfo($invoice_one_off_create_input, $contentType);
        return $response;
    }

    /**
     * Operation createInvoiceWithHttpInfo
     *
     * Create a one-off invoice
     *
     * @param  \Lago\LagoPhpClient\Model\InvoiceOneOffCreateInput $invoice_one_off_create_input Invoice payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInvoiceWithHttpInfo($invoice_one_off_create_input, string $contentType = self::contentTypes['createInvoice'][0])
    {
        $request = $this->createInvoiceRequest($invoice_one_off_create_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Invoice',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createInvoiceAsync
     *
     * Create a one-off invoice
     *
     * @param  \Lago\LagoPhpClient\Model\InvoiceOneOffCreateInput $invoice_one_off_create_input Invoice payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInvoiceAsync($invoice_one_off_create_input, string $contentType = self::contentTypes['createInvoice'][0])
    {
        return $this->createInvoiceAsyncWithHttpInfo($invoice_one_off_create_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInvoiceAsyncWithHttpInfo
     *
     * Create a one-off invoice
     *
     * @param  \Lago\LagoPhpClient\Model\InvoiceOneOffCreateInput $invoice_one_off_create_input Invoice payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInvoiceAsyncWithHttpInfo($invoice_one_off_create_input, string $contentType = self::contentTypes['createInvoice'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Invoice';
        $request = $this->createInvoiceRequest($invoice_one_off_create_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInvoice'
     *
     * @param  \Lago\LagoPhpClient\Model\InvoiceOneOffCreateInput $invoice_one_off_create_input Invoice payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createInvoiceRequest($invoice_one_off_create_input, string $contentType = self::contentTypes['createInvoice'][0])
    {

        // verify the required parameter 'invoice_one_off_create_input' is set
        if ($invoice_one_off_create_input === null || (is_array($invoice_one_off_create_input) && count($invoice_one_off_create_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_one_off_create_input when calling createInvoice'
            );
        }


        $resourcePath = '/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($invoice_one_off_create_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($invoice_one_off_create_input));
            } else {
                $httpBody = $invoice_one_off_create_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadInvoice
     *
     * Download an invoice PDF
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function downloadInvoice($lago_id, string $contentType = self::contentTypes['downloadInvoice'][0])
    {
        list($response) = $this->downloadInvoiceWithHttpInfo($lago_id, $contentType);
        return $response;
    }

    /**
     * Operation downloadInvoiceWithHttpInfo
     *
     * Download an invoice PDF
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadInvoiceWithHttpInfo($lago_id, string $contentType = self::contentTypes['downloadInvoice'][0])
    {
        $request = $this->downloadInvoiceRequest($lago_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Invoice',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation downloadInvoiceAsync
     *
     * Download an invoice PDF
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadInvoiceAsync($lago_id, string $contentType = self::contentTypes['downloadInvoice'][0])
    {
        return $this->downloadInvoiceAsyncWithHttpInfo($lago_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadInvoiceAsyncWithHttpInfo
     *
     * Download an invoice PDF
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadInvoiceAsyncWithHttpInfo($lago_id, string $contentType = self::contentTypes['downloadInvoice'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Invoice';
        $request = $this->downloadInvoiceRequest($lago_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadInvoice'
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['downloadInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadInvoiceRequest($lago_id, string $contentType = self::contentTypes['downloadInvoice'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling downloadInvoice'
            );
        }


        $resourcePath = '/invoices/{lago_id}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation finalizeInvoice
     *
     * Finalize a draft invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalizeInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function finalizeInvoice($lago_id, string $contentType = self::contentTypes['finalizeInvoice'][0])
    {
        list($response) = $this->finalizeInvoiceWithHttpInfo($lago_id, $contentType);
        return $response;
    }

    /**
     * Operation finalizeInvoiceWithHttpInfo
     *
     * Finalize a draft invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalizeInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function finalizeInvoiceWithHttpInfo($lago_id, string $contentType = self::contentTypes['finalizeInvoice'][0])
    {
        $request = $this->finalizeInvoiceRequest($lago_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Invoice',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation finalizeInvoiceAsync
     *
     * Finalize a draft invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalizeInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function finalizeInvoiceAsync($lago_id, string $contentType = self::contentTypes['finalizeInvoice'][0])
    {
        return $this->finalizeInvoiceAsyncWithHttpInfo($lago_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation finalizeInvoiceAsyncWithHttpInfo
     *
     * Finalize a draft invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalizeInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function finalizeInvoiceAsyncWithHttpInfo($lago_id, string $contentType = self::contentTypes['finalizeInvoice'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Invoice';
        $request = $this->finalizeInvoiceRequest($lago_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'finalizeInvoice'
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['finalizeInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function finalizeInvoiceRequest($lago_id, string $contentType = self::contentTypes['finalizeInvoice'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling finalizeInvoice'
            );
        }


        $resourcePath = '/invoices/{lago_id}/finalize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAllInvoices
     *
     * List all invoices
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id Unique identifier assigned to the customer in your application. (optional)
     * @param  int|null $amount_from Filter invoices of at least a specific amount. This parameter must be defined in cents to ensure consistent handling for all currency types. (optional)
     * @param  int|null $amount_to Filter invoices up to a specific amount. This parameter must be defined in cents to ensure consistent handling for all currency types. (optional)
     * @param  \DateTime|null $issuing_date_from Filter invoices starting from a specific date. (optional)
     * @param  \DateTime|null $issuing_date_to Filter invoices up to a specific date. (optional)
     * @param  string|null $status Filter invoices by status. Possible values are &#x60;draft&#x60; or &#x60;finalized&#x60;. (optional)
     * @param  string|null $payment_status Filter invoices by payment status. Possible values are &#x60;pending&#x60;, &#x60;failed&#x60; or &#x60;succeeded&#x60;. (optional)
     * @param  bool|null $payment_overdue Filter invoices by payment_overdue. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string|null $search_term Search invoices by id, number, customer name, customer external_id or customer email. (optional)
     * @param  string|null $currency Filter invoices by currency. Possible values ISO 4217 currency codes. (optional)
     * @param  bool|null $payment_dispute_lost Filter invoices with a payment dispute lost. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string|null $invoice_type Filter invoices by invoice type. Possible values are &#x60;subscription&#x60;, &#x60;add_on&#x60;, &#x60;credit&#x60;, &#x60;one_off&#x60;, &#x60;advance_charges&#x60; or &#x60;progressive_billing&#x60;. (optional)
     * @param  bool|null $self_billed Filter invoices by self billed. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string[]|null $billing_entity_codes Filter invoices by billing entity codes. Possible values are the billing entity codes you have created. (optional)
     * @param  string|null $metadata_key Filter invoices by metadata. Replace &#x60;key&#x60; with the actual metadata key you want to match, and provide the corresponding value. Providing empty value will search for invoice without given metadata key. For example, &#x60;metadata[color]&#x3D;blue&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoices'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\InvoicesPaginated|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized
     */
    public function findAllInvoices($page = null, $per_page = null, $external_customer_id = null, $amount_from = null, $amount_to = null, $issuing_date_from = null, $issuing_date_to = null, $status = null, $payment_status = null, $payment_overdue = null, $search_term = null, $currency = null, $payment_dispute_lost = null, $invoice_type = null, $self_billed = null, $billing_entity_codes = null, $metadata_key = null, string $contentType = self::contentTypes['findAllInvoices'][0])
    {
        list($response) = $this->findAllInvoicesWithHttpInfo($page, $per_page, $external_customer_id, $amount_from, $amount_to, $issuing_date_from, $issuing_date_to, $status, $payment_status, $payment_overdue, $search_term, $currency, $payment_dispute_lost, $invoice_type, $self_billed, $billing_entity_codes, $metadata_key, $contentType);
        return $response;
    }

    /**
     * Operation findAllInvoicesWithHttpInfo
     *
     * List all invoices
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id Unique identifier assigned to the customer in your application. (optional)
     * @param  int|null $amount_from Filter invoices of at least a specific amount. This parameter must be defined in cents to ensure consistent handling for all currency types. (optional)
     * @param  int|null $amount_to Filter invoices up to a specific amount. This parameter must be defined in cents to ensure consistent handling for all currency types. (optional)
     * @param  \DateTime|null $issuing_date_from Filter invoices starting from a specific date. (optional)
     * @param  \DateTime|null $issuing_date_to Filter invoices up to a specific date. (optional)
     * @param  string|null $status Filter invoices by status. Possible values are &#x60;draft&#x60; or &#x60;finalized&#x60;. (optional)
     * @param  string|null $payment_status Filter invoices by payment status. Possible values are &#x60;pending&#x60;, &#x60;failed&#x60; or &#x60;succeeded&#x60;. (optional)
     * @param  bool|null $payment_overdue Filter invoices by payment_overdue. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string|null $search_term Search invoices by id, number, customer name, customer external_id or customer email. (optional)
     * @param  string|null $currency Filter invoices by currency. Possible values ISO 4217 currency codes. (optional)
     * @param  bool|null $payment_dispute_lost Filter invoices with a payment dispute lost. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string|null $invoice_type Filter invoices by invoice type. Possible values are &#x60;subscription&#x60;, &#x60;add_on&#x60;, &#x60;credit&#x60;, &#x60;one_off&#x60;, &#x60;advance_charges&#x60; or &#x60;progressive_billing&#x60;. (optional)
     * @param  bool|null $self_billed Filter invoices by self billed. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string[]|null $billing_entity_codes Filter invoices by billing entity codes. Possible values are the billing entity codes you have created. (optional)
     * @param  string|null $metadata_key Filter invoices by metadata. Replace &#x60;key&#x60; with the actual metadata key you want to match, and provide the corresponding value. Providing empty value will search for invoice without given metadata key. For example, &#x60;metadata[color]&#x3D;blue&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoices'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\InvoicesPaginated|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAllInvoicesWithHttpInfo($page = null, $per_page = null, $external_customer_id = null, $amount_from = null, $amount_to = null, $issuing_date_from = null, $issuing_date_to = null, $status = null, $payment_status = null, $payment_overdue = null, $search_term = null, $currency = null, $payment_dispute_lost = null, $invoice_type = null, $self_billed = null, $billing_entity_codes = null, $metadata_key = null, string $contentType = self::contentTypes['findAllInvoices'][0])
    {
        $request = $this->findAllInvoicesRequest($page, $per_page, $external_customer_id, $amount_from, $amount_to, $issuing_date_from, $issuing_date_to, $status, $payment_status, $payment_overdue, $search_term, $currency, $payment_dispute_lost, $invoice_type, $self_billed, $billing_entity_codes, $metadata_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\InvoicesPaginated',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\InvoicesPaginated',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\InvoicesPaginated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findAllInvoicesAsync
     *
     * List all invoices
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id Unique identifier assigned to the customer in your application. (optional)
     * @param  int|null $amount_from Filter invoices of at least a specific amount. This parameter must be defined in cents to ensure consistent handling for all currency types. (optional)
     * @param  int|null $amount_to Filter invoices up to a specific amount. This parameter must be defined in cents to ensure consistent handling for all currency types. (optional)
     * @param  \DateTime|null $issuing_date_from Filter invoices starting from a specific date. (optional)
     * @param  \DateTime|null $issuing_date_to Filter invoices up to a specific date. (optional)
     * @param  string|null $status Filter invoices by status. Possible values are &#x60;draft&#x60; or &#x60;finalized&#x60;. (optional)
     * @param  string|null $payment_status Filter invoices by payment status. Possible values are &#x60;pending&#x60;, &#x60;failed&#x60; or &#x60;succeeded&#x60;. (optional)
     * @param  bool|null $payment_overdue Filter invoices by payment_overdue. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string|null $search_term Search invoices by id, number, customer name, customer external_id or customer email. (optional)
     * @param  string|null $currency Filter invoices by currency. Possible values ISO 4217 currency codes. (optional)
     * @param  bool|null $payment_dispute_lost Filter invoices with a payment dispute lost. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string|null $invoice_type Filter invoices by invoice type. Possible values are &#x60;subscription&#x60;, &#x60;add_on&#x60;, &#x60;credit&#x60;, &#x60;one_off&#x60;, &#x60;advance_charges&#x60; or &#x60;progressive_billing&#x60;. (optional)
     * @param  bool|null $self_billed Filter invoices by self billed. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string[]|null $billing_entity_codes Filter invoices by billing entity codes. Possible values are the billing entity codes you have created. (optional)
     * @param  string|null $metadata_key Filter invoices by metadata. Replace &#x60;key&#x60; with the actual metadata key you want to match, and provide the corresponding value. Providing empty value will search for invoice without given metadata key. For example, &#x60;metadata[color]&#x3D;blue&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllInvoicesAsync($page = null, $per_page = null, $external_customer_id = null, $amount_from = null, $amount_to = null, $issuing_date_from = null, $issuing_date_to = null, $status = null, $payment_status = null, $payment_overdue = null, $search_term = null, $currency = null, $payment_dispute_lost = null, $invoice_type = null, $self_billed = null, $billing_entity_codes = null, $metadata_key = null, string $contentType = self::contentTypes['findAllInvoices'][0])
    {
        return $this->findAllInvoicesAsyncWithHttpInfo($page, $per_page, $external_customer_id, $amount_from, $amount_to, $issuing_date_from, $issuing_date_to, $status, $payment_status, $payment_overdue, $search_term, $currency, $payment_dispute_lost, $invoice_type, $self_billed, $billing_entity_codes, $metadata_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAllInvoicesAsyncWithHttpInfo
     *
     * List all invoices
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id Unique identifier assigned to the customer in your application. (optional)
     * @param  int|null $amount_from Filter invoices of at least a specific amount. This parameter must be defined in cents to ensure consistent handling for all currency types. (optional)
     * @param  int|null $amount_to Filter invoices up to a specific amount. This parameter must be defined in cents to ensure consistent handling for all currency types. (optional)
     * @param  \DateTime|null $issuing_date_from Filter invoices starting from a specific date. (optional)
     * @param  \DateTime|null $issuing_date_to Filter invoices up to a specific date. (optional)
     * @param  string|null $status Filter invoices by status. Possible values are &#x60;draft&#x60; or &#x60;finalized&#x60;. (optional)
     * @param  string|null $payment_status Filter invoices by payment status. Possible values are &#x60;pending&#x60;, &#x60;failed&#x60; or &#x60;succeeded&#x60;. (optional)
     * @param  bool|null $payment_overdue Filter invoices by payment_overdue. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string|null $search_term Search invoices by id, number, customer name, customer external_id or customer email. (optional)
     * @param  string|null $currency Filter invoices by currency. Possible values ISO 4217 currency codes. (optional)
     * @param  bool|null $payment_dispute_lost Filter invoices with a payment dispute lost. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string|null $invoice_type Filter invoices by invoice type. Possible values are &#x60;subscription&#x60;, &#x60;add_on&#x60;, &#x60;credit&#x60;, &#x60;one_off&#x60;, &#x60;advance_charges&#x60; or &#x60;progressive_billing&#x60;. (optional)
     * @param  bool|null $self_billed Filter invoices by self billed. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string[]|null $billing_entity_codes Filter invoices by billing entity codes. Possible values are the billing entity codes you have created. (optional)
     * @param  string|null $metadata_key Filter invoices by metadata. Replace &#x60;key&#x60; with the actual metadata key you want to match, and provide the corresponding value. Providing empty value will search for invoice without given metadata key. For example, &#x60;metadata[color]&#x3D;blue&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllInvoicesAsyncWithHttpInfo($page = null, $per_page = null, $external_customer_id = null, $amount_from = null, $amount_to = null, $issuing_date_from = null, $issuing_date_to = null, $status = null, $payment_status = null, $payment_overdue = null, $search_term = null, $currency = null, $payment_dispute_lost = null, $invoice_type = null, $self_billed = null, $billing_entity_codes = null, $metadata_key = null, string $contentType = self::contentTypes['findAllInvoices'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\InvoicesPaginated';
        $request = $this->findAllInvoicesRequest($page, $per_page, $external_customer_id, $amount_from, $amount_to, $issuing_date_from, $issuing_date_to, $status, $payment_status, $payment_overdue, $search_term, $currency, $payment_dispute_lost, $invoice_type, $self_billed, $billing_entity_codes, $metadata_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAllInvoices'
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id Unique identifier assigned to the customer in your application. (optional)
     * @param  int|null $amount_from Filter invoices of at least a specific amount. This parameter must be defined in cents to ensure consistent handling for all currency types. (optional)
     * @param  int|null $amount_to Filter invoices up to a specific amount. This parameter must be defined in cents to ensure consistent handling for all currency types. (optional)
     * @param  \DateTime|null $issuing_date_from Filter invoices starting from a specific date. (optional)
     * @param  \DateTime|null $issuing_date_to Filter invoices up to a specific date. (optional)
     * @param  string|null $status Filter invoices by status. Possible values are &#x60;draft&#x60; or &#x60;finalized&#x60;. (optional)
     * @param  string|null $payment_status Filter invoices by payment status. Possible values are &#x60;pending&#x60;, &#x60;failed&#x60; or &#x60;succeeded&#x60;. (optional)
     * @param  bool|null $payment_overdue Filter invoices by payment_overdue. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string|null $search_term Search invoices by id, number, customer name, customer external_id or customer email. (optional)
     * @param  string|null $currency Filter invoices by currency. Possible values ISO 4217 currency codes. (optional)
     * @param  bool|null $payment_dispute_lost Filter invoices with a payment dispute lost. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string|null $invoice_type Filter invoices by invoice type. Possible values are &#x60;subscription&#x60;, &#x60;add_on&#x60;, &#x60;credit&#x60;, &#x60;one_off&#x60;, &#x60;advance_charges&#x60; or &#x60;progressive_billing&#x60;. (optional)
     * @param  bool|null $self_billed Filter invoices by self billed. Possible values are &#x60;true&#x60; or &#x60;false&#x60;. (optional)
     * @param  string[]|null $billing_entity_codes Filter invoices by billing entity codes. Possible values are the billing entity codes you have created. (optional)
     * @param  string|null $metadata_key Filter invoices by metadata. Replace &#x60;key&#x60; with the actual metadata key you want to match, and provide the corresponding value. Providing empty value will search for invoice without given metadata key. For example, &#x60;metadata[color]&#x3D;blue&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAllInvoicesRequest($page = null, $per_page = null, $external_customer_id = null, $amount_from = null, $amount_to = null, $issuing_date_from = null, $issuing_date_to = null, $status = null, $payment_status = null, $payment_overdue = null, $search_term = null, $currency = null, $payment_dispute_lost = null, $invoice_type = null, $self_billed = null, $billing_entity_codes = null, $metadata_key = null, string $contentType = self::contentTypes['findAllInvoices'][0])
    {



















        $resourcePath = '/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_customer_id,
            'external_customer_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount_from,
            'amount_from', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount_to,
            'amount_to', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $issuing_date_from,
            'issuing_date_from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $issuing_date_to,
            'issuing_date_to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_status,
            'payment_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_overdue,
            'payment_overdue', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_term,
            'search_term', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_dispute_lost,
            'payment_dispute_lost', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $invoice_type,
            'invoice_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $self_billed,
            'self_billed', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $billing_entity_codes,
            'billing_entity_codes[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata_key,
            'metadata[key]', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findInvoice
     *
     * Retrieve an invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function findInvoice($lago_id, string $contentType = self::contentTypes['findInvoice'][0])
    {
        list($response) = $this->findInvoiceWithHttpInfo($lago_id, $contentType);
        return $response;
    }

    /**
     * Operation findInvoiceWithHttpInfo
     *
     * Retrieve an invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function findInvoiceWithHttpInfo($lago_id, string $contentType = self::contentTypes['findInvoice'][0])
    {
        $request = $this->findInvoiceRequest($lago_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Invoice',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findInvoiceAsync
     *
     * Retrieve an invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findInvoiceAsync($lago_id, string $contentType = self::contentTypes['findInvoice'][0])
    {
        return $this->findInvoiceAsyncWithHttpInfo($lago_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findInvoiceAsyncWithHttpInfo
     *
     * Retrieve an invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findInvoiceAsyncWithHttpInfo($lago_id, string $contentType = self::contentTypes['findInvoice'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Invoice';
        $request = $this->findInvoiceRequest($lago_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findInvoice'
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findInvoiceRequest($lago_id, string $contentType = self::contentTypes['findInvoice'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling findInvoice'
            );
        }


        $resourcePath = '/invoices/{lago_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicePaymentUrl
     *
     * Generate a payment URL
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicePaymentUrl'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\InvoicePaymentUrl|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity
     */
    public function invoicePaymentUrl($lago_id, string $contentType = self::contentTypes['invoicePaymentUrl'][0])
    {
        list($response) = $this->invoicePaymentUrlWithHttpInfo($lago_id, $contentType);
        return $response;
    }

    /**
     * Operation invoicePaymentUrlWithHttpInfo
     *
     * Generate a payment URL
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicePaymentUrl'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\InvoicePaymentUrl|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicePaymentUrlWithHttpInfo($lago_id, string $contentType = self::contentTypes['invoicePaymentUrl'][0])
    {
        $request = $this->invoicePaymentUrlRequest($lago_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\InvoicePaymentUrl',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\InvoicePaymentUrl',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\InvoicePaymentUrl',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicePaymentUrlAsync
     *
     * Generate a payment URL
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicePaymentUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicePaymentUrlAsync($lago_id, string $contentType = self::contentTypes['invoicePaymentUrl'][0])
    {
        return $this->invoicePaymentUrlAsyncWithHttpInfo($lago_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicePaymentUrlAsyncWithHttpInfo
     *
     * Generate a payment URL
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicePaymentUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicePaymentUrlAsyncWithHttpInfo($lago_id, string $contentType = self::contentTypes['invoicePaymentUrl'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\InvoicePaymentUrl';
        $request = $this->invoicePaymentUrlRequest($lago_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicePaymentUrl'
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicePaymentUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicePaymentUrlRequest($lago_id, string $contentType = self::contentTypes['invoicePaymentUrl'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling invoicePaymentUrl'
            );
        }


        $resourcePath = '/invoices/{lago_id}/payment_url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicePreview
     *
     * Create an invoice preview
     *
     * @param  \Lago\LagoPhpClient\Model\InvoicePreviewInput $invoice_preview_input Invoice preview payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicePreview'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function invoicePreview($invoice_preview_input, string $contentType = self::contentTypes['invoicePreview'][0])
    {
        list($response) = $this->invoicePreviewWithHttpInfo($invoice_preview_input, $contentType);
        return $response;
    }

    /**
     * Operation invoicePreviewWithHttpInfo
     *
     * Create an invoice preview
     *
     * @param  \Lago\LagoPhpClient\Model\InvoicePreviewInput $invoice_preview_input Invoice preview payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicePreview'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicePreviewWithHttpInfo($invoice_preview_input, string $contentType = self::contentTypes['invoicePreview'][0])
    {
        $request = $this->invoicePreviewRequest($invoice_preview_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Invoice',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicePreviewAsync
     *
     * Create an invoice preview
     *
     * @param  \Lago\LagoPhpClient\Model\InvoicePreviewInput $invoice_preview_input Invoice preview payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicePreview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicePreviewAsync($invoice_preview_input, string $contentType = self::contentTypes['invoicePreview'][0])
    {
        return $this->invoicePreviewAsyncWithHttpInfo($invoice_preview_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicePreviewAsyncWithHttpInfo
     *
     * Create an invoice preview
     *
     * @param  \Lago\LagoPhpClient\Model\InvoicePreviewInput $invoice_preview_input Invoice preview payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicePreview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicePreviewAsyncWithHttpInfo($invoice_preview_input, string $contentType = self::contentTypes['invoicePreview'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Invoice';
        $request = $this->invoicePreviewRequest($invoice_preview_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicePreview'
     *
     * @param  \Lago\LagoPhpClient\Model\InvoicePreviewInput $invoice_preview_input Invoice preview payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicePreview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicePreviewRequest($invoice_preview_input, string $contentType = self::contentTypes['invoicePreview'][0])
    {

        // verify the required parameter 'invoice_preview_input' is set
        if ($invoice_preview_input === null || (is_array($invoice_preview_input) && count($invoice_preview_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_preview_input when calling invoicePreview'
            );
        }


        $resourcePath = '/invoices/preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($invoice_preview_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($invoice_preview_input));
            } else {
                $httpBody = $invoice_preview_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loseDisputeInvoice
     *
     * Mark an invoice payment dispute as lost
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loseDisputeInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorNotAllowed
     */
    public function loseDisputeInvoice($lago_id, string $contentType = self::contentTypes['loseDisputeInvoice'][0])
    {
        list($response) = $this->loseDisputeInvoiceWithHttpInfo($lago_id, $contentType);
        return $response;
    }

    /**
     * Operation loseDisputeInvoiceWithHttpInfo
     *
     * Mark an invoice payment dispute as lost
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loseDisputeInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorNotAllowed, HTTP status code, HTTP response headers (array of strings)
     */
    public function loseDisputeInvoiceWithHttpInfo($lago_id, string $contentType = self::contentTypes['loseDisputeInvoice'][0])
    {
        $request = $this->loseDisputeInvoiceRequest($lago_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotAllowed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Invoice',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotAllowed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation loseDisputeInvoiceAsync
     *
     * Mark an invoice payment dispute as lost
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loseDisputeInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loseDisputeInvoiceAsync($lago_id, string $contentType = self::contentTypes['loseDisputeInvoice'][0])
    {
        return $this->loseDisputeInvoiceAsyncWithHttpInfo($lago_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loseDisputeInvoiceAsyncWithHttpInfo
     *
     * Mark an invoice payment dispute as lost
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loseDisputeInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loseDisputeInvoiceAsyncWithHttpInfo($lago_id, string $contentType = self::contentTypes['loseDisputeInvoice'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Invoice';
        $request = $this->loseDisputeInvoiceRequest($lago_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'loseDisputeInvoice'
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loseDisputeInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loseDisputeInvoiceRequest($lago_id, string $contentType = self::contentTypes['loseDisputeInvoice'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling loseDisputeInvoice'
            );
        }


        $resourcePath = '/invoices/{lago_id}/lose_dispute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refreshInvoice
     *
     * Refresh a draft invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function refreshInvoice($lago_id, string $contentType = self::contentTypes['refreshInvoice'][0])
    {
        list($response) = $this->refreshInvoiceWithHttpInfo($lago_id, $contentType);
        return $response;
    }

    /**
     * Operation refreshInvoiceWithHttpInfo
     *
     * Refresh a draft invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshInvoiceWithHttpInfo($lago_id, string $contentType = self::contentTypes['refreshInvoice'][0])
    {
        $request = $this->refreshInvoiceRequest($lago_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Invoice',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation refreshInvoiceAsync
     *
     * Refresh a draft invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshInvoiceAsync($lago_id, string $contentType = self::contentTypes['refreshInvoice'][0])
    {
        return $this->refreshInvoiceAsyncWithHttpInfo($lago_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refreshInvoiceAsyncWithHttpInfo
     *
     * Refresh a draft invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshInvoiceAsyncWithHttpInfo($lago_id, string $contentType = self::contentTypes['refreshInvoice'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Invoice';
        $request = $this->refreshInvoiceRequest($lago_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refreshInvoice'
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refreshInvoiceRequest($lago_id, string $contentType = self::contentTypes['refreshInvoice'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling refreshInvoice'
            );
        }


        $resourcePath = '/invoices/{lago_id}/refresh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retryInvoice
     *
     * Retry generation of a failed invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retryInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function retryInvoice($lago_id, string $contentType = self::contentTypes['retryInvoice'][0])
    {
        list($response) = $this->retryInvoiceWithHttpInfo($lago_id, $contentType);
        return $response;
    }

    /**
     * Operation retryInvoiceWithHttpInfo
     *
     * Retry generation of a failed invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retryInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function retryInvoiceWithHttpInfo($lago_id, string $contentType = self::contentTypes['retryInvoice'][0])
    {
        $request = $this->retryInvoiceRequest($lago_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Invoice',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation retryInvoiceAsync
     *
     * Retry generation of a failed invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retryInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retryInvoiceAsync($lago_id, string $contentType = self::contentTypes['retryInvoice'][0])
    {
        return $this->retryInvoiceAsyncWithHttpInfo($lago_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retryInvoiceAsyncWithHttpInfo
     *
     * Retry generation of a failed invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retryInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retryInvoiceAsyncWithHttpInfo($lago_id, string $contentType = self::contentTypes['retryInvoice'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Invoice';
        $request = $this->retryInvoiceRequest($lago_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retryInvoice'
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retryInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retryInvoiceRequest($lago_id, string $contentType = self::contentTypes['retryInvoice'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling retryInvoice'
            );
        }


        $resourcePath = '/invoices/{lago_id}/retry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retryPayment
     *
     * Retry an invoice payment
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retryPayment'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function retryPayment($lago_id, string $contentType = self::contentTypes['retryPayment'][0])
    {
        $this->retryPaymentWithHttpInfo($lago_id, $contentType);
    }

    /**
     * Operation retryPaymentWithHttpInfo
     *
     * Retry an invoice payment
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retryPayment'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function retryPaymentWithHttpInfo($lago_id, string $contentType = self::contentTypes['retryPayment'][0])
    {
        $request = $this->retryPaymentRequest($lago_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotAllowed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation retryPaymentAsync
     *
     * Retry an invoice payment
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retryPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retryPaymentAsync($lago_id, string $contentType = self::contentTypes['retryPayment'][0])
    {
        return $this->retryPaymentAsyncWithHttpInfo($lago_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retryPaymentAsyncWithHttpInfo
     *
     * Retry an invoice payment
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retryPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retryPaymentAsyncWithHttpInfo($lago_id, string $contentType = self::contentTypes['retryPayment'][0])
    {
        $returnType = '';
        $request = $this->retryPaymentRequest($lago_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retryPayment'
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retryPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retryPaymentRequest($lago_id, string $contentType = self::contentTypes['retryPayment'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling retryPayment'
            );
        }


        $resourcePath = '/invoices/{lago_id}/retry_payment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInvoice
     *
     * Update an invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\InvoiceUpdateInput $invoice_update_input Update an existing invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity
     */
    public function updateInvoice($lago_id, $invoice_update_input, string $contentType = self::contentTypes['updateInvoice'][0])
    {
        list($response) = $this->updateInvoiceWithHttpInfo($lago_id, $invoice_update_input, $contentType);
        return $response;
    }

    /**
     * Operation updateInvoiceWithHttpInfo
     *
     * Update an invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\InvoiceUpdateInput $invoice_update_input Update an existing invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInvoiceWithHttpInfo($lago_id, $invoice_update_input, string $contentType = self::contentTypes['updateInvoice'][0])
    {
        $request = $this->updateInvoiceRequest($lago_id, $invoice_update_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Invoice',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateInvoiceAsync
     *
     * Update an invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\InvoiceUpdateInput $invoice_update_input Update an existing invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInvoiceAsync($lago_id, $invoice_update_input, string $contentType = self::contentTypes['updateInvoice'][0])
    {
        return $this->updateInvoiceAsyncWithHttpInfo($lago_id, $invoice_update_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInvoiceAsyncWithHttpInfo
     *
     * Update an invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\InvoiceUpdateInput $invoice_update_input Update an existing invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInvoiceAsyncWithHttpInfo($lago_id, $invoice_update_input, string $contentType = self::contentTypes['updateInvoice'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Invoice';
        $request = $this->updateInvoiceRequest($lago_id, $invoice_update_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInvoice'
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\InvoiceUpdateInput $invoice_update_input Update an existing invoice (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateInvoiceRequest($lago_id, $invoice_update_input, string $contentType = self::contentTypes['updateInvoice'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling updateInvoice'
            );
        }

        // verify the required parameter 'invoice_update_input' is set
        if ($invoice_update_input === null || (is_array($invoice_update_input) && count($invoice_update_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_update_input when calling updateInvoice'
            );
        }


        $resourcePath = '/invoices/{lago_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($invoice_update_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($invoice_update_input));
            } else {
                $httpBody = $invoice_update_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidInvoice
     *
     * Void an invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\InvoiceVoidInput|null $invoice_void_input Void invoice payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function voidInvoice($lago_id, $invoice_void_input = null, string $contentType = self::contentTypes['voidInvoice'][0])
    {
        list($response) = $this->voidInvoiceWithHttpInfo($lago_id, $invoice_void_input, $contentType);
        return $response;
    }

    /**
     * Operation voidInvoiceWithHttpInfo
     *
     * Void an invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\InvoiceVoidInput|null $invoice_void_input Void invoice payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidInvoice'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Invoice|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidInvoiceWithHttpInfo($lago_id, $invoice_void_input = null, string $contentType = self::contentTypes['voidInvoice'][0])
    {
        $request = $this->voidInvoiceRequest($lago_id, $invoice_void_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Invoice',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Invoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation voidInvoiceAsync
     *
     * Void an invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\InvoiceVoidInput|null $invoice_void_input Void invoice payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidInvoiceAsync($lago_id, $invoice_void_input = null, string $contentType = self::contentTypes['voidInvoice'][0])
    {
        return $this->voidInvoiceAsyncWithHttpInfo($lago_id, $invoice_void_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidInvoiceAsyncWithHttpInfo
     *
     * Void an invoice
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\InvoiceVoidInput|null $invoice_void_input Void invoice payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidInvoiceAsyncWithHttpInfo($lago_id, $invoice_void_input = null, string $contentType = self::contentTypes['voidInvoice'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Invoice';
        $request = $this->voidInvoiceRequest($lago_id, $invoice_void_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidInvoice'
     *
     * @param  string $lago_id Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoice&#39;s record within the Lago system. (required)
     * @param  \Lago\LagoPhpClient\Model\InvoiceVoidInput|null $invoice_void_input Void invoice payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['voidInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function voidInvoiceRequest($lago_id, $invoice_void_input = null, string $contentType = self::contentTypes['voidInvoice'][0])
    {

        // verify the required parameter 'lago_id' is set
        if ($lago_id === null || (is_array($lago_id) && count($lago_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lago_id when calling voidInvoice'
            );
        }



        $resourcePath = '/invoices/{lago_id}/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lago_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lago_id' . '}',
                ObjectSerializer::toPathValue($lago_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($invoice_void_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($invoice_void_input));
            } else {
                $httpBody = $invoice_void_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
