<?php
/**
 * AnalyticsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Lago\LagoPhpClient\ApiException;
use Lago\LagoPhpClient\Configuration;
use Lago\LagoPhpClient\FormDataProcessor;
use Lago\LagoPhpClient\HeaderSelector;
use Lago\LagoPhpClient\ObjectSerializer;

/**
 * AnalyticsApi Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AnalyticsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'findAllGrossRevenues' => [
            'application/json',
        ],
        'findAllInvoiceCollections' => [
            'application/json',
        ],
        'findAllInvoicedUsages' => [
            'application/json',
        ],
        'findAllMrrs' => [
            'application/json',
        ],
        'findAllOverdueBalances' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation findAllGrossRevenues
     *
     * List gross revenue
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application). Use it to filter revenue analytics at the customer level. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllGrossRevenues'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\GrossRevenues|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorForbidden
     */
    public function findAllGrossRevenues($currency = null, $external_customer_id = null, $months = null, string $contentType = self::contentTypes['findAllGrossRevenues'][0])
    {
        list($response) = $this->findAllGrossRevenuesWithHttpInfo($currency, $external_customer_id, $months, $contentType);
        return $response;
    }

    /**
     * Operation findAllGrossRevenuesWithHttpInfo
     *
     * List gross revenue
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application). Use it to filter revenue analytics at the customer level. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllGrossRevenues'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\GrossRevenues|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorForbidden, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAllGrossRevenuesWithHttpInfo($currency = null, $external_customer_id = null, $months = null, string $contentType = self::contentTypes['findAllGrossRevenues'][0])
    {
        $request = $this->findAllGrossRevenuesRequest($currency, $external_customer_id, $months, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\GrossRevenues',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorForbidden',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\GrossRevenues',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\GrossRevenues',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorForbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findAllGrossRevenuesAsync
     *
     * List gross revenue
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application). Use it to filter revenue analytics at the customer level. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllGrossRevenues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllGrossRevenuesAsync($currency = null, $external_customer_id = null, $months = null, string $contentType = self::contentTypes['findAllGrossRevenues'][0])
    {
        return $this->findAllGrossRevenuesAsyncWithHttpInfo($currency, $external_customer_id, $months, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAllGrossRevenuesAsyncWithHttpInfo
     *
     * List gross revenue
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application). Use it to filter revenue analytics at the customer level. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllGrossRevenues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllGrossRevenuesAsyncWithHttpInfo($currency = null, $external_customer_id = null, $months = null, string $contentType = self::contentTypes['findAllGrossRevenues'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\GrossRevenues';
        $request = $this->findAllGrossRevenuesRequest($currency, $external_customer_id, $months, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAllGrossRevenues'
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application). Use it to filter revenue analytics at the customer level. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllGrossRevenues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAllGrossRevenuesRequest($currency = null, $external_customer_id = null, $months = null, string $contentType = self::contentTypes['findAllGrossRevenues'][0])
    {





        $resourcePath = '/analytics/gross_revenue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'Currency', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_customer_id,
            'external_customer_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $months,
            'months', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAllInvoiceCollections
     *
     * List of finalized invoices
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency The currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoiceCollections'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\InvoiceCollections|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized
     */
    public function findAllInvoiceCollections($currency = null, $months = null, string $contentType = self::contentTypes['findAllInvoiceCollections'][0])
    {
        list($response) = $this->findAllInvoiceCollectionsWithHttpInfo($currency, $months, $contentType);
        return $response;
    }

    /**
     * Operation findAllInvoiceCollectionsWithHttpInfo
     *
     * List of finalized invoices
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency The currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoiceCollections'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\InvoiceCollections|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAllInvoiceCollectionsWithHttpInfo($currency = null, $months = null, string $contentType = self::contentTypes['findAllInvoiceCollections'][0])
    {
        $request = $this->findAllInvoiceCollectionsRequest($currency, $months, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\InvoiceCollections',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\InvoiceCollections',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\InvoiceCollections',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findAllInvoiceCollectionsAsync
     *
     * List of finalized invoices
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency The currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoiceCollections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllInvoiceCollectionsAsync($currency = null, $months = null, string $contentType = self::contentTypes['findAllInvoiceCollections'][0])
    {
        return $this->findAllInvoiceCollectionsAsyncWithHttpInfo($currency, $months, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAllInvoiceCollectionsAsyncWithHttpInfo
     *
     * List of finalized invoices
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency The currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoiceCollections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllInvoiceCollectionsAsyncWithHttpInfo($currency = null, $months = null, string $contentType = self::contentTypes['findAllInvoiceCollections'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\InvoiceCollections';
        $request = $this->findAllInvoiceCollectionsRequest($currency, $months, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAllInvoiceCollections'
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency The currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoiceCollections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAllInvoiceCollectionsRequest($currency = null, $months = null, string $contentType = self::contentTypes['findAllInvoiceCollections'][0])
    {




        $resourcePath = '/analytics/invoice_collection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'Currency', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $months,
            'months', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAllInvoicedUsages
     *
     * List usage revenue
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency The currency of invoiced usage analytics. Format must be ISO 4217. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoicedUsages'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\InvoicedUsages|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized
     */
    public function findAllInvoicedUsages($currency = null, $months = null, string $contentType = self::contentTypes['findAllInvoicedUsages'][0])
    {
        list($response) = $this->findAllInvoicedUsagesWithHttpInfo($currency, $months, $contentType);
        return $response;
    }

    /**
     * Operation findAllInvoicedUsagesWithHttpInfo
     *
     * List usage revenue
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency The currency of invoiced usage analytics. Format must be ISO 4217. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoicedUsages'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\InvoicedUsages|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAllInvoicedUsagesWithHttpInfo($currency = null, $months = null, string $contentType = self::contentTypes['findAllInvoicedUsages'][0])
    {
        $request = $this->findAllInvoicedUsagesRequest($currency, $months, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\InvoicedUsages',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\InvoicedUsages',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\InvoicedUsages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findAllInvoicedUsagesAsync
     *
     * List usage revenue
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency The currency of invoiced usage analytics. Format must be ISO 4217. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoicedUsages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllInvoicedUsagesAsync($currency = null, $months = null, string $contentType = self::contentTypes['findAllInvoicedUsages'][0])
    {
        return $this->findAllInvoicedUsagesAsyncWithHttpInfo($currency, $months, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAllInvoicedUsagesAsyncWithHttpInfo
     *
     * List usage revenue
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency The currency of invoiced usage analytics. Format must be ISO 4217. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoicedUsages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllInvoicedUsagesAsyncWithHttpInfo($currency = null, $months = null, string $contentType = self::contentTypes['findAllInvoicedUsages'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\InvoicedUsages';
        $request = $this->findAllInvoicedUsagesRequest($currency, $months, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAllInvoicedUsages'
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency The currency of invoiced usage analytics. Format must be ISO 4217. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllInvoicedUsages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAllInvoicedUsagesRequest($currency = null, $months = null, string $contentType = self::contentTypes['findAllInvoicedUsages'][0])
    {




        $resourcePath = '/analytics/invoiced_usage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'Currency', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $months,
            'months', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAllMrrs
     *
     * List MRR
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Quantifies the revenue generated from &#x60;subscription&#x60; fees on a monthly basis. This figure is calculated post-application of applicable taxes and deduction of any applicable discounts. The method of calculation varies based on the subscription billing cycle:  - Revenue from &#x60;monthly&#x60; subscription invoices is included in the MRR for the month in which the invoice is issued. - Revenue from &#x60;quarterly&#x60; subscription invoices is distributed evenly over three months. This distribution applies to fees paid in advance (allocated to the next remaining months depending on calendar or anniversary billing) as well as to fees paid in arrears (allocated to the preceding months depending on calendar or anniversary billing). - Revenue from &#x60;yearly&#x60; subscription invoices is distributed evenly over twelve months. This allocation is applicable for fees paid in advance (spread over the next  remaining months depending on calendar or anniversary billing) and for fees paid in arrears (spread over the previous months depending on calendar or anniversary billing). - Revenue from &#x60;weekly&#x60; subscription invoices, the total revenue from all invoices issued within a month is summed up. This total is then divided by the number of invoices issued during that month, and the result is multiplied by 4.33, representing the average number of weeks in a month. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllMrrs'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Mrrs|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorForbidden
     */
    public function findAllMrrs($currency = null, $months = null, string $contentType = self::contentTypes['findAllMrrs'][0])
    {
        list($response) = $this->findAllMrrsWithHttpInfo($currency, $months, $contentType);
        return $response;
    }

    /**
     * Operation findAllMrrsWithHttpInfo
     *
     * List MRR
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Quantifies the revenue generated from &#x60;subscription&#x60; fees on a monthly basis. This figure is calculated post-application of applicable taxes and deduction of any applicable discounts. The method of calculation varies based on the subscription billing cycle:  - Revenue from &#x60;monthly&#x60; subscription invoices is included in the MRR for the month in which the invoice is issued. - Revenue from &#x60;quarterly&#x60; subscription invoices is distributed evenly over three months. This distribution applies to fees paid in advance (allocated to the next remaining months depending on calendar or anniversary billing) as well as to fees paid in arrears (allocated to the preceding months depending on calendar or anniversary billing). - Revenue from &#x60;yearly&#x60; subscription invoices is distributed evenly over twelve months. This allocation is applicable for fees paid in advance (spread over the next  remaining months depending on calendar or anniversary billing) and for fees paid in arrears (spread over the previous months depending on calendar or anniversary billing). - Revenue from &#x60;weekly&#x60; subscription invoices, the total revenue from all invoices issued within a month is summed up. This total is then divided by the number of invoices issued during that month, and the result is multiplied by 4.33, representing the average number of weeks in a month. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllMrrs'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Mrrs|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorForbidden, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAllMrrsWithHttpInfo($currency = null, $months = null, string $contentType = self::contentTypes['findAllMrrs'][0])
    {
        $request = $this->findAllMrrsRequest($currency, $months, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Mrrs',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorForbidden',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Mrrs',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Mrrs',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorForbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findAllMrrsAsync
     *
     * List MRR
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Quantifies the revenue generated from &#x60;subscription&#x60; fees on a monthly basis. This figure is calculated post-application of applicable taxes and deduction of any applicable discounts. The method of calculation varies based on the subscription billing cycle:  - Revenue from &#x60;monthly&#x60; subscription invoices is included in the MRR for the month in which the invoice is issued. - Revenue from &#x60;quarterly&#x60; subscription invoices is distributed evenly over three months. This distribution applies to fees paid in advance (allocated to the next remaining months depending on calendar or anniversary billing) as well as to fees paid in arrears (allocated to the preceding months depending on calendar or anniversary billing). - Revenue from &#x60;yearly&#x60; subscription invoices is distributed evenly over twelve months. This allocation is applicable for fees paid in advance (spread over the next  remaining months depending on calendar or anniversary billing) and for fees paid in arrears (spread over the previous months depending on calendar or anniversary billing). - Revenue from &#x60;weekly&#x60; subscription invoices, the total revenue from all invoices issued within a month is summed up. This total is then divided by the number of invoices issued during that month, and the result is multiplied by 4.33, representing the average number of weeks in a month. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllMrrs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllMrrsAsync($currency = null, $months = null, string $contentType = self::contentTypes['findAllMrrs'][0])
    {
        return $this->findAllMrrsAsyncWithHttpInfo($currency, $months, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAllMrrsAsyncWithHttpInfo
     *
     * List MRR
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Quantifies the revenue generated from &#x60;subscription&#x60; fees on a monthly basis. This figure is calculated post-application of applicable taxes and deduction of any applicable discounts. The method of calculation varies based on the subscription billing cycle:  - Revenue from &#x60;monthly&#x60; subscription invoices is included in the MRR for the month in which the invoice is issued. - Revenue from &#x60;quarterly&#x60; subscription invoices is distributed evenly over three months. This distribution applies to fees paid in advance (allocated to the next remaining months depending on calendar or anniversary billing) as well as to fees paid in arrears (allocated to the preceding months depending on calendar or anniversary billing). - Revenue from &#x60;yearly&#x60; subscription invoices is distributed evenly over twelve months. This allocation is applicable for fees paid in advance (spread over the next  remaining months depending on calendar or anniversary billing) and for fees paid in arrears (spread over the previous months depending on calendar or anniversary billing). - Revenue from &#x60;weekly&#x60; subscription invoices, the total revenue from all invoices issued within a month is summed up. This total is then divided by the number of invoices issued during that month, and the result is multiplied by 4.33, representing the average number of weeks in a month. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllMrrs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllMrrsAsyncWithHttpInfo($currency = null, $months = null, string $contentType = self::contentTypes['findAllMrrs'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Mrrs';
        $request = $this->findAllMrrsRequest($currency, $months, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAllMrrs'
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Quantifies the revenue generated from &#x60;subscription&#x60; fees on a monthly basis. This figure is calculated post-application of applicable taxes and deduction of any applicable discounts. The method of calculation varies based on the subscription billing cycle:  - Revenue from &#x60;monthly&#x60; subscription invoices is included in the MRR for the month in which the invoice is issued. - Revenue from &#x60;quarterly&#x60; subscription invoices is distributed evenly over three months. This distribution applies to fees paid in advance (allocated to the next remaining months depending on calendar or anniversary billing) as well as to fees paid in arrears (allocated to the preceding months depending on calendar or anniversary billing). - Revenue from &#x60;yearly&#x60; subscription invoices is distributed evenly over twelve months. This allocation is applicable for fees paid in advance (spread over the next  remaining months depending on calendar or anniversary billing) and for fees paid in arrears (spread over the previous months depending on calendar or anniversary billing). - Revenue from &#x60;weekly&#x60; subscription invoices, the total revenue from all invoices issued within a month is summed up. This total is then divided by the number of invoices issued during that month, and the result is multiplied by 4.33, representing the average number of weeks in a month. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllMrrs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAllMrrsRequest($currency = null, $months = null, string $contentType = self::contentTypes['findAllMrrs'][0])
    {




        $resourcePath = '/analytics/mrr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'Currency', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $months,
            'months', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAllOverdueBalances
     *
     * List overdue balance
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application). Use it to filter revenue analytics at the customer level. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllOverdueBalances'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\OverdueBalances|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorForbidden
     */
    public function findAllOverdueBalances($currency = null, $external_customer_id = null, $months = null, string $contentType = self::contentTypes['findAllOverdueBalances'][0])
    {
        list($response) = $this->findAllOverdueBalancesWithHttpInfo($currency, $external_customer_id, $months, $contentType);
        return $response;
    }

    /**
     * Operation findAllOverdueBalancesWithHttpInfo
     *
     * List overdue balance
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application). Use it to filter revenue analytics at the customer level. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllOverdueBalances'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\OverdueBalances|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorForbidden, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAllOverdueBalancesWithHttpInfo($currency = null, $external_customer_id = null, $months = null, string $contentType = self::contentTypes['findAllOverdueBalances'][0])
    {
        $request = $this->findAllOverdueBalancesRequest($currency, $external_customer_id, $months, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\OverdueBalances',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorForbidden',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\OverdueBalances',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\OverdueBalances',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorForbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findAllOverdueBalancesAsync
     *
     * List overdue balance
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application). Use it to filter revenue analytics at the customer level. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllOverdueBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllOverdueBalancesAsync($currency = null, $external_customer_id = null, $months = null, string $contentType = self::contentTypes['findAllOverdueBalances'][0])
    {
        return $this->findAllOverdueBalancesAsyncWithHttpInfo($currency, $external_customer_id, $months, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAllOverdueBalancesAsyncWithHttpInfo
     *
     * List overdue balance
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application). Use it to filter revenue analytics at the customer level. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllOverdueBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllOverdueBalancesAsyncWithHttpInfo($currency = null, $external_customer_id = null, $months = null, string $contentType = self::contentTypes['findAllOverdueBalances'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\OverdueBalances';
        $request = $this->findAllOverdueBalancesRequest($currency, $external_customer_id, $months, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAllOverdueBalances'
     *
     * @param  \LagoLagoPhpClientModelCurrency|null $currency Currency of revenue analytics. Format must be ISO 4217. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application). Use it to filter revenue analytics at the customer level. (optional)
     * @param  int|null $months Show data only for given number of months. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllOverdueBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAllOverdueBalancesRequest($currency = null, $external_customer_id = null, $months = null, string $contentType = self::contentTypes['findAllOverdueBalances'][0])
    {





        $resourcePath = '/analytics/overdue_balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency,
            'currency', // param base name
            'Currency', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_customer_id,
            'external_customer_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $months,
            'months', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
