<?php
/**
 * SubscriptionsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Lago\LagoPhpClient\ApiException;
use Lago\LagoPhpClient\Configuration;
use Lago\LagoPhpClient\FormDataProcessor;
use Lago\LagoPhpClient\HeaderSelector;
use Lago\LagoPhpClient\ObjectSerializer;

/**
 * SubscriptionsApi Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SubscriptionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createSubscription' => [
            'application/json',
        ],
        'createSubscriptionAlert' => [
            'application/json',
        ],
        'deleteSubscriptionAlert' => [
            'application/json',
        ],
        'destroySubscription' => [
            'application/json',
        ],
        'findAllSubscriptions' => [
            'application/json',
        ],
        'findSubscription' => [
            'application/json',
        ],
        'getSubscriptionAlert' => [
            'application/json',
        ],
        'getSubscriptionAlerts' => [
            'application/json',
        ],
        'getSubscriptionLifetimeUsage' => [
            'application/json',
        ],
        'updateSubscription' => [
            'application/json',
        ],
        'updateSubscriptionAlert' => [
            'application/json',
        ],
        'updateSubscriptionLifetimeUsage' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createSubscription
     *
     * Assign a plan to a customer
     *
     * @param  \Lago\LagoPhpClient\Model\SubscriptionCreateInput $subscription_create_input Subscription payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscription'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Subscription|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity
     */
    public function createSubscription($subscription_create_input, string $contentType = self::contentTypes['createSubscription'][0])
    {
        list($response) = $this->createSubscriptionWithHttpInfo($subscription_create_input, $contentType);
        return $response;
    }

    /**
     * Operation createSubscriptionWithHttpInfo
     *
     * Assign a plan to a customer
     *
     * @param  \Lago\LagoPhpClient\Model\SubscriptionCreateInput $subscription_create_input Subscription payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscription'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Subscription|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriptionWithHttpInfo($subscription_create_input, string $contentType = self::contentTypes['createSubscription'][0])
    {
        $request = $this->createSubscriptionRequest($subscription_create_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Subscription',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Subscription',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createSubscriptionAsync
     *
     * Assign a plan to a customer
     *
     * @param  \Lago\LagoPhpClient\Model\SubscriptionCreateInput $subscription_create_input Subscription payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionAsync($subscription_create_input, string $contentType = self::contentTypes['createSubscription'][0])
    {
        return $this->createSubscriptionAsyncWithHttpInfo($subscription_create_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriptionAsyncWithHttpInfo
     *
     * Assign a plan to a customer
     *
     * @param  \Lago\LagoPhpClient\Model\SubscriptionCreateInput $subscription_create_input Subscription payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionAsyncWithHttpInfo($subscription_create_input, string $contentType = self::contentTypes['createSubscription'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Subscription';
        $request = $this->createSubscriptionRequest($subscription_create_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscription'
     *
     * @param  \Lago\LagoPhpClient\Model\SubscriptionCreateInput $subscription_create_input Subscription payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSubscriptionRequest($subscription_create_input, string $contentType = self::contentTypes['createSubscription'][0])
    {

        // verify the required parameter 'subscription_create_input' is set
        if ($subscription_create_input === null || (is_array($subscription_create_input) && count($subscription_create_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_create_input when calling createSubscription'
            );
        }


        $resourcePath = '/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($subscription_create_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($subscription_create_input));
            } else {
                $httpBody = $subscription_create_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSubscriptionAlert
     *
     * Create a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\AlertCreateInput $alert_create_input Create a new alert for a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Alert|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity
     */
    public function createSubscriptionAlert($external_id, $alert_create_input, string $contentType = self::contentTypes['createSubscriptionAlert'][0])
    {
        list($response) = $this->createSubscriptionAlertWithHttpInfo($external_id, $alert_create_input, $contentType);
        return $response;
    }

    /**
     * Operation createSubscriptionAlertWithHttpInfo
     *
     * Create a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\AlertCreateInput $alert_create_input Create a new alert for a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Alert|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriptionAlertWithHttpInfo($external_id, $alert_create_input, string $contentType = self::contentTypes['createSubscriptionAlert'][0])
    {
        $request = $this->createSubscriptionAlertRequest($external_id, $alert_create_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Alert',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Alert',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Alert',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createSubscriptionAlertAsync
     *
     * Create a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\AlertCreateInput $alert_create_input Create a new alert for a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionAlertAsync($external_id, $alert_create_input, string $contentType = self::contentTypes['createSubscriptionAlert'][0])
    {
        return $this->createSubscriptionAlertAsyncWithHttpInfo($external_id, $alert_create_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriptionAlertAsyncWithHttpInfo
     *
     * Create a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\AlertCreateInput $alert_create_input Create a new alert for a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionAlertAsyncWithHttpInfo($external_id, $alert_create_input, string $contentType = self::contentTypes['createSubscriptionAlert'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Alert';
        $request = $this->createSubscriptionAlertRequest($external_id, $alert_create_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscriptionAlert'
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\AlertCreateInput $alert_create_input Create a new alert for a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSubscriptionAlertRequest($external_id, $alert_create_input, string $contentType = self::contentTypes['createSubscriptionAlert'][0])
    {

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling createSubscriptionAlert'
            );
        }

        // verify the required parameter 'alert_create_input' is set
        if ($alert_create_input === null || (is_array($alert_create_input) && count($alert_create_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alert_create_input when calling createSubscriptionAlert'
            );
        }


        $resourcePath = '/subscriptions/{external_id}/alerts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alert_create_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alert_create_input));
            } else {
                $httpBody = $alert_create_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSubscriptionAlert
     *
     * Delete a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Alert|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function deleteSubscriptionAlert($external_id, $code, string $contentType = self::contentTypes['deleteSubscriptionAlert'][0])
    {
        list($response) = $this->deleteSubscriptionAlertWithHttpInfo($external_id, $code, $contentType);
        return $response;
    }

    /**
     * Operation deleteSubscriptionAlertWithHttpInfo
     *
     * Delete a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Alert|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubscriptionAlertWithHttpInfo($external_id, $code, string $contentType = self::contentTypes['deleteSubscriptionAlert'][0])
    {
        $request = $this->deleteSubscriptionAlertRequest($external_id, $code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Alert',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Alert',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Alert',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteSubscriptionAlertAsync
     *
     * Delete a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscriptionAlertAsync($external_id, $code, string $contentType = self::contentTypes['deleteSubscriptionAlert'][0])
    {
        return $this->deleteSubscriptionAlertAsyncWithHttpInfo($external_id, $code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubscriptionAlertAsyncWithHttpInfo
     *
     * Delete a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscriptionAlertAsyncWithHttpInfo($external_id, $code, string $contentType = self::contentTypes['deleteSubscriptionAlert'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Alert';
        $request = $this->deleteSubscriptionAlertRequest($external_id, $code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubscriptionAlert'
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSubscriptionAlertRequest($external_id, $code, string $contentType = self::contentTypes['deleteSubscriptionAlert'][0])
    {

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling deleteSubscriptionAlert'
            );
        }

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling deleteSubscriptionAlert'
            );
        }


        $resourcePath = '/subscriptions/{external_id}/alerts/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation destroySubscription
     *
     * Terminate a subscription
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string|null $status If the field is not defined, Lago will terminate only &#x60;active&#x60; subscriptions. However, if you wish to cancel a &#x60;pending&#x60; subscription, please ensure that you include &#x60;status&#x3D;pending&#x60; in your request. (optional)
     * @param  string|null $on_termination_credit_note When a pay-in-advance subscription is terminated before the end of its billing period, we generate a credit note for the unused subscription time by default. This field allows you to control the behavior of the credit note generation:  - &#x60;credit&#x60;: A credit note is generated for the unused subscription time. - &#x60;skip&#x60;: No credit note is generated for the unused subscription time.  _Note: This field is only applicable to pay-in-advance plans and is ignored for pay-in-arrears plans._ (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['destroySubscription'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Subscription|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorNotAllowed
     */
    public function destroySubscription($external_id, $status = null, $on_termination_credit_note = null, string $contentType = self::contentTypes['destroySubscription'][0])
    {
        list($response) = $this->destroySubscriptionWithHttpInfo($external_id, $status, $on_termination_credit_note, $contentType);
        return $response;
    }

    /**
     * Operation destroySubscriptionWithHttpInfo
     *
     * Terminate a subscription
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string|null $status If the field is not defined, Lago will terminate only &#x60;active&#x60; subscriptions. However, if you wish to cancel a &#x60;pending&#x60; subscription, please ensure that you include &#x60;status&#x3D;pending&#x60; in your request. (optional)
     * @param  string|null $on_termination_credit_note When a pay-in-advance subscription is terminated before the end of its billing period, we generate a credit note for the unused subscription time by default. This field allows you to control the behavior of the credit note generation:  - &#x60;credit&#x60;: A credit note is generated for the unused subscription time. - &#x60;skip&#x60;: No credit note is generated for the unused subscription time.  _Note: This field is only applicable to pay-in-advance plans and is ignored for pay-in-arrears plans._ (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['destroySubscription'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Subscription|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorNotAllowed, HTTP status code, HTTP response headers (array of strings)
     */
    public function destroySubscriptionWithHttpInfo($external_id, $status = null, $on_termination_credit_note = null, string $contentType = self::contentTypes['destroySubscription'][0])
    {
        $request = $this->destroySubscriptionRequest($external_id, $status, $on_termination_credit_note, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Subscription',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotAllowed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Subscription',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotAllowed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation destroySubscriptionAsync
     *
     * Terminate a subscription
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string|null $status If the field is not defined, Lago will terminate only &#x60;active&#x60; subscriptions. However, if you wish to cancel a &#x60;pending&#x60; subscription, please ensure that you include &#x60;status&#x3D;pending&#x60; in your request. (optional)
     * @param  string|null $on_termination_credit_note When a pay-in-advance subscription is terminated before the end of its billing period, we generate a credit note for the unused subscription time by default. This field allows you to control the behavior of the credit note generation:  - &#x60;credit&#x60;: A credit note is generated for the unused subscription time. - &#x60;skip&#x60;: No credit note is generated for the unused subscription time.  _Note: This field is only applicable to pay-in-advance plans and is ignored for pay-in-arrears plans._ (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['destroySubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroySubscriptionAsync($external_id, $status = null, $on_termination_credit_note = null, string $contentType = self::contentTypes['destroySubscription'][0])
    {
        return $this->destroySubscriptionAsyncWithHttpInfo($external_id, $status, $on_termination_credit_note, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation destroySubscriptionAsyncWithHttpInfo
     *
     * Terminate a subscription
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string|null $status If the field is not defined, Lago will terminate only &#x60;active&#x60; subscriptions. However, if you wish to cancel a &#x60;pending&#x60; subscription, please ensure that you include &#x60;status&#x3D;pending&#x60; in your request. (optional)
     * @param  string|null $on_termination_credit_note When a pay-in-advance subscription is terminated before the end of its billing period, we generate a credit note for the unused subscription time by default. This field allows you to control the behavior of the credit note generation:  - &#x60;credit&#x60;: A credit note is generated for the unused subscription time. - &#x60;skip&#x60;: No credit note is generated for the unused subscription time.  _Note: This field is only applicable to pay-in-advance plans and is ignored for pay-in-arrears plans._ (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['destroySubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function destroySubscriptionAsyncWithHttpInfo($external_id, $status = null, $on_termination_credit_note = null, string $contentType = self::contentTypes['destroySubscription'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Subscription';
        $request = $this->destroySubscriptionRequest($external_id, $status, $on_termination_credit_note, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'destroySubscription'
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string|null $status If the field is not defined, Lago will terminate only &#x60;active&#x60; subscriptions. However, if you wish to cancel a &#x60;pending&#x60; subscription, please ensure that you include &#x60;status&#x3D;pending&#x60; in your request. (optional)
     * @param  string|null $on_termination_credit_note When a pay-in-advance subscription is terminated before the end of its billing period, we generate a credit note for the unused subscription time by default. This field allows you to control the behavior of the credit note generation:  - &#x60;credit&#x60;: A credit note is generated for the unused subscription time. - &#x60;skip&#x60;: No credit note is generated for the unused subscription time.  _Note: This field is only applicable to pay-in-advance plans and is ignored for pay-in-arrears plans._ (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['destroySubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function destroySubscriptionRequest($external_id, $status = null, $on_termination_credit_note = null, string $contentType = self::contentTypes['destroySubscription'][0])
    {

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling destroySubscription'
            );
        }




        $resourcePath = '/subscriptions/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $on_termination_credit_note,
            'on_termination_credit_note', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAllSubscriptions
     *
     * List all subscriptions
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application) (optional)
     * @param  string|null $plan_code The unique code representing the plan to be attached to the customer. This code must correspond to the code property of one of the active plans. (optional)
     * @param  string[]|null $status If the field is not defined, Lago will return only &#x60;active&#x60; subscriptions. However, if you wish to fetch subscriptions by different status you can define them in a status[] query param. Available filter values: &#x60;pending&#x60;, &#x60;canceled&#x60;, &#x60;terminated&#x60;, &#x60;active&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllSubscriptions'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\SubscriptionsPaginated|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function findAllSubscriptions($page = null, $per_page = null, $external_customer_id = null, $plan_code = null, $status = null, string $contentType = self::contentTypes['findAllSubscriptions'][0])
    {
        list($response) = $this->findAllSubscriptionsWithHttpInfo($page, $per_page, $external_customer_id, $plan_code, $status, $contentType);
        return $response;
    }

    /**
     * Operation findAllSubscriptionsWithHttpInfo
     *
     * List all subscriptions
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application) (optional)
     * @param  string|null $plan_code The unique code representing the plan to be attached to the customer. This code must correspond to the code property of one of the active plans. (optional)
     * @param  string[]|null $status If the field is not defined, Lago will return only &#x60;active&#x60; subscriptions. However, if you wish to fetch subscriptions by different status you can define them in a status[] query param. Available filter values: &#x60;pending&#x60;, &#x60;canceled&#x60;, &#x60;terminated&#x60;, &#x60;active&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllSubscriptions'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\SubscriptionsPaginated|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAllSubscriptionsWithHttpInfo($page = null, $per_page = null, $external_customer_id = null, $plan_code = null, $status = null, string $contentType = self::contentTypes['findAllSubscriptions'][0])
    {
        $request = $this->findAllSubscriptionsRequest($page, $per_page, $external_customer_id, $plan_code, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\SubscriptionsPaginated',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\SubscriptionsPaginated',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\SubscriptionsPaginated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findAllSubscriptionsAsync
     *
     * List all subscriptions
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application) (optional)
     * @param  string|null $plan_code The unique code representing the plan to be attached to the customer. This code must correspond to the code property of one of the active plans. (optional)
     * @param  string[]|null $status If the field is not defined, Lago will return only &#x60;active&#x60; subscriptions. However, if you wish to fetch subscriptions by different status you can define them in a status[] query param. Available filter values: &#x60;pending&#x60;, &#x60;canceled&#x60;, &#x60;terminated&#x60;, &#x60;active&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllSubscriptionsAsync($page = null, $per_page = null, $external_customer_id = null, $plan_code = null, $status = null, string $contentType = self::contentTypes['findAllSubscriptions'][0])
    {
        return $this->findAllSubscriptionsAsyncWithHttpInfo($page, $per_page, $external_customer_id, $plan_code, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAllSubscriptionsAsyncWithHttpInfo
     *
     * List all subscriptions
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application) (optional)
     * @param  string|null $plan_code The unique code representing the plan to be attached to the customer. This code must correspond to the code property of one of the active plans. (optional)
     * @param  string[]|null $status If the field is not defined, Lago will return only &#x60;active&#x60; subscriptions. However, if you wish to fetch subscriptions by different status you can define them in a status[] query param. Available filter values: &#x60;pending&#x60;, &#x60;canceled&#x60;, &#x60;terminated&#x60;, &#x60;active&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllSubscriptionsAsyncWithHttpInfo($page = null, $per_page = null, $external_customer_id = null, $plan_code = null, $status = null, string $contentType = self::contentTypes['findAllSubscriptions'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\SubscriptionsPaginated';
        $request = $this->findAllSubscriptionsRequest($page, $per_page, $external_customer_id, $plan_code, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAllSubscriptions'
     *
     * @param  int|null $page Page number. (optional)
     * @param  int|null $per_page Number of records per page. (optional)
     * @param  string|null $external_customer_id The customer external unique identifier (provided by your own application) (optional)
     * @param  string|null $plan_code The unique code representing the plan to be attached to the customer. This code must correspond to the code property of one of the active plans. (optional)
     * @param  string[]|null $status If the field is not defined, Lago will return only &#x60;active&#x60; subscriptions. However, if you wish to fetch subscriptions by different status you can define them in a status[] query param. Available filter values: &#x60;pending&#x60;, &#x60;canceled&#x60;, &#x60;terminated&#x60;, &#x60;active&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findAllSubscriptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findAllSubscriptionsRequest($page = null, $per_page = null, $external_customer_id = null, $plan_code = null, $status = null, string $contentType = self::contentTypes['findAllSubscriptions'][0])
    {







        $resourcePath = '/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_customer_id,
            'external_customer_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $plan_code,
            'plan_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status[]', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findSubscription
     *
     * Retrieve a subscription
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string|null $status By default, this endpoint only return &#x60;active&#x60; subscriptions. If you want to retrieve a subscription with a different &#x60;status&#x60;, you can specify it here.  _Note: As there may exists multiple &#x60;canceled&#x60; or &#x60;terminated&#x60; subscribtions for the same &#x60;external_id&#x60;, it is recommended to use the \&quot;List all subscriptions\&quot; endpoint to retrieve those subscriptions._ (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSubscription'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Subscription|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function findSubscription($external_id, $status = null, string $contentType = self::contentTypes['findSubscription'][0])
    {
        list($response) = $this->findSubscriptionWithHttpInfo($external_id, $status, $contentType);
        return $response;
    }

    /**
     * Operation findSubscriptionWithHttpInfo
     *
     * Retrieve a subscription
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string|null $status By default, this endpoint only return &#x60;active&#x60; subscriptions. If you want to retrieve a subscription with a different &#x60;status&#x60;, you can specify it here.  _Note: As there may exists multiple &#x60;canceled&#x60; or &#x60;terminated&#x60; subscribtions for the same &#x60;external_id&#x60;, it is recommended to use the \&quot;List all subscriptions\&quot; endpoint to retrieve those subscriptions._ (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSubscription'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Subscription|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function findSubscriptionWithHttpInfo($external_id, $status = null, string $contentType = self::contentTypes['findSubscription'][0])
    {
        $request = $this->findSubscriptionRequest($external_id, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Subscription',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Subscription',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findSubscriptionAsync
     *
     * Retrieve a subscription
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string|null $status By default, this endpoint only return &#x60;active&#x60; subscriptions. If you want to retrieve a subscription with a different &#x60;status&#x60;, you can specify it here.  _Note: As there may exists multiple &#x60;canceled&#x60; or &#x60;terminated&#x60; subscribtions for the same &#x60;external_id&#x60;, it is recommended to use the \&quot;List all subscriptions\&quot; endpoint to retrieve those subscriptions._ (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSubscriptionAsync($external_id, $status = null, string $contentType = self::contentTypes['findSubscription'][0])
    {
        return $this->findSubscriptionAsyncWithHttpInfo($external_id, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findSubscriptionAsyncWithHttpInfo
     *
     * Retrieve a subscription
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string|null $status By default, this endpoint only return &#x60;active&#x60; subscriptions. If you want to retrieve a subscription with a different &#x60;status&#x60;, you can specify it here.  _Note: As there may exists multiple &#x60;canceled&#x60; or &#x60;terminated&#x60; subscribtions for the same &#x60;external_id&#x60;, it is recommended to use the \&quot;List all subscriptions\&quot; endpoint to retrieve those subscriptions._ (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSubscriptionAsyncWithHttpInfo($external_id, $status = null, string $contentType = self::contentTypes['findSubscription'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Subscription';
        $request = $this->findSubscriptionRequest($external_id, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findSubscription'
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string|null $status By default, this endpoint only return &#x60;active&#x60; subscriptions. If you want to retrieve a subscription with a different &#x60;status&#x60;, you can specify it here.  _Note: As there may exists multiple &#x60;canceled&#x60; or &#x60;terminated&#x60; subscribtions for the same &#x60;external_id&#x60;, it is recommended to use the \&quot;List all subscriptions\&quot; endpoint to retrieve those subscriptions._ (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findSubscriptionRequest($external_id, $status = null, string $contentType = self::contentTypes['findSubscription'][0])
    {

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling findSubscription'
            );
        }



        $resourcePath = '/subscriptions/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionAlert
     *
     * Retrieve a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Alert|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function getSubscriptionAlert($external_id, $code, string $contentType = self::contentTypes['getSubscriptionAlert'][0])
    {
        list($response) = $this->getSubscriptionAlertWithHttpInfo($external_id, $code, $contentType);
        return $response;
    }

    /**
     * Operation getSubscriptionAlertWithHttpInfo
     *
     * Retrieve a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Alert|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionAlertWithHttpInfo($external_id, $code, string $contentType = self::contentTypes['getSubscriptionAlert'][0])
    {
        $request = $this->getSubscriptionAlertRequest($external_id, $code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Alert',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Alert',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Alert',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getSubscriptionAlertAsync
     *
     * Retrieve a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionAlertAsync($external_id, $code, string $contentType = self::contentTypes['getSubscriptionAlert'][0])
    {
        return $this->getSubscriptionAlertAsyncWithHttpInfo($external_id, $code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionAlertAsyncWithHttpInfo
     *
     * Retrieve a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionAlertAsyncWithHttpInfo($external_id, $code, string $contentType = self::contentTypes['getSubscriptionAlert'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Alert';
        $request = $this->getSubscriptionAlertRequest($external_id, $code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionAlert'
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubscriptionAlertRequest($external_id, $code, string $contentType = self::contentTypes['getSubscriptionAlert'][0])
    {

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling getSubscriptionAlert'
            );
        }

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling getSubscriptionAlert'
            );
        }


        $resourcePath = '/subscriptions/{external_id}/alerts/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionAlerts
     *
     * List subscription alerts
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionAlerts'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Alerts|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function getSubscriptionAlerts($external_id, string $contentType = self::contentTypes['getSubscriptionAlerts'][0])
    {
        list($response) = $this->getSubscriptionAlertsWithHttpInfo($external_id, $contentType);
        return $response;
    }

    /**
     * Operation getSubscriptionAlertsWithHttpInfo
     *
     * List subscription alerts
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionAlerts'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Alerts|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionAlertsWithHttpInfo($external_id, string $contentType = self::contentTypes['getSubscriptionAlerts'][0])
    {
        $request = $this->getSubscriptionAlertsRequest($external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Alerts',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Alerts',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Alerts',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getSubscriptionAlertsAsync
     *
     * List subscription alerts
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionAlerts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionAlertsAsync($external_id, string $contentType = self::contentTypes['getSubscriptionAlerts'][0])
    {
        return $this->getSubscriptionAlertsAsyncWithHttpInfo($external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionAlertsAsyncWithHttpInfo
     *
     * List subscription alerts
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionAlerts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionAlertsAsyncWithHttpInfo($external_id, string $contentType = self::contentTypes['getSubscriptionAlerts'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Alerts';
        $request = $this->getSubscriptionAlertsRequest($external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionAlerts'
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionAlerts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubscriptionAlertsRequest($external_id, string $contentType = self::contentTypes['getSubscriptionAlerts'][0])
    {

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling getSubscriptionAlerts'
            );
        }


        $resourcePath = '/subscriptions/{external_id}/alerts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionLifetimeUsage
     *
     * Retrieve subscription lifetime usage
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionLifetimeUsage'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\LifetimeUsage|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound
     */
    public function getSubscriptionLifetimeUsage($external_id, string $contentType = self::contentTypes['getSubscriptionLifetimeUsage'][0])
    {
        list($response) = $this->getSubscriptionLifetimeUsageWithHttpInfo($external_id, $contentType);
        return $response;
    }

    /**
     * Operation getSubscriptionLifetimeUsageWithHttpInfo
     *
     * Retrieve subscription lifetime usage
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionLifetimeUsage'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\LifetimeUsage|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionLifetimeUsageWithHttpInfo($external_id, string $contentType = self::contentTypes['getSubscriptionLifetimeUsage'][0])
    {
        $request = $this->getSubscriptionLifetimeUsageRequest($external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\LifetimeUsage',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\LifetimeUsage',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\LifetimeUsage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getSubscriptionLifetimeUsageAsync
     *
     * Retrieve subscription lifetime usage
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionLifetimeUsage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionLifetimeUsageAsync($external_id, string $contentType = self::contentTypes['getSubscriptionLifetimeUsage'][0])
    {
        return $this->getSubscriptionLifetimeUsageAsyncWithHttpInfo($external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionLifetimeUsageAsyncWithHttpInfo
     *
     * Retrieve subscription lifetime usage
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionLifetimeUsage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionLifetimeUsageAsyncWithHttpInfo($external_id, string $contentType = self::contentTypes['getSubscriptionLifetimeUsage'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\LifetimeUsage';
        $request = $this->getSubscriptionLifetimeUsageRequest($external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionLifetimeUsage'
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubscriptionLifetimeUsage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubscriptionLifetimeUsageRequest($external_id, string $contentType = self::contentTypes['getSubscriptionLifetimeUsage'][0])
    {

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling getSubscriptionLifetimeUsage'
            );
        }


        $resourcePath = '/subscriptions/{external_id}/lifetime_usage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubscription
     *
     * Update a subscription
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\SubscriptionUpdateInput $subscription_update_input Update an existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscription'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Subscription|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity
     */
    public function updateSubscription($external_id, $subscription_update_input, string $contentType = self::contentTypes['updateSubscription'][0])
    {
        list($response) = $this->updateSubscriptionWithHttpInfo($external_id, $subscription_update_input, $contentType);
        return $response;
    }

    /**
     * Operation updateSubscriptionWithHttpInfo
     *
     * Update a subscription
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\SubscriptionUpdateInput $subscription_update_input Update an existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscription'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Subscription|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubscriptionWithHttpInfo($external_id, $subscription_update_input, string $contentType = self::contentTypes['updateSubscription'][0])
    {
        $request = $this->updateSubscriptionRequest($external_id, $subscription_update_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Subscription',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Subscription',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateSubscriptionAsync
     *
     * Update a subscription
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\SubscriptionUpdateInput $subscription_update_input Update an existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriptionAsync($external_id, $subscription_update_input, string $contentType = self::contentTypes['updateSubscription'][0])
    {
        return $this->updateSubscriptionAsyncWithHttpInfo($external_id, $subscription_update_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubscriptionAsyncWithHttpInfo
     *
     * Update a subscription
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\SubscriptionUpdateInput $subscription_update_input Update an existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriptionAsyncWithHttpInfo($external_id, $subscription_update_input, string $contentType = self::contentTypes['updateSubscription'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Subscription';
        $request = $this->updateSubscriptionRequest($external_id, $subscription_update_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubscription'
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\SubscriptionUpdateInput $subscription_update_input Update an existing subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSubscriptionRequest($external_id, $subscription_update_input, string $contentType = self::contentTypes['updateSubscription'][0])
    {

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling updateSubscription'
            );
        }

        // verify the required parameter 'subscription_update_input' is set
        if ($subscription_update_input === null || (is_array($subscription_update_input) && count($subscription_update_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_update_input when calling updateSubscription'
            );
        }


        $resourcePath = '/subscriptions/{external_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($subscription_update_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($subscription_update_input));
            } else {
                $httpBody = $subscription_update_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubscriptionAlert
     *
     * Update a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  \Lago\LagoPhpClient\Model\AlertUpdateInput $alert_update_input Update an existing alert for a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\Alert|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity
     */
    public function updateSubscriptionAlert($external_id, $code, $alert_update_input, string $contentType = self::contentTypes['updateSubscriptionAlert'][0])
    {
        list($response) = $this->updateSubscriptionAlertWithHttpInfo($external_id, $code, $alert_update_input, $contentType);
        return $response;
    }

    /**
     * Operation updateSubscriptionAlertWithHttpInfo
     *
     * Update a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  \Lago\LagoPhpClient\Model\AlertUpdateInput $alert_update_input Update an existing alert for a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\Alert|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubscriptionAlertWithHttpInfo($external_id, $code, $alert_update_input, string $contentType = self::contentTypes['updateSubscriptionAlert'][0])
    {
        $request = $this->updateSubscriptionAlertRequest($external_id, $code, $alert_update_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\Alert',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\Alert',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\Alert',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateSubscriptionAlertAsync
     *
     * Update a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  \Lago\LagoPhpClient\Model\AlertUpdateInput $alert_update_input Update an existing alert for a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriptionAlertAsync($external_id, $code, $alert_update_input, string $contentType = self::contentTypes['updateSubscriptionAlert'][0])
    {
        return $this->updateSubscriptionAlertAsyncWithHttpInfo($external_id, $code, $alert_update_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubscriptionAlertAsyncWithHttpInfo
     *
     * Update a subscription alert
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  \Lago\LagoPhpClient\Model\AlertUpdateInput $alert_update_input Update an existing alert for a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriptionAlertAsyncWithHttpInfo($external_id, $code, $alert_update_input, string $contentType = self::contentTypes['updateSubscriptionAlert'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\Alert';
        $request = $this->updateSubscriptionAlertRequest($external_id, $code, $alert_update_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubscriptionAlert'
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  string $code Unique code of the alert (required)
     * @param  \Lago\LagoPhpClient\Model\AlertUpdateInput $alert_update_input Update an existing alert for a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionAlert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSubscriptionAlertRequest($external_id, $code, $alert_update_input, string $contentType = self::contentTypes['updateSubscriptionAlert'][0])
    {

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling updateSubscriptionAlert'
            );
        }

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling updateSubscriptionAlert'
            );
        }

        // verify the required parameter 'alert_update_input' is set
        if ($alert_update_input === null || (is_array($alert_update_input) && count($alert_update_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alert_update_input when calling updateSubscriptionAlert'
            );
        }


        $resourcePath = '/subscriptions/{external_id}/alerts/{code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                '{' . 'code' . '}',
                ObjectSerializer::toPathValue($code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alert_update_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alert_update_input));
            } else {
                $httpBody = $alert_update_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubscriptionLifetimeUsage
     *
     * Update a subscription lifetime usage
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\LifetimeUsageInput $lifetime_usage_input Update the lifetime usage of a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionLifetimeUsage'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Lago\LagoPhpClient\Model\LifetimeUsage|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity
     */
    public function updateSubscriptionLifetimeUsage($external_id, $lifetime_usage_input, string $contentType = self::contentTypes['updateSubscriptionLifetimeUsage'][0])
    {
        list($response) = $this->updateSubscriptionLifetimeUsageWithHttpInfo($external_id, $lifetime_usage_input, $contentType);
        return $response;
    }

    /**
     * Operation updateSubscriptionLifetimeUsageWithHttpInfo
     *
     * Update a subscription lifetime usage
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\LifetimeUsageInput $lifetime_usage_input Update the lifetime usage of a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionLifetimeUsage'] to see the possible values for this operation
     *
     * @throws \Lago\LagoPhpClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Lago\LagoPhpClient\Model\LifetimeUsage|\Lago\LagoPhpClient\Model\ApiErrorBadRequest|\Lago\LagoPhpClient\Model\ApiErrorUnauthorized|\Lago\LagoPhpClient\Model\ApiErrorNotFound|\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubscriptionLifetimeUsageWithHttpInfo($external_id, $lifetime_usage_input, string $contentType = self::contentTypes['updateSubscriptionLifetimeUsage'][0])
    {
        $request = $this->updateSubscriptionLifetimeUsageRequest($external_id, $lifetime_usage_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\LifetimeUsage',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Lago\LagoPhpClient\Model\LifetimeUsage',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\LifetimeUsage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorNotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Lago\LagoPhpClient\Model\ApiErrorUnprocessableEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateSubscriptionLifetimeUsageAsync
     *
     * Update a subscription lifetime usage
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\LifetimeUsageInput $lifetime_usage_input Update the lifetime usage of a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionLifetimeUsage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriptionLifetimeUsageAsync($external_id, $lifetime_usage_input, string $contentType = self::contentTypes['updateSubscriptionLifetimeUsage'][0])
    {
        return $this->updateSubscriptionLifetimeUsageAsyncWithHttpInfo($external_id, $lifetime_usage_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubscriptionLifetimeUsageAsyncWithHttpInfo
     *
     * Update a subscription lifetime usage
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\LifetimeUsageInput $lifetime_usage_input Update the lifetime usage of a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionLifetimeUsage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriptionLifetimeUsageAsyncWithHttpInfo($external_id, $lifetime_usage_input, string $contentType = self::contentTypes['updateSubscriptionLifetimeUsage'][0])
    {
        $returnType = '\Lago\LagoPhpClient\Model\LifetimeUsage';
        $request = $this->updateSubscriptionLifetimeUsageRequest($external_id, $lifetime_usage_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubscriptionLifetimeUsage'
     *
     * @param  string $external_id External ID of the existing subscription (required)
     * @param  \Lago\LagoPhpClient\Model\LifetimeUsageInput $lifetime_usage_input Update the lifetime usage of a subscription (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionLifetimeUsage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSubscriptionLifetimeUsageRequest($external_id, $lifetime_usage_input, string $contentType = self::contentTypes['updateSubscriptionLifetimeUsage'][0])
    {

        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling updateSubscriptionLifetimeUsage'
            );
        }

        // verify the required parameter 'lifetime_usage_input' is set
        if ($lifetime_usage_input === null || (is_array($lifetime_usage_input) && count($lifetime_usage_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lifetime_usage_input when calling updateSubscriptionLifetimeUsage'
            );
        }


        $resourcePath = '/subscriptions/{external_id}/lifetime_usage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'external_id' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($lifetime_usage_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($lifetime_usage_input));
            } else {
                $httpBody = $lifetime_usage_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
