<?php
/**
 * SubscriptionCreateInputSubscription
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * SubscriptionCreateInputSubscription Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubscriptionCreateInputSubscription implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubscriptionCreateInput_subscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'external_customer_id' => 'string',
        'plan_code' => 'string',
        'name' => 'string',
        'external_id' => 'string',
        'billing_time' => 'string',
        'ending_at' => '\DateTime',
        'subscription_at' => '\DateTime',
        'plan_overrides' => '\Lago\LagoPhpClient\Model\PlanOverridesObject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'external_customer_id' => null,
        'plan_code' => null,
        'name' => null,
        'external_id' => null,
        'billing_time' => null,
        'ending_at' => 'date-time',
        'subscription_at' => 'date-time',
        'plan_overrides' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'external_customer_id' => false,
        'plan_code' => false,
        'name' => false,
        'external_id' => false,
        'billing_time' => false,
        'ending_at' => false,
        'subscription_at' => false,
        'plan_overrides' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_customer_id' => 'external_customer_id',
        'plan_code' => 'plan_code',
        'name' => 'name',
        'external_id' => 'external_id',
        'billing_time' => 'billing_time',
        'ending_at' => 'ending_at',
        'subscription_at' => 'subscription_at',
        'plan_overrides' => 'plan_overrides'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_customer_id' => 'setExternalCustomerId',
        'plan_code' => 'setPlanCode',
        'name' => 'setName',
        'external_id' => 'setExternalId',
        'billing_time' => 'setBillingTime',
        'ending_at' => 'setEndingAt',
        'subscription_at' => 'setSubscriptionAt',
        'plan_overrides' => 'setPlanOverrides'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_customer_id' => 'getExternalCustomerId',
        'plan_code' => 'getPlanCode',
        'name' => 'getName',
        'external_id' => 'getExternalId',
        'billing_time' => 'getBillingTime',
        'ending_at' => 'getEndingAt',
        'subscription_at' => 'getSubscriptionAt',
        'plan_overrides' => 'getPlanOverrides'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BILLING_TIME_CALENDAR = 'calendar';
    public const BILLING_TIME_ANNIVERSARY = 'anniversary';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingTimeAllowableValues()
    {
        return [
            self::BILLING_TIME_CALENDAR,
            self::BILLING_TIME_ANNIVERSARY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('external_customer_id', $data ?? [], null);
        $this->setIfExists('plan_code', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('billing_time', $data ?? [], null);
        $this->setIfExists('ending_at', $data ?? [], null);
        $this->setIfExists('subscription_at', $data ?? [], null);
        $this->setIfExists('plan_overrides', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['external_customer_id'] === null) {
            $invalidProperties[] = "'external_customer_id' can't be null";
        }
        if ($this->container['plan_code'] === null) {
            $invalidProperties[] = "'plan_code' can't be null";
        }
        if ($this->container['external_id'] === null) {
            $invalidProperties[] = "'external_id' can't be null";
        }
        $allowedValues = $this->getBillingTimeAllowableValues();
        if (!is_null($this->container['billing_time']) && !in_array($this->container['billing_time'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'billing_time', must be one of '%s'",
                $this->container['billing_time'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_customer_id
     *
     * @return string
     */
    public function getExternalCustomerId()
    {
        return $this->container['external_customer_id'];
    }

    /**
     * Sets external_customer_id
     *
     * @param string $external_customer_id The customer external unique identifier (provided by your own application)
     *
     * @return self
     */
    public function setExternalCustomerId($external_customer_id)
    {
        if (is_null($external_customer_id)) {
            throw new \InvalidArgumentException('non-nullable external_customer_id cannot be null');
        }
        $this->container['external_customer_id'] = $external_customer_id;

        return $this;
    }

    /**
     * Gets plan_code
     *
     * @return string
     */
    public function getPlanCode()
    {
        return $this->container['plan_code'];
    }

    /**
     * Sets plan_code
     *
     * @param string $plan_code The unique code representing the plan to be attached to the customer. This code must correspond to the `code` property of one of the active plans.
     *
     * @return self
     */
    public function setPlanCode($plan_code)
    {
        if (is_null($plan_code)) {
            throw new \InvalidArgumentException('non-nullable plan_code cannot be null');
        }
        $this->container['plan_code'] = $plan_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The display name of the subscription on an invoice. This field allows for customization of the subscription's name for billing purposes, especially useful when a single customer has multiple subscriptions using the same plan.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id The unique external identifier for the subscription. This identifier serves as an idempotency key, ensuring that each subscription is unique.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets billing_time
     *
     * @return string|null
     */
    public function getBillingTime()
    {
        return $this->container['billing_time'];
    }

    /**
     * Sets billing_time
     *
     * @param string|null $billing_time The billing time for the subscription, which can be set as either `anniversary` or `calendar`. If not explicitly provided, it will default to `calendar`. The billing time determines the timing of recurring billing cycles for the subscription. By specifying `anniversary`, the billing cycle will be based on the specific date the subscription started (billed fully), while `calendar` sets the billing cycle at the first day of the week/month/year (billed with proration).
     *
     * @return self
     */
    public function setBillingTime($billing_time)
    {
        if (is_null($billing_time)) {
            throw new \InvalidArgumentException('non-nullable billing_time cannot be null');
        }
        $allowedValues = $this->getBillingTimeAllowableValues();
        if (!in_array($billing_time, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'billing_time', must be one of '%s'",
                    $billing_time,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing_time'] = $billing_time;

        return $this;
    }

    /**
     * Gets ending_at
     *
     * @return \DateTime|null
     */
    public function getEndingAt()
    {
        return $this->container['ending_at'];
    }

    /**
     * Sets ending_at
     *
     * @param \DateTime|null $ending_at The effective end date of the subscription. If this field is set to null, the subscription will automatically renew. This date should be provided in ISO 8601 datetime format, and use Coordinated Universal Time (UTC).
     *
     * @return self
     */
    public function setEndingAt($ending_at)
    {
        if (is_null($ending_at)) {
            throw new \InvalidArgumentException('non-nullable ending_at cannot be null');
        }
        $this->container['ending_at'] = $ending_at;

        return $this;
    }

    /**
     * Gets subscription_at
     *
     * @return \DateTime|null
     */
    public function getSubscriptionAt()
    {
        return $this->container['subscription_at'];
    }

    /**
     * Sets subscription_at
     *
     * @param \DateTime|null $subscription_at The start date for the subscription, allowing for the creation of subscriptions that can begin in the past or future. Please note that it cannot be used to update the start date of a pending subscription or schedule an upgrade/downgrade. The start_date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
     *
     * @return self
     */
    public function setSubscriptionAt($subscription_at)
    {
        if (is_null($subscription_at)) {
            throw new \InvalidArgumentException('non-nullable subscription_at cannot be null');
        }
        $this->container['subscription_at'] = $subscription_at;

        return $this;
    }

    /**
     * Gets plan_overrides
     *
     * @return \Lago\LagoPhpClient\Model\PlanOverridesObject|null
     */
    public function getPlanOverrides()
    {
        return $this->container['plan_overrides'];
    }

    /**
     * Sets plan_overrides
     *
     * @param \Lago\LagoPhpClient\Model\PlanOverridesObject|null $plan_overrides plan_overrides
     *
     * @return self
     */
    public function setPlanOverrides($plan_overrides)
    {
        if (is_null($plan_overrides)) {
            throw new \InvalidArgumentException('non-nullable plan_overrides cannot be null');
        }
        $this->container['plan_overrides'] = $plan_overrides;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


