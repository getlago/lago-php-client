<?php
/**
 * PlanUpdateInputPlan
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * PlanUpdateInputPlan Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PlanUpdateInputPlan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlanUpdateInput_plan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'invoice_display_name' => 'string',
        'code' => 'string',
        'interval' => 'string',
        'description' => 'string',
        'amount_cents' => 'int',
        'amount_currency' => '\Lago\LagoPhpClient\Model\Currency',
        'trial_period' => 'float',
        'pay_in_advance' => 'bool',
        'bill_charges_monthly' => 'bool',
        'tax_codes' => 'string[]',
        'minimum_commitment' => '\Lago\LagoPhpClient\Model\MinimumCommitmentInput',
        'charges' => '\Lago\LagoPhpClient\Model\PlanUpdateInputPlanChargesInner[]',
        'usage_thresholds' => '\Lago\LagoPhpClient\Model\UsageThresholdInput[]',
        'cascade_updates' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'invoice_display_name' => null,
        'code' => null,
        'interval' => null,
        'description' => null,
        'amount_cents' => null,
        'amount_currency' => null,
        'trial_period' => null,
        'pay_in_advance' => null,
        'bill_charges_monthly' => null,
        'tax_codes' => null,
        'minimum_commitment' => null,
        'charges' => null,
        'usage_thresholds' => null,
        'cascade_updates' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'invoice_display_name' => false,
        'code' => false,
        'interval' => false,
        'description' => false,
        'amount_cents' => false,
        'amount_currency' => false,
        'trial_period' => false,
        'pay_in_advance' => false,
        'bill_charges_monthly' => true,
        'tax_codes' => false,
        'minimum_commitment' => false,
        'charges' => false,
        'usage_thresholds' => false,
        'cascade_updates' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'invoice_display_name' => 'invoice_display_name',
        'code' => 'code',
        'interval' => 'interval',
        'description' => 'description',
        'amount_cents' => 'amount_cents',
        'amount_currency' => 'amount_currency',
        'trial_period' => 'trial_period',
        'pay_in_advance' => 'pay_in_advance',
        'bill_charges_monthly' => 'bill_charges_monthly',
        'tax_codes' => 'tax_codes',
        'minimum_commitment' => 'minimum_commitment',
        'charges' => 'charges',
        'usage_thresholds' => 'usage_thresholds',
        'cascade_updates' => 'cascade_updates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'invoice_display_name' => 'setInvoiceDisplayName',
        'code' => 'setCode',
        'interval' => 'setInterval',
        'description' => 'setDescription',
        'amount_cents' => 'setAmountCents',
        'amount_currency' => 'setAmountCurrency',
        'trial_period' => 'setTrialPeriod',
        'pay_in_advance' => 'setPayInAdvance',
        'bill_charges_monthly' => 'setBillChargesMonthly',
        'tax_codes' => 'setTaxCodes',
        'minimum_commitment' => 'setMinimumCommitment',
        'charges' => 'setCharges',
        'usage_thresholds' => 'setUsageThresholds',
        'cascade_updates' => 'setCascadeUpdates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'invoice_display_name' => 'getInvoiceDisplayName',
        'code' => 'getCode',
        'interval' => 'getInterval',
        'description' => 'getDescription',
        'amount_cents' => 'getAmountCents',
        'amount_currency' => 'getAmountCurrency',
        'trial_period' => 'getTrialPeriod',
        'pay_in_advance' => 'getPayInAdvance',
        'bill_charges_monthly' => 'getBillChargesMonthly',
        'tax_codes' => 'getTaxCodes',
        'minimum_commitment' => 'getMinimumCommitment',
        'charges' => 'getCharges',
        'usage_thresholds' => 'getUsageThresholds',
        'cascade_updates' => 'getCascadeUpdates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INTERVAL_WEEKLY = 'weekly';
    public const INTERVAL_MONTHLY = 'monthly';
    public const INTERVAL_QUARTERLY = 'quarterly';
    public const INTERVAL_YEARLY = 'yearly';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntervalAllowableValues()
    {
        return [
            self::INTERVAL_WEEKLY,
            self::INTERVAL_MONTHLY,
            self::INTERVAL_QUARTERLY,
            self::INTERVAL_YEARLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('invoice_display_name', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('interval', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('amount_cents', $data ?? [], null);
        $this->setIfExists('amount_currency', $data ?? [], null);
        $this->setIfExists('trial_period', $data ?? [], null);
        $this->setIfExists('pay_in_advance', $data ?? [], null);
        $this->setIfExists('bill_charges_monthly', $data ?? [], null);
        $this->setIfExists('tax_codes', $data ?? [], null);
        $this->setIfExists('minimum_commitment', $data ?? [], null);
        $this->setIfExists('charges', $data ?? [], null);
        $this->setIfExists('usage_thresholds', $data ?? [], null);
        $this->setIfExists('cascade_updates', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIntervalAllowableValues();
        if (!is_null($this->container['interval']) && !in_array($this->container['interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interval', must be one of '%s'",
                $this->container['interval'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the plan.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets invoice_display_name
     *
     * @return string|null
     */
    public function getInvoiceDisplayName()
    {
        return $this->container['invoice_display_name'];
    }

    /**
     * Sets invoice_display_name
     *
     * @param string|null $invoice_display_name Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the plan will be used as the default display name.
     *
     * @return self
     */
    public function setInvoiceDisplayName($invoice_display_name)
    {
        if (is_null($invoice_display_name)) {
            throw new \InvalidArgumentException('non-nullable invoice_display_name cannot be null');
        }
        $this->container['invoice_display_name'] = $invoice_display_name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code The code of the plan. It serves as a unique identifier associated with a particular plan. The code is typically used for internal or system-level identification purposes, like assigning a subscription, for instance.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string|null $interval The interval used for recurring billing. It represents the frequency at which subscription billing occurs. The interval can be one of the following values: `yearly`, `quarterly`, `monthly`, or `weekly`.
     *
     * @return self
     */
    public function setInterval($interval)
    {
        if (is_null($interval)) {
            throw new \InvalidArgumentException('non-nullable interval cannot be null');
        }
        $allowedValues = $this->getIntervalAllowableValues();
        if (!in_array($interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interval', must be one of '%s'",
                    $interval,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description on the plan.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets amount_cents
     *
     * @return int|null
     */
    public function getAmountCents()
    {
        return $this->container['amount_cents'];
    }

    /**
     * Sets amount_cents
     *
     * @param int|null $amount_cents The base cost of the plan, excluding any applicable taxes, that is billed on a recurring basis. This value is defined at 0 if your plan is a pay-as-you-go plan.
     *
     * @return self
     */
    public function setAmountCents($amount_cents)
    {
        if (is_null($amount_cents)) {
            throw new \InvalidArgumentException('non-nullable amount_cents cannot be null');
        }
        $this->container['amount_cents'] = $amount_cents;

        return $this;
    }

    /**
     * Gets amount_currency
     *
     * @return \Lago\LagoPhpClient\Model\Currency|null
     */
    public function getAmountCurrency()
    {
        return $this->container['amount_currency'];
    }

    /**
     * Sets amount_currency
     *
     * @param \Lago\LagoPhpClient\Model\Currency|null $amount_currency The currency of the plan. It indicates the monetary unit in which the plan's cost, including taxes and usage-based charges, is expressed.
     *
     * @return self
     */
    public function setAmountCurrency($amount_currency)
    {
        if (is_null($amount_currency)) {
            throw new \InvalidArgumentException('non-nullable amount_currency cannot be null');
        }
        $this->container['amount_currency'] = $amount_currency;

        return $this;
    }

    /**
     * Gets trial_period
     *
     * @return float|null
     */
    public function getTrialPeriod()
    {
        return $this->container['trial_period'];
    }

    /**
     * Sets trial_period
     *
     * @param float|null $trial_period The duration in days during which the base cost of the plan is offered for free.
     *
     * @return self
     */
    public function setTrialPeriod($trial_period)
    {
        if (is_null($trial_period)) {
            throw new \InvalidArgumentException('non-nullable trial_period cannot be null');
        }
        $this->container['trial_period'] = $trial_period;

        return $this;
    }

    /**
     * Gets pay_in_advance
     *
     * @return bool|null
     */
    public function getPayInAdvance()
    {
        return $this->container['pay_in_advance'];
    }

    /**
     * Sets pay_in_advance
     *
     * @param bool|null $pay_in_advance This field determines the billing timing for the plan. When set to `true`, the base cost of the plan is due at the beginning of each billing period. Conversely, when set to `false`, the base cost of the plan is due at the end of each billing period.
     *
     * @return self
     */
    public function setPayInAdvance($pay_in_advance)
    {
        if (is_null($pay_in_advance)) {
            throw new \InvalidArgumentException('non-nullable pay_in_advance cannot be null');
        }
        $this->container['pay_in_advance'] = $pay_in_advance;

        return $this;
    }

    /**
     * Gets bill_charges_monthly
     *
     * @return bool|null
     */
    public function getBillChargesMonthly()
    {
        return $this->container['bill_charges_monthly'];
    }

    /**
     * Sets bill_charges_monthly
     *
     * @param bool|null $bill_charges_monthly This field, when set to `true`, enables to invoice usage-based charges on monthly basis, even if the cadence of the plan is yearly. This allows customers to pay charges overage on a monthly basis. This can be set to true only if the plan's interval is `yearly`.
     *
     * @return self
     */
    public function setBillChargesMonthly($bill_charges_monthly)
    {
        if (is_null($bill_charges_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'bill_charges_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bill_charges_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bill_charges_monthly'] = $bill_charges_monthly;

        return $this;
    }

    /**
     * Gets tax_codes
     *
     * @return string[]|null
     */
    public function getTaxCodes()
    {
        return $this->container['tax_codes'];
    }

    /**
     * Sets tax_codes
     *
     * @param string[]|null $tax_codes List of unique code used to identify the taxes.
     *
     * @return self
     */
    public function setTaxCodes($tax_codes)
    {
        if (is_null($tax_codes)) {
            throw new \InvalidArgumentException('non-nullable tax_codes cannot be null');
        }
        $this->container['tax_codes'] = $tax_codes;

        return $this;
    }

    /**
     * Gets minimum_commitment
     *
     * @return \Lago\LagoPhpClient\Model\MinimumCommitmentInput|null
     */
    public function getMinimumCommitment()
    {
        return $this->container['minimum_commitment'];
    }

    /**
     * Sets minimum_commitment
     *
     * @param \Lago\LagoPhpClient\Model\MinimumCommitmentInput|null $minimum_commitment minimum_commitment
     *
     * @return self
     */
    public function setMinimumCommitment($minimum_commitment)
    {
        if (is_null($minimum_commitment)) {
            throw new \InvalidArgumentException('non-nullable minimum_commitment cannot be null');
        }
        $this->container['minimum_commitment'] = $minimum_commitment;

        return $this;
    }

    /**
     * Gets charges
     *
     * @return \Lago\LagoPhpClient\Model\PlanUpdateInputPlanChargesInner[]|null
     */
    public function getCharges()
    {
        return $this->container['charges'];
    }

    /**
     * Sets charges
     *
     * @param \Lago\LagoPhpClient\Model\PlanUpdateInputPlanChargesInner[]|null $charges Additional usage-based charges for this plan.
     *
     * @return self
     */
    public function setCharges($charges)
    {
        if (is_null($charges)) {
            throw new \InvalidArgumentException('non-nullable charges cannot be null');
        }
        $this->container['charges'] = $charges;

        return $this;
    }

    /**
     * Gets usage_thresholds
     *
     * @return \Lago\LagoPhpClient\Model\UsageThresholdInput[]|null
     */
    public function getUsageThresholds()
    {
        return $this->container['usage_thresholds'];
    }

    /**
     * Sets usage_thresholds
     *
     * @param \Lago\LagoPhpClient\Model\UsageThresholdInput[]|null $usage_thresholds List of usage thresholds to apply to the plan.
     *
     * @return self
     */
    public function setUsageThresholds($usage_thresholds)
    {
        if (is_null($usage_thresholds)) {
            throw new \InvalidArgumentException('non-nullable usage_thresholds cannot be null');
        }
        $this->container['usage_thresholds'] = $usage_thresholds;

        return $this;
    }

    /**
     * Gets cascade_updates
     *
     * @return bool|null
     */
    public function getCascadeUpdates()
    {
        return $this->container['cascade_updates'];
    }

    /**
     * Sets cascade_updates
     *
     * @param bool|null $cascade_updates This field determines whether the changes made to the plan should be cascaded to the children plans. When set to `true`, the changes will be cascaded into children. Conversely, when set to `false`, the changes will only be applied to the plan itself. If not defined in the request, default value is `false`.
     *
     * @return self
     */
    public function setCascadeUpdates($cascade_updates)
    {
        if (is_null($cascade_updates)) {
            throw new \InvalidArgumentException('non-nullable cascade_updates cannot be null');
        }
        $this->container['cascade_updates'] = $cascade_updates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


