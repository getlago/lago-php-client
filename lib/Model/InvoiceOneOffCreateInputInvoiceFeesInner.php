<?php
/**
 * InvoiceOneOffCreateInputInvoiceFeesInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * InvoiceOneOffCreateInputInvoiceFeesInner Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceOneOffCreateInputInvoiceFeesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceOneOffCreateInput_invoice_fees_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'add_on_code' => 'string',
        'invoice_display_name' => 'string',
        'unit_amount_cents' => 'int',
        'units' => 'string',
        'description' => 'string',
        'tax_codes' => 'string[]',
        'skip_psp' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'add_on_code' => null,
        'invoice_display_name' => null,
        'unit_amount_cents' => null,
        'units' => null,
        'description' => null,
        'tax_codes' => null,
        'skip_psp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'add_on_code' => false,
        'invoice_display_name' => false,
        'unit_amount_cents' => true,
        'units' => true,
        'description' => true,
        'tax_codes' => false,
        'skip_psp' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'add_on_code' => 'add_on_code',
        'invoice_display_name' => 'invoice_display_name',
        'unit_amount_cents' => 'unit_amount_cents',
        'units' => 'units',
        'description' => 'description',
        'tax_codes' => 'tax_codes',
        'skip_psp' => 'skip_psp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'add_on_code' => 'setAddOnCode',
        'invoice_display_name' => 'setInvoiceDisplayName',
        'unit_amount_cents' => 'setUnitAmountCents',
        'units' => 'setUnits',
        'description' => 'setDescription',
        'tax_codes' => 'setTaxCodes',
        'skip_psp' => 'setSkipPsp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'add_on_code' => 'getAddOnCode',
        'invoice_display_name' => 'getInvoiceDisplayName',
        'unit_amount_cents' => 'getUnitAmountCents',
        'units' => 'getUnits',
        'description' => 'getDescription',
        'tax_codes' => 'getTaxCodes',
        'skip_psp' => 'getSkipPsp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('add_on_code', $data ?? [], null);
        $this->setIfExists('invoice_display_name', $data ?? [], null);
        $this->setIfExists('unit_amount_cents', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('tax_codes', $data ?? [], null);
        $this->setIfExists('skip_psp', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['add_on_code'] === null) {
            $invalidProperties[] = "'add_on_code' can't be null";
        }
        if (!is_null($this->container['units']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['units'])) {
            $invalidProperties[] = "invalid value for 'units', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets add_on_code
     *
     * @return string
     */
    public function getAddOnCode()
    {
        return $this->container['add_on_code'];
    }

    /**
     * Sets add_on_code
     *
     * @param string $add_on_code The code of the add-on used as invoice item.
     *
     * @return self
     */
    public function setAddOnCode($add_on_code)
    {
        if (is_null($add_on_code)) {
            throw new \InvalidArgumentException('non-nullable add_on_code cannot be null');
        }
        $this->container['add_on_code'] = $add_on_code;

        return $this;
    }

    /**
     * Gets invoice_display_name
     *
     * @return string|null
     */
    public function getInvoiceDisplayName()
    {
        return $this->container['invoice_display_name'];
    }

    /**
     * Sets invoice_display_name
     *
     * @param string|null $invoice_display_name Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
     *
     * @return self
     */
    public function setInvoiceDisplayName($invoice_display_name)
    {
        if (is_null($invoice_display_name)) {
            throw new \InvalidArgumentException('non-nullable invoice_display_name cannot be null');
        }
        $this->container['invoice_display_name'] = $invoice_display_name;

        return $this;
    }

    /**
     * Gets unit_amount_cents
     *
     * @return int|null
     */
    public function getUnitAmountCents()
    {
        return $this->container['unit_amount_cents'];
    }

    /**
     * Sets unit_amount_cents
     *
     * @param int|null $unit_amount_cents The amount of the fee per unit, expressed in cents. By default, the amount of the add-on is used.
     *
     * @return self
     */
    public function setUnitAmountCents($unit_amount_cents)
    {
        if (is_null($unit_amount_cents)) {
            array_push($this->openAPINullablesSetToNull, 'unit_amount_cents');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_amount_cents', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_amount_cents'] = $unit_amount_cents;

        return $this;
    }

    /**
     * Gets units
     *
     * @return string|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param string|null $units The quantity of units associated with the fee. By default, only 1 unit is added to the invoice.
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            array_push($this->openAPINullablesSetToNull, 'units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($units) && (!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($units)))) {
            throw new \InvalidArgumentException("invalid value for \$units when calling InvoiceOneOffCreateInputInvoiceFeesInner., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description This is a description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tax_codes
     *
     * @return string[]|null
     */
    public function getTaxCodes()
    {
        return $this->container['tax_codes'];
    }

    /**
     * Sets tax_codes
     *
     * @param string[]|null $tax_codes List of unique code used to identify the taxes.
     *
     * @return self
     */
    public function setTaxCodes($tax_codes)
    {
        if (is_null($tax_codes)) {
            throw new \InvalidArgumentException('non-nullable tax_codes cannot be null');
        }
        $this->container['tax_codes'] = $tax_codes;

        return $this;
    }

    /**
     * Gets skip_psp
     *
     * @return bool|null
     */
    public function getSkipPsp()
    {
        return $this->container['skip_psp'];
    }

    /**
     * Sets skip_psp
     *
     * @param bool|null $skip_psp If true, the invoice will be created but not sent to the payment provider.
     *
     * @return self
     */
    public function setSkipPsp($skip_psp)
    {
        if (is_null($skip_psp)) {
            array_push($this->openAPINullablesSetToNull, 'skip_psp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skip_psp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skip_psp'] = $skip_psp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


