<?php
/**
 * CreditNoteEstimatedEstimatedCreditNote
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * CreditNoteEstimatedEstimatedCreditNote Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreditNoteEstimatedEstimatedCreditNote implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditNoteEstimated_estimated_credit_note';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lago_invoice_id' => 'string',
        'invoice_number' => 'string',
        'currency' => '\Lago\LagoPhpClient\Model\Currency',
        'taxes_amount_cents' => 'int',
        'precise_taxes_amount_cents' => 'float',
        'taxes_rate' => 'float',
        'sub_total_excluding_taxes_amount_cents' => 'int',
        'max_creditable_amount_cents' => 'int',
        'max_refundable_amount_cents' => 'int',
        'coupons_adjustment_amount_cents' => 'int',
        'precise_coupons_adjustment_amount_cents' => 'float',
        'items' => '\Lago\LagoPhpClient\Model\CreditNoteEstimatedEstimatedCreditNoteItemsInner[]',
        'applied_taxes' => '\Lago\LagoPhpClient\Model\CreditNoteEstimatedEstimatedCreditNoteAppliedTaxesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lago_invoice_id' => 'uuid',
        'invoice_number' => null,
        'currency' => null,
        'taxes_amount_cents' => null,
        'precise_taxes_amount_cents' => null,
        'taxes_rate' => null,
        'sub_total_excluding_taxes_amount_cents' => null,
        'max_creditable_amount_cents' => null,
        'max_refundable_amount_cents' => null,
        'coupons_adjustment_amount_cents' => null,
        'precise_coupons_adjustment_amount_cents' => null,
        'items' => null,
        'applied_taxes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lago_invoice_id' => false,
        'invoice_number' => false,
        'currency' => false,
        'taxes_amount_cents' => false,
        'precise_taxes_amount_cents' => false,
        'taxes_rate' => false,
        'sub_total_excluding_taxes_amount_cents' => false,
        'max_creditable_amount_cents' => false,
        'max_refundable_amount_cents' => false,
        'coupons_adjustment_amount_cents' => false,
        'precise_coupons_adjustment_amount_cents' => false,
        'items' => false,
        'applied_taxes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lago_invoice_id' => 'lago_invoice_id',
        'invoice_number' => 'invoice_number',
        'currency' => 'currency',
        'taxes_amount_cents' => 'taxes_amount_cents',
        'precise_taxes_amount_cents' => 'precise_taxes_amount_cents',
        'taxes_rate' => 'taxes_rate',
        'sub_total_excluding_taxes_amount_cents' => 'sub_total_excluding_taxes_amount_cents',
        'max_creditable_amount_cents' => 'max_creditable_amount_cents',
        'max_refundable_amount_cents' => 'max_refundable_amount_cents',
        'coupons_adjustment_amount_cents' => 'coupons_adjustment_amount_cents',
        'precise_coupons_adjustment_amount_cents' => 'precise_coupons_adjustment_amount_cents',
        'items' => 'items',
        'applied_taxes' => 'applied_taxes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lago_invoice_id' => 'setLagoInvoiceId',
        'invoice_number' => 'setInvoiceNumber',
        'currency' => 'setCurrency',
        'taxes_amount_cents' => 'setTaxesAmountCents',
        'precise_taxes_amount_cents' => 'setPreciseTaxesAmountCents',
        'taxes_rate' => 'setTaxesRate',
        'sub_total_excluding_taxes_amount_cents' => 'setSubTotalExcludingTaxesAmountCents',
        'max_creditable_amount_cents' => 'setMaxCreditableAmountCents',
        'max_refundable_amount_cents' => 'setMaxRefundableAmountCents',
        'coupons_adjustment_amount_cents' => 'setCouponsAdjustmentAmountCents',
        'precise_coupons_adjustment_amount_cents' => 'setPreciseCouponsAdjustmentAmountCents',
        'items' => 'setItems',
        'applied_taxes' => 'setAppliedTaxes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lago_invoice_id' => 'getLagoInvoiceId',
        'invoice_number' => 'getInvoiceNumber',
        'currency' => 'getCurrency',
        'taxes_amount_cents' => 'getTaxesAmountCents',
        'precise_taxes_amount_cents' => 'getPreciseTaxesAmountCents',
        'taxes_rate' => 'getTaxesRate',
        'sub_total_excluding_taxes_amount_cents' => 'getSubTotalExcludingTaxesAmountCents',
        'max_creditable_amount_cents' => 'getMaxCreditableAmountCents',
        'max_refundable_amount_cents' => 'getMaxRefundableAmountCents',
        'coupons_adjustment_amount_cents' => 'getCouponsAdjustmentAmountCents',
        'precise_coupons_adjustment_amount_cents' => 'getPreciseCouponsAdjustmentAmountCents',
        'items' => 'getItems',
        'applied_taxes' => 'getAppliedTaxes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('lago_invoice_id', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('taxes_amount_cents', $data ?? [], null);
        $this->setIfExists('precise_taxes_amount_cents', $data ?? [], null);
        $this->setIfExists('taxes_rate', $data ?? [], null);
        $this->setIfExists('sub_total_excluding_taxes_amount_cents', $data ?? [], null);
        $this->setIfExists('max_creditable_amount_cents', $data ?? [], null);
        $this->setIfExists('max_refundable_amount_cents', $data ?? [], null);
        $this->setIfExists('coupons_adjustment_amount_cents', $data ?? [], null);
        $this->setIfExists('precise_coupons_adjustment_amount_cents', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('applied_taxes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lago_invoice_id'] === null) {
            $invalidProperties[] = "'lago_invoice_id' can't be null";
        }
        if ($this->container['invoice_number'] === null) {
            $invalidProperties[] = "'invoice_number' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['taxes_amount_cents'] === null) {
            $invalidProperties[] = "'taxes_amount_cents' can't be null";
        }
        if ($this->container['precise_taxes_amount_cents'] === null) {
            $invalidProperties[] = "'precise_taxes_amount_cents' can't be null";
        }
        if ($this->container['taxes_rate'] === null) {
            $invalidProperties[] = "'taxes_rate' can't be null";
        }
        if ($this->container['sub_total_excluding_taxes_amount_cents'] === null) {
            $invalidProperties[] = "'sub_total_excluding_taxes_amount_cents' can't be null";
        }
        if ($this->container['max_creditable_amount_cents'] === null) {
            $invalidProperties[] = "'max_creditable_amount_cents' can't be null";
        }
        if ($this->container['max_refundable_amount_cents'] === null) {
            $invalidProperties[] = "'max_refundable_amount_cents' can't be null";
        }
        if ($this->container['coupons_adjustment_amount_cents'] === null) {
            $invalidProperties[] = "'coupons_adjustment_amount_cents' can't be null";
        }
        if ($this->container['precise_coupons_adjustment_amount_cents'] === null) {
            $invalidProperties[] = "'precise_coupons_adjustment_amount_cents' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lago_invoice_id
     *
     * @return string
     */
    public function getLagoInvoiceId()
    {
        return $this->container['lago_invoice_id'];
    }

    /**
     * Sets lago_invoice_id
     *
     * @param string $lago_invoice_id Unique identifier assigned to the invoice that the credit note belongs to
     *
     * @return self
     */
    public function setLagoInvoiceId($lago_invoice_id)
    {
        if (is_null($lago_invoice_id)) {
            throw new \InvalidArgumentException('non-nullable lago_invoice_id cannot be null');
        }
        $this->container['lago_invoice_id'] = $lago_invoice_id;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number The invoice unique number, related to the credit note.
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Lago\LagoPhpClient\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Lago\LagoPhpClient\Model\Currency $currency The currency of the credit note.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets taxes_amount_cents
     *
     * @return int
     */
    public function getTaxesAmountCents()
    {
        return $this->container['taxes_amount_cents'];
    }

    /**
     * Sets taxes_amount_cents
     *
     * @param int $taxes_amount_cents The tax amount of the credit note, expressed in cents.
     *
     * @return self
     */
    public function setTaxesAmountCents($taxes_amount_cents)
    {
        if (is_null($taxes_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable taxes_amount_cents cannot be null');
        }
        $this->container['taxes_amount_cents'] = $taxes_amount_cents;

        return $this;
    }

    /**
     * Gets precise_taxes_amount_cents
     *
     * @return float
     */
    public function getPreciseTaxesAmountCents()
    {
        return $this->container['precise_taxes_amount_cents'];
    }

    /**
     * Sets precise_taxes_amount_cents
     *
     * @param float $precise_taxes_amount_cents The precise tax amount of the credit note, expressed in cents with decimal precision.
     *
     * @return self
     */
    public function setPreciseTaxesAmountCents($precise_taxes_amount_cents)
    {
        if (is_null($precise_taxes_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable precise_taxes_amount_cents cannot be null');
        }
        $this->container['precise_taxes_amount_cents'] = $precise_taxes_amount_cents;

        return $this;
    }

    /**
     * Gets taxes_rate
     *
     * @return float
     */
    public function getTaxesRate()
    {
        return $this->container['taxes_rate'];
    }

    /**
     * Sets taxes_rate
     *
     * @param float $taxes_rate The tax rate associated with this specific credit note.
     *
     * @return self
     */
    public function setTaxesRate($taxes_rate)
    {
        if (is_null($taxes_rate)) {
            throw new \InvalidArgumentException('non-nullable taxes_rate cannot be null');
        }
        $this->container['taxes_rate'] = $taxes_rate;

        return $this;
    }

    /**
     * Gets sub_total_excluding_taxes_amount_cents
     *
     * @return int
     */
    public function getSubTotalExcludingTaxesAmountCents()
    {
        return $this->container['sub_total_excluding_taxes_amount_cents'];
    }

    /**
     * Sets sub_total_excluding_taxes_amount_cents
     *
     * @param int $sub_total_excluding_taxes_amount_cents The subtotal of the credit note excluding any applicable taxes, expressed in cents.
     *
     * @return self
     */
    public function setSubTotalExcludingTaxesAmountCents($sub_total_excluding_taxes_amount_cents)
    {
        if (is_null($sub_total_excluding_taxes_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable sub_total_excluding_taxes_amount_cents cannot be null');
        }
        $this->container['sub_total_excluding_taxes_amount_cents'] = $sub_total_excluding_taxes_amount_cents;

        return $this;
    }

    /**
     * Gets max_creditable_amount_cents
     *
     * @return int
     */
    public function getMaxCreditableAmountCents()
    {
        return $this->container['max_creditable_amount_cents'];
    }

    /**
     * Sets max_creditable_amount_cents
     *
     * @param int $max_creditable_amount_cents The credited amount of the credit note, expressed in cents.
     *
     * @return self
     */
    public function setMaxCreditableAmountCents($max_creditable_amount_cents)
    {
        if (is_null($max_creditable_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable max_creditable_amount_cents cannot be null');
        }
        $this->container['max_creditable_amount_cents'] = $max_creditable_amount_cents;

        return $this;
    }

    /**
     * Gets max_refundable_amount_cents
     *
     * @return int
     */
    public function getMaxRefundableAmountCents()
    {
        return $this->container['max_refundable_amount_cents'];
    }

    /**
     * Sets max_refundable_amount_cents
     *
     * @param int $max_refundable_amount_cents The refunded amount of the credit note, expressed in cents.
     *
     * @return self
     */
    public function setMaxRefundableAmountCents($max_refundable_amount_cents)
    {
        if (is_null($max_refundable_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable max_refundable_amount_cents cannot be null');
        }
        $this->container['max_refundable_amount_cents'] = $max_refundable_amount_cents;

        return $this;
    }

    /**
     * Gets coupons_adjustment_amount_cents
     *
     * @return int
     */
    public function getCouponsAdjustmentAmountCents()
    {
        return $this->container['coupons_adjustment_amount_cents'];
    }

    /**
     * Sets coupons_adjustment_amount_cents
     *
     * @param int $coupons_adjustment_amount_cents The pro-rated amount of the coupons applied to the source invoice.
     *
     * @return self
     */
    public function setCouponsAdjustmentAmountCents($coupons_adjustment_amount_cents)
    {
        if (is_null($coupons_adjustment_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable coupons_adjustment_amount_cents cannot be null');
        }
        $this->container['coupons_adjustment_amount_cents'] = $coupons_adjustment_amount_cents;

        return $this;
    }

    /**
     * Gets precise_coupons_adjustment_amount_cents
     *
     * @return float
     */
    public function getPreciseCouponsAdjustmentAmountCents()
    {
        return $this->container['precise_coupons_adjustment_amount_cents'];
    }

    /**
     * Sets precise_coupons_adjustment_amount_cents
     *
     * @param float $precise_coupons_adjustment_amount_cents The precise pro-rated amount with decimal precision of the coupons applied to the source invoice.
     *
     * @return self
     */
    public function setPreciseCouponsAdjustmentAmountCents($precise_coupons_adjustment_amount_cents)
    {
        if (is_null($precise_coupons_adjustment_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable precise_coupons_adjustment_amount_cents cannot be null');
        }
        $this->container['precise_coupons_adjustment_amount_cents'] = $precise_coupons_adjustment_amount_cents;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Lago\LagoPhpClient\Model\CreditNoteEstimatedEstimatedCreditNoteItemsInner[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Lago\LagoPhpClient\Model\CreditNoteEstimatedEstimatedCreditNoteItemsInner[] $items Array of credit note's items.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets applied_taxes
     *
     * @return \Lago\LagoPhpClient\Model\CreditNoteEstimatedEstimatedCreditNoteAppliedTaxesInner[]|null
     */
    public function getAppliedTaxes()
    {
        return $this->container['applied_taxes'];
    }

    /**
     * Sets applied_taxes
     *
     * @param \Lago\LagoPhpClient\Model\CreditNoteEstimatedEstimatedCreditNoteAppliedTaxesInner[]|null $applied_taxes applied_taxes
     *
     * @return self
     */
    public function setAppliedTaxes($applied_taxes)
    {
        if (is_null($applied_taxes)) {
            throw new \InvalidArgumentException('non-nullable applied_taxes cannot be null');
        }
        $this->container['applied_taxes'] = $applied_taxes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


