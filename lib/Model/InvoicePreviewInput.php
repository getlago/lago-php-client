<?php
/**
 * InvoicePreviewInput
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * InvoicePreviewInput Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoicePreviewInput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoicePreviewInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer' => '\Lago\LagoPhpClient\Model\InvoicePreviewInputCustomer',
        'plan_code' => 'string',
        'subscription_at' => '\DateTime',
        'billing_time' => 'string',
        'coupons' => '\Lago\LagoPhpClient\Model\InvoicePreviewInputCouponsInner[]',
        'subscriptions' => '\Lago\LagoPhpClient\Model\InvoicePreviewInputSubscriptions',
        'billing_entity_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer' => null,
        'plan_code' => null,
        'subscription_at' => 'date-time',
        'billing_time' => null,
        'coupons' => null,
        'subscriptions' => null,
        'billing_entity_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customer' => false,
        'plan_code' => false,
        'subscription_at' => false,
        'billing_time' => false,
        'coupons' => false,
        'subscriptions' => false,
        'billing_entity_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer' => 'customer',
        'plan_code' => 'plan_code',
        'subscription_at' => 'subscription_at',
        'billing_time' => 'billing_time',
        'coupons' => 'coupons',
        'subscriptions' => 'subscriptions',
        'billing_entity_code' => 'billing_entity_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer' => 'setCustomer',
        'plan_code' => 'setPlanCode',
        'subscription_at' => 'setSubscriptionAt',
        'billing_time' => 'setBillingTime',
        'coupons' => 'setCoupons',
        'subscriptions' => 'setSubscriptions',
        'billing_entity_code' => 'setBillingEntityCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer' => 'getCustomer',
        'plan_code' => 'getPlanCode',
        'subscription_at' => 'getSubscriptionAt',
        'billing_time' => 'getBillingTime',
        'coupons' => 'getCoupons',
        'subscriptions' => 'getSubscriptions',
        'billing_entity_code' => 'getBillingEntityCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BILLING_TIME_CALENDAR = 'calendar';
    public const BILLING_TIME_ANNIVERSARY = 'anniversary';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingTimeAllowableValues()
    {
        return [
            self::BILLING_TIME_CALENDAR,
            self::BILLING_TIME_ANNIVERSARY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('plan_code', $data ?? [], null);
        $this->setIfExists('subscription_at', $data ?? [], null);
        $this->setIfExists('billing_time', $data ?? [], null);
        $this->setIfExists('coupons', $data ?? [], null);
        $this->setIfExists('subscriptions', $data ?? [], null);
        $this->setIfExists('billing_entity_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        $allowedValues = $this->getBillingTimeAllowableValues();
        if (!is_null($this->container['billing_time']) && !in_array($this->container['billing_time'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'billing_time', must be one of '%s'",
                $this->container['billing_time'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer
     *
     * @return \Lago\LagoPhpClient\Model\InvoicePreviewInputCustomer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Lago\LagoPhpClient\Model\InvoicePreviewInputCustomer $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets plan_code
     *
     * @return string|null
     */
    public function getPlanCode()
    {
        return $this->container['plan_code'];
    }

    /**
     * Sets plan_code
     *
     * @param string|null $plan_code The code of the plan. It serves as a unique identifier associated with a particular plan. The code is typically used for internal or system-level identification purposes, like assigning a subscription, for instance.
     *
     * @return self
     */
    public function setPlanCode($plan_code)
    {
        if (is_null($plan_code)) {
            throw new \InvalidArgumentException('non-nullable plan_code cannot be null');
        }
        $this->container['plan_code'] = $plan_code;

        return $this;
    }

    /**
     * Gets subscription_at
     *
     * @return \DateTime|null
     */
    public function getSubscriptionAt()
    {
        return $this->container['subscription_at'];
    }

    /**
     * Sets subscription_at
     *
     * @param \DateTime|null $subscription_at The anniversary date and time of the initial subscription. This date serves as the basis for billing subscriptions with `anniversary` billing time. The `anniversary_date` should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
     *
     * @return self
     */
    public function setSubscriptionAt($subscription_at)
    {
        if (is_null($subscription_at)) {
            throw new \InvalidArgumentException('non-nullable subscription_at cannot be null');
        }
        $this->container['subscription_at'] = $subscription_at;

        return $this;
    }

    /**
     * Gets billing_time
     *
     * @return string|null
     */
    public function getBillingTime()
    {
        return $this->container['billing_time'];
    }

    /**
     * Sets billing_time
     *
     * @param string|null $billing_time The billing time for the subscription, which can be set as either `anniversary` or `calendar`. If not explicitly provided, it will default to `calendar`. The billing time determines the timing of recurring billing cycles for the subscription. By specifying `anniversary`, the billing cycle will be based on the specific date the subscription started (billed fully), while `calendar` sets the billing cycle at the first day of the week/month/year (billed with proration).
     *
     * @return self
     */
    public function setBillingTime($billing_time)
    {
        if (is_null($billing_time)) {
            throw new \InvalidArgumentException('non-nullable billing_time cannot be null');
        }
        $allowedValues = $this->getBillingTimeAllowableValues();
        if (!in_array($billing_time, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'billing_time', must be one of '%s'",
                    $billing_time,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing_time'] = $billing_time;

        return $this;
    }

    /**
     * Gets coupons
     *
     * @return \Lago\LagoPhpClient\Model\InvoicePreviewInputCouponsInner[]|null
     */
    public function getCoupons()
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     *
     * @param \Lago\LagoPhpClient\Model\InvoicePreviewInputCouponsInner[]|null $coupons coupons
     *
     * @return self
     */
    public function setCoupons($coupons)
    {
        if (is_null($coupons)) {
            throw new \InvalidArgumentException('non-nullable coupons cannot be null');
        }
        $this->container['coupons'] = $coupons;

        return $this;
    }

    /**
     * Gets subscriptions
     *
     * @return \Lago\LagoPhpClient\Model\InvoicePreviewInputSubscriptions|null
     */
    public function getSubscriptions()
    {
        return $this->container['subscriptions'];
    }

    /**
     * Sets subscriptions
     *
     * @param \Lago\LagoPhpClient\Model\InvoicePreviewInputSubscriptions|null $subscriptions subscriptions
     *
     * @return self
     */
    public function setSubscriptions($subscriptions)
    {
        if (is_null($subscriptions)) {
            throw new \InvalidArgumentException('non-nullable subscriptions cannot be null');
        }
        $this->container['subscriptions'] = $subscriptions;

        return $this;
    }

    /**
     * Gets billing_entity_code
     *
     * @return string|null
     */
    public function getBillingEntityCode()
    {
        return $this->container['billing_entity_code'];
    }

    /**
     * Sets billing_entity_code
     *
     * @param string|null $billing_entity_code The code of the billing entity to which will be associated a customer if the external_id is not provided. If billing_entity_code is not provided, default billing_entity of organization will be used.
     *
     * @return self
     */
    public function setBillingEntityCode($billing_entity_code)
    {
        if (is_null($billing_entity_code)) {
            throw new \InvalidArgumentException('non-nullable billing_entity_code cannot be null');
        }
        $this->container['billing_entity_code'] = $billing_entity_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


