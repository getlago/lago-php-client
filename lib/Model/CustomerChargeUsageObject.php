<?php
/**
 * CustomerChargeUsageObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * CustomerChargeUsageObject Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerChargeUsageObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerChargeUsageObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'units' => 'string',
        'events_count' => 'int',
        'amount_cents' => 'int',
        'amount_currency' => '\Lago\LagoPhpClient\Model\Currency',
        'charge' => '\Lago\LagoPhpClient\Model\CustomerChargeUsageObjectCharge',
        'billable_metric' => '\Lago\LagoPhpClient\Model\CustomerChargeUsageObjectBillableMetric',
        'filters' => '\Lago\LagoPhpClient\Model\CustomerChargeFiltersUsageObjectInner[]',
        'grouped_usage' => '\Lago\LagoPhpClient\Model\CustomerChargeGroupedUsageObjectInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'units' => null,
        'events_count' => null,
        'amount_cents' => null,
        'amount_currency' => null,
        'charge' => null,
        'billable_metric' => null,
        'filters' => null,
        'grouped_usage' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'units' => false,
        'events_count' => false,
        'amount_cents' => false,
        'amount_currency' => false,
        'charge' => false,
        'billable_metric' => false,
        'filters' => false,
        'grouped_usage' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'units' => 'units',
        'events_count' => 'events_count',
        'amount_cents' => 'amount_cents',
        'amount_currency' => 'amount_currency',
        'charge' => 'charge',
        'billable_metric' => 'billable_metric',
        'filters' => 'filters',
        'grouped_usage' => 'grouped_usage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'units' => 'setUnits',
        'events_count' => 'setEventsCount',
        'amount_cents' => 'setAmountCents',
        'amount_currency' => 'setAmountCurrency',
        'charge' => 'setCharge',
        'billable_metric' => 'setBillableMetric',
        'filters' => 'setFilters',
        'grouped_usage' => 'setGroupedUsage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'units' => 'getUnits',
        'events_count' => 'getEventsCount',
        'amount_cents' => 'getAmountCents',
        'amount_currency' => 'getAmountCurrency',
        'charge' => 'getCharge',
        'billable_metric' => 'getBillableMetric',
        'filters' => 'getFilters',
        'grouped_usage' => 'getGroupedUsage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('events_count', $data ?? [], null);
        $this->setIfExists('amount_cents', $data ?? [], null);
        $this->setIfExists('amount_currency', $data ?? [], null);
        $this->setIfExists('charge', $data ?? [], null);
        $this->setIfExists('billable_metric', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
        $this->setIfExists('grouped_usage', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['units'] === null) {
            $invalidProperties[] = "'units' can't be null";
        }
        if (!preg_match("/^[0-9]+.?[0-9]*$/", $this->container['units'])) {
            $invalidProperties[] = "invalid value for 'units', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        if ($this->container['events_count'] === null) {
            $invalidProperties[] = "'events_count' can't be null";
        }
        if ($this->container['amount_cents'] === null) {
            $invalidProperties[] = "'amount_cents' can't be null";
        }
        if ($this->container['amount_currency'] === null) {
            $invalidProperties[] = "'amount_currency' can't be null";
        }
        if ($this->container['charge'] === null) {
            $invalidProperties[] = "'charge' can't be null";
        }
        if ($this->container['billable_metric'] === null) {
            $invalidProperties[] = "'billable_metric' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets units
     *
     * @return string
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param string $units The number of units consumed by the customer for a specific charge item.
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }

        if ((!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($units)))) {
            throw new \InvalidArgumentException("invalid value for \$units when calling CustomerChargeUsageObject., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets events_count
     *
     * @return int
     */
    public function getEventsCount()
    {
        return $this->container['events_count'];
    }

    /**
     * Sets events_count
     *
     * @param int $events_count The quantity of usage events that have been recorded for a particular charge during the specified time period. These events may also be referred to as the number of transactions in some contexts.
     *
     * @return self
     */
    public function setEventsCount($events_count)
    {
        if (is_null($events_count)) {
            throw new \InvalidArgumentException('non-nullable events_count cannot be null');
        }
        $this->container['events_count'] = $events_count;

        return $this;
    }

    /**
     * Gets amount_cents
     *
     * @return int
     */
    public function getAmountCents()
    {
        return $this->container['amount_cents'];
    }

    /**
     * Sets amount_cents
     *
     * @param int $amount_cents The amount in cents, tax excluded, consumed by the customer for a specific charge item.
     *
     * @return self
     */
    public function setAmountCents($amount_cents)
    {
        if (is_null($amount_cents)) {
            throw new \InvalidArgumentException('non-nullable amount_cents cannot be null');
        }
        $this->container['amount_cents'] = $amount_cents;

        return $this;
    }

    /**
     * Gets amount_currency
     *
     * @return \Lago\LagoPhpClient\Model\Currency
     */
    public function getAmountCurrency()
    {
        return $this->container['amount_currency'];
    }

    /**
     * Sets amount_currency
     *
     * @param \Lago\LagoPhpClient\Model\Currency $amount_currency The currency of a usage item consumed by the customer.
     *
     * @return self
     */
    public function setAmountCurrency($amount_currency)
    {
        if (is_null($amount_currency)) {
            throw new \InvalidArgumentException('non-nullable amount_currency cannot be null');
        }
        $this->container['amount_currency'] = $amount_currency;

        return $this;
    }

    /**
     * Gets charge
     *
     * @return \Lago\LagoPhpClient\Model\CustomerChargeUsageObjectCharge
     */
    public function getCharge()
    {
        return $this->container['charge'];
    }

    /**
     * Sets charge
     *
     * @param \Lago\LagoPhpClient\Model\CustomerChargeUsageObjectCharge $charge charge
     *
     * @return self
     */
    public function setCharge($charge)
    {
        if (is_null($charge)) {
            throw new \InvalidArgumentException('non-nullable charge cannot be null');
        }
        $this->container['charge'] = $charge;

        return $this;
    }

    /**
     * Gets billable_metric
     *
     * @return \Lago\LagoPhpClient\Model\CustomerChargeUsageObjectBillableMetric
     */
    public function getBillableMetric()
    {
        return $this->container['billable_metric'];
    }

    /**
     * Sets billable_metric
     *
     * @param \Lago\LagoPhpClient\Model\CustomerChargeUsageObjectBillableMetric $billable_metric billable_metric
     *
     * @return self
     */
    public function setBillableMetric($billable_metric)
    {
        if (is_null($billable_metric)) {
            throw new \InvalidArgumentException('non-nullable billable_metric cannot be null');
        }
        $this->container['billable_metric'] = $billable_metric;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Lago\LagoPhpClient\Model\CustomerChargeFiltersUsageObjectInner[]|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Lago\LagoPhpClient\Model\CustomerChargeFiltersUsageObjectInner[]|null $filters Array of filter object, representing multiple dimensions for a charge item.
     *
     * @return self
     */
    public function setFilters($filters)
    {
        if (is_null($filters)) {
            throw new \InvalidArgumentException('non-nullable filters cannot be null');
        }
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets grouped_usage
     *
     * @return \Lago\LagoPhpClient\Model\CustomerChargeGroupedUsageObjectInner[]|null
     */
    public function getGroupedUsage()
    {
        return $this->container['grouped_usage'];
    }

    /**
     * Sets grouped_usage
     *
     * @param \Lago\LagoPhpClient\Model\CustomerChargeGroupedUsageObjectInner[]|null $grouped_usage Array of aggregated fees, grouped by the event properties defined in a `standard` charge model.
     *
     * @return self
     */
    public function setGroupedUsage($grouped_usage)
    {
        if (is_null($grouped_usage)) {
            throw new \InvalidArgumentException('non-nullable grouped_usage cannot be null');
        }
        $this->container['grouped_usage'] = $grouped_usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


