<?php
/**
 * ActivityLogObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * ActivityLogObject Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActivityLogObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ActivityLogObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activity_id' => 'string',
        'user_email' => 'string',
        'activity_type' => 'string',
        'activity_source' => 'string',
        'activity_object' => 'object',
        'activity_object_changes' => 'object',
        'external_customer_id' => 'string',
        'external_subscription_id' => 'string',
        'resource_id' => 'string',
        'resource_type' => 'string',
        'organization_id' => 'string',
        'logged_at' => '\DateTime',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activity_id' => 'uuid',
        'user_email' => 'email',
        'activity_type' => null,
        'activity_source' => null,
        'activity_object' => 'object',
        'activity_object_changes' => 'object',
        'external_customer_id' => null,
        'external_subscription_id' => null,
        'resource_id' => 'uuid',
        'resource_type' => null,
        'organization_id' => 'uuid',
        'logged_at' => 'date-time',
        'created_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'activity_id' => false,
        'user_email' => true,
        'activity_type' => false,
        'activity_source' => false,
        'activity_object' => true,
        'activity_object_changes' => true,
        'external_customer_id' => true,
        'external_subscription_id' => true,
        'resource_id' => false,
        'resource_type' => false,
        'organization_id' => false,
        'logged_at' => false,
        'created_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activity_id' => 'activity_id',
        'user_email' => 'user_email',
        'activity_type' => 'activity_type',
        'activity_source' => 'activity_source',
        'activity_object' => 'activity_object',
        'activity_object_changes' => 'activity_object_changes',
        'external_customer_id' => 'external_customer_id',
        'external_subscription_id' => 'external_subscription_id',
        'resource_id' => 'resource_id',
        'resource_type' => 'resource_type',
        'organization_id' => 'organization_id',
        'logged_at' => 'logged_at',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activity_id' => 'setActivityId',
        'user_email' => 'setUserEmail',
        'activity_type' => 'setActivityType',
        'activity_source' => 'setActivitySource',
        'activity_object' => 'setActivityObject',
        'activity_object_changes' => 'setActivityObjectChanges',
        'external_customer_id' => 'setExternalCustomerId',
        'external_subscription_id' => 'setExternalSubscriptionId',
        'resource_id' => 'setResourceId',
        'resource_type' => 'setResourceType',
        'organization_id' => 'setOrganizationId',
        'logged_at' => 'setLoggedAt',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activity_id' => 'getActivityId',
        'user_email' => 'getUserEmail',
        'activity_type' => 'getActivityType',
        'activity_source' => 'getActivitySource',
        'activity_object' => 'getActivityObject',
        'activity_object_changes' => 'getActivityObjectChanges',
        'external_customer_id' => 'getExternalCustomerId',
        'external_subscription_id' => 'getExternalSubscriptionId',
        'resource_id' => 'getResourceId',
        'resource_type' => 'getResourceType',
        'organization_id' => 'getOrganizationId',
        'logged_at' => 'getLoggedAt',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACTIVITY_SOURCE_API = 'api';
    public const ACTIVITY_SOURCE_FRONT = 'front';
    public const ACTIVITY_SOURCE_SYSTEM = 'system';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivitySourceAllowableValues()
    {
        return [
            self::ACTIVITY_SOURCE_API,
            self::ACTIVITY_SOURCE_FRONT,
            self::ACTIVITY_SOURCE_SYSTEM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('activity_id', $data ?? [], null);
        $this->setIfExists('user_email', $data ?? [], null);
        $this->setIfExists('activity_type', $data ?? [], null);
        $this->setIfExists('activity_source', $data ?? [], null);
        $this->setIfExists('activity_object', $data ?? [], null);
        $this->setIfExists('activity_object_changes', $data ?? [], null);
        $this->setIfExists('external_customer_id', $data ?? [], null);
        $this->setIfExists('external_subscription_id', $data ?? [], null);
        $this->setIfExists('resource_id', $data ?? [], null);
        $this->setIfExists('resource_type', $data ?? [], null);
        $this->setIfExists('organization_id', $data ?? [], null);
        $this->setIfExists('logged_at', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['activity_id'] === null) {
            $invalidProperties[] = "'activity_id' can't be null";
        }
        if ($this->container['activity_type'] === null) {
            $invalidProperties[] = "'activity_type' can't be null";
        }
        if ($this->container['activity_source'] === null) {
            $invalidProperties[] = "'activity_source' can't be null";
        }
        $allowedValues = $this->getActivitySourceAllowableValues();
        if (!is_null($this->container['activity_source']) && !in_array($this->container['activity_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'activity_source', must be one of '%s'",
                $this->container['activity_source'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['resource_id'] === null) {
            $invalidProperties[] = "'resource_id' can't be null";
        }
        if ($this->container['resource_type'] === null) {
            $invalidProperties[] = "'resource_type' can't be null";
        }
        if ($this->container['organization_id'] === null) {
            $invalidProperties[] = "'organization_id' can't be null";
        }
        if ($this->container['logged_at'] === null) {
            $invalidProperties[] = "'logged_at' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activity_id
     *
     * @return string
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     *
     * @param string $activity_id Unique identifier assigned to the activity log within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the activity log record within the Lago system
     *
     * @return self
     */
    public function setActivityId($activity_id)
    {
        if (is_null($activity_id)) {
            throw new \InvalidArgumentException('non-nullable activity_id cannot be null');
        }
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets user_email
     *
     * @return string|null
     */
    public function getUserEmail()
    {
        return $this->container['user_email'];
    }

    /**
     * Sets user_email
     *
     * @param string|null $user_email The email of the user who performed the activity
     *
     * @return self
     */
    public function setUserEmail($user_email)
    {
        if (is_null($user_email)) {
            array_push($this->openAPINullablesSetToNull, 'user_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_email'] = $user_email;

        return $this;
    }

    /**
     * Gets activity_type
     *
     * @return string
     */
    public function getActivityType()
    {
        return $this->container['activity_type'];
    }

    /**
     * Sets activity_type
     *
     * @param string $activity_type This field stores the actitivy action that was performed to the activity_object.
     *
     * @return self
     */
    public function setActivityType($activity_type)
    {
        if (is_null($activity_type)) {
            throw new \InvalidArgumentException('non-nullable activity_type cannot be null');
        }
        $this->container['activity_type'] = $activity_type;

        return $this;
    }

    /**
     * Gets activity_source
     *
     * @return string
     */
    public function getActivitySource()
    {
        return $this->container['activity_source'];
    }

    /**
     * Sets activity_source
     *
     * @param string $activity_source This field represents the source of the activity log, the interaction source that triggered the action.
     *
     * @return self
     */
    public function setActivitySource($activity_source)
    {
        if (is_null($activity_source)) {
            throw new \InvalidArgumentException('non-nullable activity_source cannot be null');
        }
        $allowedValues = $this->getActivitySourceAllowableValues();
        if (!in_array($activity_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'activity_source', must be one of '%s'",
                    $activity_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['activity_source'] = $activity_source;

        return $this;
    }

    /**
     * Gets activity_object
     *
     * @return object|null
     */
    public function getActivityObject()
    {
        return $this->container['activity_object'];
    }

    /**
     * Sets activity_object
     *
     * @param object|null $activity_object This field represents the final state of the object that the action was applied.
     *
     * @return self
     */
    public function setActivityObject($activity_object)
    {
        if (is_null($activity_object)) {
            array_push($this->openAPINullablesSetToNull, 'activity_object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_object'] = $activity_object;

        return $this;
    }

    /**
     * Gets activity_object_changes
     *
     * @return object|null
     */
    public function getActivityObjectChanges()
    {
        return $this->container['activity_object_changes'];
    }

    /**
     * Sets activity_object_changes
     *
     * @param object|null $activity_object_changes activity_object_changes
     *
     * @return self
     */
    public function setActivityObjectChanges($activity_object_changes)
    {
        if (is_null($activity_object_changes)) {
            array_push($this->openAPINullablesSetToNull, 'activity_object_changes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_object_changes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_object_changes'] = $activity_object_changes;

        return $this;
    }

    /**
     * Gets external_customer_id
     *
     * @return string|null
     */
    public function getExternalCustomerId()
    {
        return $this->container['external_customer_id'];
    }

    /**
     * Sets external_customer_id
     *
     * @param string|null $external_customer_id The customer external unique identifier (provided by your own application)
     *
     * @return self
     */
    public function setExternalCustomerId($external_customer_id)
    {
        if (is_null($external_customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_customer_id'] = $external_customer_id;

        return $this;
    }

    /**
     * Gets external_subscription_id
     *
     * @return string|null
     */
    public function getExternalSubscriptionId()
    {
        return $this->container['external_subscription_id'];
    }

    /**
     * Sets external_subscription_id
     *
     * @param string|null $external_subscription_id Unique identifier assigned to the subscription in your application.
     *
     * @return self
     */
    public function setExternalSubscriptionId($external_subscription_id)
    {
        if (is_null($external_subscription_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_subscription_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_subscription_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_subscription_id'] = $external_subscription_id;

        return $this;
    }

    /**
     * Gets resource_id
     *
     * @return string
     */
    public function getResourceId()
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     *
     * @param string $resource_id The resource id of the object that the action was applied.
     *
     * @return self
     */
    public function setResourceId($resource_id)
    {
        if (is_null($resource_id)) {
            throw new \InvalidArgumentException('non-nullable resource_id cannot be null');
        }
        $this->container['resource_id'] = $resource_id;

        return $this;
    }

    /**
     * Gets resource_type
     *
     * @return string
     */
    public function getResourceType()
    {
        return $this->container['resource_type'];
    }

    /**
     * Sets resource_type
     *
     * @param string $resource_type The resource type of the resource_id record.
     *
     * @return self
     */
    public function setResourceType($resource_type)
    {
        if (is_null($resource_type)) {
            throw new \InvalidArgumentException('non-nullable resource_type cannot be null');
        }
        $this->container['resource_type'] = $resource_type;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id Unique identifier for the organization associated with the activity log.
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {
        if (is_null($organization_id)) {
            throw new \InvalidArgumentException('non-nullable organization_id cannot be null');
        }
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets logged_at
     *
     * @return \DateTime
     */
    public function getLoggedAt()
    {
        return $this->container['logged_at'];
    }

    /**
     * Sets logged_at
     *
     * @param \DateTime $logged_at The logged date of the activity, presented in the ISO 8601 datetime format, specifically in Coordinated Universal Time (UTC). It provides the precise timestamp of when the event's record was created within the Lago application
     *
     * @return self
     */
    public function setLoggedAt($logged_at)
    {
        if (is_null($logged_at)) {
            throw new \InvalidArgumentException('non-nullable logged_at cannot be null');
        }
        $this->container['logged_at'] = $logged_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The creation date of the activity record in the Lago application, presented in the ISO 8601 datetime format, specifically in Coordinated Universal Time (UTC). It provides the precise timestamp of when the event's record was created within the Lago application
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


