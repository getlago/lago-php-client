<?php
/**
 * InvoiceObjectExtended
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * InvoiceObjectExtended Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceObjectExtended implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceObjectExtended';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lago_id' => 'string',
        'billing_entity_code' => 'string',
        'sequential_id' => 'int',
        'number' => 'string',
        'issuing_date' => '\DateTime',
        'payment_dispute_lost_at' => '\DateTime',
        'payment_due_date' => '\DateTime',
        'payment_overdue' => 'bool',
        'net_payment_term' => 'int',
        'invoice_type' => 'string',
        'status' => 'string',
        'payment_status' => 'string',
        'currency' => '\Lago\LagoPhpClient\Model\Currency',
        'fees_amount_cents' => 'int',
        'coupons_amount_cents' => 'int',
        'credit_notes_amount_cents' => 'int',
        'sub_total_excluding_taxes_amount_cents' => 'int',
        'taxes_amount_cents' => 'int',
        'sub_total_including_taxes_amount_cents' => 'int',
        'prepaid_credit_amount_cents' => 'int',
        'progressive_billing_credit_amount_cents' => 'int',
        'total_amount_cents' => 'int',
        'version_number' => 'int',
        'self_billed' => 'bool',
        'file_url' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'customer' => '\Lago\LagoPhpClient\Model\CustomerObject',
        'billing_periods' => '\Lago\LagoPhpClient\Model\BillingPeriodObject[]',
        'metadata' => '\Lago\LagoPhpClient\Model\InvoiceMetadataObject[]',
        'applied_taxes' => '\Lago\LagoPhpClient\Model\InvoiceAppliedTaxObject[]',
        'applied_usage_thresholds' => '\Lago\LagoPhpClient\Model\AppliedUsageThresholdObject[]',
        'credits' => '\Lago\LagoPhpClient\Model\CreditObject[]',
        'fees' => '\Lago\LagoPhpClient\Model\FeeObject[]',
        'subscriptions' => '\Lago\LagoPhpClient\Model\SubscriptionObject[]',
        'error_details' => '\Lago\LagoPhpClient\Model\ErrorDetailObject[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lago_id' => 'uuid',
        'billing_entity_code' => null,
        'sequential_id' => null,
        'number' => null,
        'issuing_date' => 'date',
        'payment_dispute_lost_at' => 'date-time',
        'payment_due_date' => 'date',
        'payment_overdue' => null,
        'net_payment_term' => null,
        'invoice_type' => null,
        'status' => null,
        'payment_status' => null,
        'currency' => null,
        'fees_amount_cents' => null,
        'coupons_amount_cents' => null,
        'credit_notes_amount_cents' => null,
        'sub_total_excluding_taxes_amount_cents' => null,
        'taxes_amount_cents' => null,
        'sub_total_including_taxes_amount_cents' => null,
        'prepaid_credit_amount_cents' => null,
        'progressive_billing_credit_amount_cents' => null,
        'total_amount_cents' => null,
        'version_number' => null,
        'self_billed' => null,
        'file_url' => 'uri',
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'customer' => null,
        'billing_periods' => null,
        'metadata' => null,
        'applied_taxes' => null,
        'applied_usage_thresholds' => null,
        'credits' => null,
        'fees' => null,
        'subscriptions' => null,
        'error_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lago_id' => false,
        'billing_entity_code' => false,
        'sequential_id' => false,
        'number' => false,
        'issuing_date' => false,
        'payment_dispute_lost_at' => false,
        'payment_due_date' => false,
        'payment_overdue' => false,
        'net_payment_term' => false,
        'invoice_type' => false,
        'status' => false,
        'payment_status' => false,
        'currency' => false,
        'fees_amount_cents' => false,
        'coupons_amount_cents' => false,
        'credit_notes_amount_cents' => false,
        'sub_total_excluding_taxes_amount_cents' => false,
        'taxes_amount_cents' => false,
        'sub_total_including_taxes_amount_cents' => false,
        'prepaid_credit_amount_cents' => false,
        'progressive_billing_credit_amount_cents' => false,
        'total_amount_cents' => false,
        'version_number' => false,
        'self_billed' => false,
        'file_url' => false,
        'created_at' => false,
        'updated_at' => false,
        'customer' => false,
        'billing_periods' => false,
        'metadata' => false,
        'applied_taxes' => false,
        'applied_usage_thresholds' => false,
        'credits' => false,
        'fees' => false,
        'subscriptions' => false,
        'error_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lago_id' => 'lago_id',
        'billing_entity_code' => 'billing_entity_code',
        'sequential_id' => 'sequential_id',
        'number' => 'number',
        'issuing_date' => 'issuing_date',
        'payment_dispute_lost_at' => 'payment_dispute_lost_at',
        'payment_due_date' => 'payment_due_date',
        'payment_overdue' => 'payment_overdue',
        'net_payment_term' => 'net_payment_term',
        'invoice_type' => 'invoice_type',
        'status' => 'status',
        'payment_status' => 'payment_status',
        'currency' => 'currency',
        'fees_amount_cents' => 'fees_amount_cents',
        'coupons_amount_cents' => 'coupons_amount_cents',
        'credit_notes_amount_cents' => 'credit_notes_amount_cents',
        'sub_total_excluding_taxes_amount_cents' => 'sub_total_excluding_taxes_amount_cents',
        'taxes_amount_cents' => 'taxes_amount_cents',
        'sub_total_including_taxes_amount_cents' => 'sub_total_including_taxes_amount_cents',
        'prepaid_credit_amount_cents' => 'prepaid_credit_amount_cents',
        'progressive_billing_credit_amount_cents' => 'progressive_billing_credit_amount_cents',
        'total_amount_cents' => 'total_amount_cents',
        'version_number' => 'version_number',
        'self_billed' => 'self_billed',
        'file_url' => 'file_url',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'customer' => 'customer',
        'billing_periods' => 'billing_periods',
        'metadata' => 'metadata',
        'applied_taxes' => 'applied_taxes',
        'applied_usage_thresholds' => 'applied_usage_thresholds',
        'credits' => 'credits',
        'fees' => 'fees',
        'subscriptions' => 'subscriptions',
        'error_details' => 'error_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lago_id' => 'setLagoId',
        'billing_entity_code' => 'setBillingEntityCode',
        'sequential_id' => 'setSequentialId',
        'number' => 'setNumber',
        'issuing_date' => 'setIssuingDate',
        'payment_dispute_lost_at' => 'setPaymentDisputeLostAt',
        'payment_due_date' => 'setPaymentDueDate',
        'payment_overdue' => 'setPaymentOverdue',
        'net_payment_term' => 'setNetPaymentTerm',
        'invoice_type' => 'setInvoiceType',
        'status' => 'setStatus',
        'payment_status' => 'setPaymentStatus',
        'currency' => 'setCurrency',
        'fees_amount_cents' => 'setFeesAmountCents',
        'coupons_amount_cents' => 'setCouponsAmountCents',
        'credit_notes_amount_cents' => 'setCreditNotesAmountCents',
        'sub_total_excluding_taxes_amount_cents' => 'setSubTotalExcludingTaxesAmountCents',
        'taxes_amount_cents' => 'setTaxesAmountCents',
        'sub_total_including_taxes_amount_cents' => 'setSubTotalIncludingTaxesAmountCents',
        'prepaid_credit_amount_cents' => 'setPrepaidCreditAmountCents',
        'progressive_billing_credit_amount_cents' => 'setProgressiveBillingCreditAmountCents',
        'total_amount_cents' => 'setTotalAmountCents',
        'version_number' => 'setVersionNumber',
        'self_billed' => 'setSelfBilled',
        'file_url' => 'setFileUrl',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'customer' => 'setCustomer',
        'billing_periods' => 'setBillingPeriods',
        'metadata' => 'setMetadata',
        'applied_taxes' => 'setAppliedTaxes',
        'applied_usage_thresholds' => 'setAppliedUsageThresholds',
        'credits' => 'setCredits',
        'fees' => 'setFees',
        'subscriptions' => 'setSubscriptions',
        'error_details' => 'setErrorDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lago_id' => 'getLagoId',
        'billing_entity_code' => 'getBillingEntityCode',
        'sequential_id' => 'getSequentialId',
        'number' => 'getNumber',
        'issuing_date' => 'getIssuingDate',
        'payment_dispute_lost_at' => 'getPaymentDisputeLostAt',
        'payment_due_date' => 'getPaymentDueDate',
        'payment_overdue' => 'getPaymentOverdue',
        'net_payment_term' => 'getNetPaymentTerm',
        'invoice_type' => 'getInvoiceType',
        'status' => 'getStatus',
        'payment_status' => 'getPaymentStatus',
        'currency' => 'getCurrency',
        'fees_amount_cents' => 'getFeesAmountCents',
        'coupons_amount_cents' => 'getCouponsAmountCents',
        'credit_notes_amount_cents' => 'getCreditNotesAmountCents',
        'sub_total_excluding_taxes_amount_cents' => 'getSubTotalExcludingTaxesAmountCents',
        'taxes_amount_cents' => 'getTaxesAmountCents',
        'sub_total_including_taxes_amount_cents' => 'getSubTotalIncludingTaxesAmountCents',
        'prepaid_credit_amount_cents' => 'getPrepaidCreditAmountCents',
        'progressive_billing_credit_amount_cents' => 'getProgressiveBillingCreditAmountCents',
        'total_amount_cents' => 'getTotalAmountCents',
        'version_number' => 'getVersionNumber',
        'self_billed' => 'getSelfBilled',
        'file_url' => 'getFileUrl',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'customer' => 'getCustomer',
        'billing_periods' => 'getBillingPeriods',
        'metadata' => 'getMetadata',
        'applied_taxes' => 'getAppliedTaxes',
        'applied_usage_thresholds' => 'getAppliedUsageThresholds',
        'credits' => 'getCredits',
        'fees' => 'getFees',
        'subscriptions' => 'getSubscriptions',
        'error_details' => 'getErrorDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INVOICE_TYPE_SUBSCRIPTION = 'subscription';
    public const INVOICE_TYPE_ADD_ON = 'add_on';
    public const INVOICE_TYPE_CREDIT = 'credit';
    public const INVOICE_TYPE_ONE_OFF = 'one_off';
    public const INVOICE_TYPE_PROGRESSIVE_BILLING = 'progressive_billing';
    public const STATUS_DRAFT = 'draft';
    public const STATUS_FINALIZED = 'finalized';
    public const STATUS_VOIDED = 'voided';
    public const STATUS_FAILED = 'failed';
    public const STATUS_PENDING = 'pending';
    public const PAYMENT_STATUS_PENDING = 'pending';
    public const PAYMENT_STATUS_SUCCEEDED = 'succeeded';
    public const PAYMENT_STATUS_FAILED = 'failed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceTypeAllowableValues()
    {
        return [
            self::INVOICE_TYPE_SUBSCRIPTION,
            self::INVOICE_TYPE_ADD_ON,
            self::INVOICE_TYPE_CREDIT,
            self::INVOICE_TYPE_ONE_OFF,
            self::INVOICE_TYPE_PROGRESSIVE_BILLING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_FINALIZED,
            self::STATUS_VOIDED,
            self::STATUS_FAILED,
            self::STATUS_PENDING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_PENDING,
            self::PAYMENT_STATUS_SUCCEEDED,
            self::PAYMENT_STATUS_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('lago_id', $data ?? [], null);
        $this->setIfExists('billing_entity_code', $data ?? [], null);
        $this->setIfExists('sequential_id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('issuing_date', $data ?? [], null);
        $this->setIfExists('payment_dispute_lost_at', $data ?? [], null);
        $this->setIfExists('payment_due_date', $data ?? [], null);
        $this->setIfExists('payment_overdue', $data ?? [], null);
        $this->setIfExists('net_payment_term', $data ?? [], null);
        $this->setIfExists('invoice_type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('fees_amount_cents', $data ?? [], null);
        $this->setIfExists('coupons_amount_cents', $data ?? [], null);
        $this->setIfExists('credit_notes_amount_cents', $data ?? [], null);
        $this->setIfExists('sub_total_excluding_taxes_amount_cents', $data ?? [], null);
        $this->setIfExists('taxes_amount_cents', $data ?? [], null);
        $this->setIfExists('sub_total_including_taxes_amount_cents', $data ?? [], null);
        $this->setIfExists('prepaid_credit_amount_cents', $data ?? [], null);
        $this->setIfExists('progressive_billing_credit_amount_cents', $data ?? [], null);
        $this->setIfExists('total_amount_cents', $data ?? [], null);
        $this->setIfExists('version_number', $data ?? [], null);
        $this->setIfExists('self_billed', $data ?? [], null);
        $this->setIfExists('file_url', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('billing_periods', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('applied_taxes', $data ?? [], null);
        $this->setIfExists('applied_usage_thresholds', $data ?? [], null);
        $this->setIfExists('credits', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('subscriptions', $data ?? [], null);
        $this->setIfExists('error_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lago_id'] === null) {
            $invalidProperties[] = "'lago_id' can't be null";
        }
        if ($this->container['billing_entity_code'] === null) {
            $invalidProperties[] = "'billing_entity_code' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['issuing_date'] === null) {
            $invalidProperties[] = "'issuing_date' can't be null";
        }
        if ($this->container['invoice_type'] === null) {
            $invalidProperties[] = "'invoice_type' can't be null";
        }
        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!is_null($this->container['invoice_type']) && !in_array($this->container['invoice_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invoice_type', must be one of '%s'",
                $this->container['invoice_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['payment_status'] === null) {
            $invalidProperties[] = "'payment_status' can't be null";
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['fees_amount_cents'] === null) {
            $invalidProperties[] = "'fees_amount_cents' can't be null";
        }
        if ($this->container['coupons_amount_cents'] === null) {
            $invalidProperties[] = "'coupons_amount_cents' can't be null";
        }
        if ($this->container['credit_notes_amount_cents'] === null) {
            $invalidProperties[] = "'credit_notes_amount_cents' can't be null";
        }
        if ($this->container['sub_total_excluding_taxes_amount_cents'] === null) {
            $invalidProperties[] = "'sub_total_excluding_taxes_amount_cents' can't be null";
        }
        if ($this->container['taxes_amount_cents'] === null) {
            $invalidProperties[] = "'taxes_amount_cents' can't be null";
        }
        if ($this->container['sub_total_including_taxes_amount_cents'] === null) {
            $invalidProperties[] = "'sub_total_including_taxes_amount_cents' can't be null";
        }
        if ($this->container['prepaid_credit_amount_cents'] === null) {
            $invalidProperties[] = "'prepaid_credit_amount_cents' can't be null";
        }
        if ($this->container['progressive_billing_credit_amount_cents'] === null) {
            $invalidProperties[] = "'progressive_billing_credit_amount_cents' can't be null";
        }
        if ($this->container['total_amount_cents'] === null) {
            $invalidProperties[] = "'total_amount_cents' can't be null";
        }
        if ($this->container['version_number'] === null) {
            $invalidProperties[] = "'version_number' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lago_id
     *
     * @return string
     */
    public function getLagoId()
    {
        return $this->container['lago_id'];
    }

    /**
     * Sets lago_id
     *
     * @param string $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee's record within the Lago system.
     *
     * @return self
     */
    public function setLagoId($lago_id)
    {
        if (is_null($lago_id)) {
            throw new \InvalidArgumentException('non-nullable lago_id cannot be null');
        }
        $this->container['lago_id'] = $lago_id;

        return $this;
    }

    /**
     * Gets billing_entity_code
     *
     * @return string
     */
    public function getBillingEntityCode()
    {
        return $this->container['billing_entity_code'];
    }

    /**
     * Sets billing_entity_code
     *
     * @param string $billing_entity_code The unique code of the billing entity associated with the invoice
     *
     * @return self
     */
    public function setBillingEntityCode($billing_entity_code)
    {
        if (is_null($billing_entity_code)) {
            throw new \InvalidArgumentException('non-nullable billing_entity_code cannot be null');
        }
        $this->container['billing_entity_code'] = $billing_entity_code;

        return $this;
    }

    /**
     * Gets sequential_id
     *
     * @return int|null
     */
    public function getSequentialId()
    {
        return $this->container['sequential_id'];
    }

    /**
     * Sets sequential_id
     *
     * @param int|null $sequential_id This ID helps in uniquely identifying and organizing the invoices associated with a specific customer. It provides a sequential numbering system specific to the customer, allowing for easy tracking and management of invoices within the customer's context.
     *
     * @return self
     */
    public function setSequentialId($sequential_id)
    {
        if (is_null($sequential_id)) {
            throw new \InvalidArgumentException('non-nullable sequential_id cannot be null');
        }
        $this->container['sequential_id'] = $sequential_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number The unique number assigned to the invoice. This number serves as a distinct identifier for the invoice and helps in differentiating it from other invoices in the system.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets issuing_date
     *
     * @return \DateTime
     */
    public function getIssuingDate()
    {
        return $this->container['issuing_date'];
    }

    /**
     * Sets issuing_date
     *
     * @param \DateTime $issuing_date The date when the invoice was issued. It is provided in the ISO 8601 date format.
     *
     * @return self
     */
    public function setIssuingDate($issuing_date)
    {
        if (is_null($issuing_date)) {
            throw new \InvalidArgumentException('non-nullable issuing_date cannot be null');
        }
        $this->container['issuing_date'] = $issuing_date;

        return $this;
    }

    /**
     * Gets payment_dispute_lost_at
     *
     * @return \DateTime|null
     */
    public function getPaymentDisputeLostAt()
    {
        return $this->container['payment_dispute_lost_at'];
    }

    /**
     * Sets payment_dispute_lost_at
     *
     * @param \DateTime|null $payment_dispute_lost_at The date when the payment dispute was lost. It is expressed in Coordinated Universal Time (UTC).
     *
     * @return self
     */
    public function setPaymentDisputeLostAt($payment_dispute_lost_at)
    {
        if (is_null($payment_dispute_lost_at)) {
            throw new \InvalidArgumentException('non-nullable payment_dispute_lost_at cannot be null');
        }
        $this->container['payment_dispute_lost_at'] = $payment_dispute_lost_at;

        return $this;
    }

    /**
     * Gets payment_due_date
     *
     * @return \DateTime|null
     */
    public function getPaymentDueDate()
    {
        return $this->container['payment_due_date'];
    }

    /**
     * Sets payment_due_date
     *
     * @param \DateTime|null $payment_due_date The payment due date for the invoice, specified in the ISO 8601 date format.
     *
     * @return self
     */
    public function setPaymentDueDate($payment_due_date)
    {
        if (is_null($payment_due_date)) {
            throw new \InvalidArgumentException('non-nullable payment_due_date cannot be null');
        }
        $this->container['payment_due_date'] = $payment_due_date;

        return $this;
    }

    /**
     * Gets payment_overdue
     *
     * @return bool|null
     */
    public function getPaymentOverdue()
    {
        return $this->container['payment_overdue'];
    }

    /**
     * Sets payment_overdue
     *
     * @param bool|null $payment_overdue Specifies if the payment is considered as overdue.
     *
     * @return self
     */
    public function setPaymentOverdue($payment_overdue)
    {
        if (is_null($payment_overdue)) {
            throw new \InvalidArgumentException('non-nullable payment_overdue cannot be null');
        }
        $this->container['payment_overdue'] = $payment_overdue;

        return $this;
    }

    /**
     * Gets net_payment_term
     *
     * @return int|null
     */
    public function getNetPaymentTerm()
    {
        return $this->container['net_payment_term'];
    }

    /**
     * Sets net_payment_term
     *
     * @param int|null $net_payment_term The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.
     *
     * @return self
     */
    public function setNetPaymentTerm($net_payment_term)
    {
        if (is_null($net_payment_term)) {
            throw new \InvalidArgumentException('non-nullable net_payment_term cannot be null');
        }
        $this->container['net_payment_term'] = $net_payment_term;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param string $invoice_type The type of invoice issued. Possible values are `subscription`, `one-off`, `credit` or `progressive_billing`.
     *
     * @return self
     */
    public function setInvoiceType($invoice_type)
    {
        if (is_null($invoice_type)) {
            throw new \InvalidArgumentException('non-nullable invoice_type cannot be null');
        }
        $allowedValues = $this->getInvoiceTypeAllowableValues();
        if (!in_array($invoice_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invoice_type', must be one of '%s'",
                    $invoice_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the invoice. It indicates the current state of the invoice and can have following values: - `draft`: the invoice is in the draft state, waiting for the end of the grace period to be finalized. During this period, events can still be ingested and added to the invoice. - `finalized`: the invoice has been issued and finalized. In this state, events cannot be ingested or added to the invoice anymore. - `voided`: the invoice has been issued and subsequently voided. In this state, events cannot be ingested or added to the invoice anymore. - `pending`: the invoice remains pending until the taxes are fetched from the external provider. - `failed`: during an attempt of finalization of the invoice, an error happened. This invoice will have an array of error_details, explaining, in which part of the system an error happened and how it's possible to fix it. This invoice can't be edited or updated, only retried. This action will discard current error_details and will create new ones if the finalization failed again.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status The status of the payment associated with the invoice. It can have one of the following values: - `pending`: the payment is pending, waiting for payment processing in Stripe or when the invoice is emitted but users have not updated the payment status through the endpoint. - `succeeded`: the payment of the invoice has been successfully processed. - `failed`: the payment of the invoice has failed or encountered an error during processing.
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Lago\LagoPhpClient\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Lago\LagoPhpClient\Model\Currency $currency The currency of the invoice issued.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets fees_amount_cents
     *
     * @return int
     */
    public function getFeesAmountCents()
    {
        return $this->container['fees_amount_cents'];
    }

    /**
     * Sets fees_amount_cents
     *
     * @param int $fees_amount_cents The total sum of fees amount in cents. It calculates the cumulative amount of all the fees associated with the invoice, providing a consolidated value.
     *
     * @return self
     */
    public function setFeesAmountCents($fees_amount_cents)
    {
        if (is_null($fees_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable fees_amount_cents cannot be null');
        }
        $this->container['fees_amount_cents'] = $fees_amount_cents;

        return $this;
    }

    /**
     * Gets coupons_amount_cents
     *
     * @return int
     */
    public function getCouponsAmountCents()
    {
        return $this->container['coupons_amount_cents'];
    }

    /**
     * Sets coupons_amount_cents
     *
     * @param int $coupons_amount_cents The total sum of all coupons discounted on the invoice. It calculates the cumulative discount amount applied by coupons, expressed in cents.
     *
     * @return self
     */
    public function setCouponsAmountCents($coupons_amount_cents)
    {
        if (is_null($coupons_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable coupons_amount_cents cannot be null');
        }
        $this->container['coupons_amount_cents'] = $coupons_amount_cents;

        return $this;
    }

    /**
     * Gets credit_notes_amount_cents
     *
     * @return int
     */
    public function getCreditNotesAmountCents()
    {
        return $this->container['credit_notes_amount_cents'];
    }

    /**
     * Sets credit_notes_amount_cents
     *
     * @param int $credit_notes_amount_cents The total sum of all credit notes discounted on the invoice. It calculates the cumulative discount amount applied by credit notes, expressed in cents.
     *
     * @return self
     */
    public function setCreditNotesAmountCents($credit_notes_amount_cents)
    {
        if (is_null($credit_notes_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable credit_notes_amount_cents cannot be null');
        }
        $this->container['credit_notes_amount_cents'] = $credit_notes_amount_cents;

        return $this;
    }

    /**
     * Gets sub_total_excluding_taxes_amount_cents
     *
     * @return int
     */
    public function getSubTotalExcludingTaxesAmountCents()
    {
        return $this->container['sub_total_excluding_taxes_amount_cents'];
    }

    /**
     * Sets sub_total_excluding_taxes_amount_cents
     *
     * @param int $sub_total_excluding_taxes_amount_cents Subtotal amount, excluding taxes, expressed in cents. This field depends on the version number. Here are the definitions based on the version: - Version 1: is equal to the sum of `fees_amount_cents`, minus `coupons_amount_cents`, and minus `prepaid_credit_amount_cents`. - Version 2: is equal to the `fees_amount_cents`. - Version 3 & 4: is equal to the `fees_amount_cents`, minus `coupons_amount_cents`
     *
     * @return self
     */
    public function setSubTotalExcludingTaxesAmountCents($sub_total_excluding_taxes_amount_cents)
    {
        if (is_null($sub_total_excluding_taxes_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable sub_total_excluding_taxes_amount_cents cannot be null');
        }
        $this->container['sub_total_excluding_taxes_amount_cents'] = $sub_total_excluding_taxes_amount_cents;

        return $this;
    }

    /**
     * Gets taxes_amount_cents
     *
     * @return int
     */
    public function getTaxesAmountCents()
    {
        return $this->container['taxes_amount_cents'];
    }

    /**
     * Sets taxes_amount_cents
     *
     * @param int $taxes_amount_cents The sum of tax amount associated with the invoice, expressed in cents.
     *
     * @return self
     */
    public function setTaxesAmountCents($taxes_amount_cents)
    {
        if (is_null($taxes_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable taxes_amount_cents cannot be null');
        }
        $this->container['taxes_amount_cents'] = $taxes_amount_cents;

        return $this;
    }

    /**
     * Gets sub_total_including_taxes_amount_cents
     *
     * @return int
     */
    public function getSubTotalIncludingTaxesAmountCents()
    {
        return $this->container['sub_total_including_taxes_amount_cents'];
    }

    /**
     * Sets sub_total_including_taxes_amount_cents
     *
     * @param int $sub_total_including_taxes_amount_cents Subtotal amount, including taxes, expressed in cents. This field depends on the version number. Here are the definitions based on the version: - Version 1: is equal to the `total_amount_cents`. - Version 2: is equal to the sum of `fees_amount_cents` and `taxes_amount_cents`. - Version 3 & 4: is equal to the sum `sub_total_excluding_taxes_amount_cents` and `taxes_amount_cents`
     *
     * @return self
     */
    public function setSubTotalIncludingTaxesAmountCents($sub_total_including_taxes_amount_cents)
    {
        if (is_null($sub_total_including_taxes_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable sub_total_including_taxes_amount_cents cannot be null');
        }
        $this->container['sub_total_including_taxes_amount_cents'] = $sub_total_including_taxes_amount_cents;

        return $this;
    }

    /**
     * Gets prepaid_credit_amount_cents
     *
     * @return int
     */
    public function getPrepaidCreditAmountCents()
    {
        return $this->container['prepaid_credit_amount_cents'];
    }

    /**
     * Sets prepaid_credit_amount_cents
     *
     * @param int $prepaid_credit_amount_cents The total sum of all prepaid credits discounted on the invoice. It calculates the cumulative discount amount applied by prepaid credits, expressed in cents.
     *
     * @return self
     */
    public function setPrepaidCreditAmountCents($prepaid_credit_amount_cents)
    {
        if (is_null($prepaid_credit_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable prepaid_credit_amount_cents cannot be null');
        }
        $this->container['prepaid_credit_amount_cents'] = $prepaid_credit_amount_cents;

        return $this;
    }

    /**
     * Gets progressive_billing_credit_amount_cents
     *
     * @return int
     */
    public function getProgressiveBillingCreditAmountCents()
    {
        return $this->container['progressive_billing_credit_amount_cents'];
    }

    /**
     * Sets progressive_billing_credit_amount_cents
     *
     * @param int $progressive_billing_credit_amount_cents The usage already billed in previous invoices. Only apply to `progressive_billing` and `subscription` invoices.
     *
     * @return self
     */
    public function setProgressiveBillingCreditAmountCents($progressive_billing_credit_amount_cents)
    {
        if (is_null($progressive_billing_credit_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable progressive_billing_credit_amount_cents cannot be null');
        }
        $this->container['progressive_billing_credit_amount_cents'] = $progressive_billing_credit_amount_cents;

        return $this;
    }

    /**
     * Gets total_amount_cents
     *
     * @return int
     */
    public function getTotalAmountCents()
    {
        return $this->container['total_amount_cents'];
    }

    /**
     * Sets total_amount_cents
     *
     * @param int $total_amount_cents The sum of the amount and taxes amount on the invoice, expressed in cents. It calculates the total financial value of the invoice, including both the original amount and any applicable taxes.
     *
     * @return self
     */
    public function setTotalAmountCents($total_amount_cents)
    {
        if (is_null($total_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable total_amount_cents cannot be null');
        }
        $this->container['total_amount_cents'] = $total_amount_cents;

        return $this;
    }

    /**
     * Gets version_number
     *
     * @return int
     */
    public function getVersionNumber()
    {
        return $this->container['version_number'];
    }

    /**
     * Sets version_number
     *
     * @param int $version_number version_number
     *
     * @return self
     */
    public function setVersionNumber($version_number)
    {
        if (is_null($version_number)) {
            throw new \InvalidArgumentException('non-nullable version_number cannot be null');
        }
        $this->container['version_number'] = $version_number;

        return $this;
    }

    /**
     * Gets self_billed
     *
     * @return bool|null
     */
    public function getSelfBilled()
    {
        return $this->container['self_billed'];
    }

    /**
     * Sets self_billed
     *
     * @param bool|null $self_billed Indicates if the invoice is self-billed. Self-billing is a process where an organization creates the invoice on behalf of the partner. This field specifies whether the invoice is self-billed or not.
     *
     * @return self
     */
    public function setSelfBilled($self_billed)
    {
        if (is_null($self_billed)) {
            throw new \InvalidArgumentException('non-nullable self_billed cannot be null');
        }
        $this->container['self_billed'] = $self_billed;

        return $this;
    }

    /**
     * Gets file_url
     *
     * @return string|null
     */
    public function getFileUrl()
    {
        return $this->container['file_url'];
    }

    /**
     * Sets file_url
     *
     * @param string|null $file_url Contains the URL that provides direct access to the invoice PDF file. You can use this URL to download or view the PDF document of the invoice
     *
     * @return self
     */
    public function setFileUrl($file_url)
    {
        if (is_null($file_url)) {
            throw new \InvalidArgumentException('non-nullable file_url cannot be null');
        }
        $this->container['file_url'] = $file_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date of the invoice creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). The creation_date provides a standardized and internationally recognized timestamp for when the invoice object was created
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The date of the invoice update, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). The update_date provides a standardized and internationally recognized timestamp for when the invoice object was updated
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Lago\LagoPhpClient\Model\CustomerObject|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Lago\LagoPhpClient\Model\CustomerObject|null $customer The customer on which the invoice applies. It refers to the customer account or entity associated with the invoice.
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets billing_periods
     *
     * @return \Lago\LagoPhpClient\Model\BillingPeriodObject[]|null
     */
    public function getBillingPeriods()
    {
        return $this->container['billing_periods'];
    }

    /**
     * Sets billing_periods
     *
     * @param \Lago\LagoPhpClient\Model\BillingPeriodObject[]|null $billing_periods billing_periods
     *
     * @return self
     */
    public function setBillingPeriods($billing_periods)
    {
        if (is_null($billing_periods)) {
            throw new \InvalidArgumentException('non-nullable billing_periods cannot be null');
        }
        $this->container['billing_periods'] = $billing_periods;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Lago\LagoPhpClient\Model\InvoiceMetadataObject[]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Lago\LagoPhpClient\Model\InvoiceMetadataObject[]|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets applied_taxes
     *
     * @return \Lago\LagoPhpClient\Model\InvoiceAppliedTaxObject[]|null
     */
    public function getAppliedTaxes()
    {
        return $this->container['applied_taxes'];
    }

    /**
     * Sets applied_taxes
     *
     * @param \Lago\LagoPhpClient\Model\InvoiceAppliedTaxObject[]|null $applied_taxes applied_taxes
     *
     * @return self
     */
    public function setAppliedTaxes($applied_taxes)
    {
        if (is_null($applied_taxes)) {
            throw new \InvalidArgumentException('non-nullable applied_taxes cannot be null');
        }
        $this->container['applied_taxes'] = $applied_taxes;

        return $this;
    }

    /**
     * Gets applied_usage_thresholds
     *
     * @return \Lago\LagoPhpClient\Model\AppliedUsageThresholdObject[]|null
     */
    public function getAppliedUsageThresholds()
    {
        return $this->container['applied_usage_thresholds'];
    }

    /**
     * Sets applied_usage_thresholds
     *
     * @param \Lago\LagoPhpClient\Model\AppliedUsageThresholdObject[]|null $applied_usage_thresholds applied_usage_thresholds
     *
     * @return self
     */
    public function setAppliedUsageThresholds($applied_usage_thresholds)
    {
        if (is_null($applied_usage_thresholds)) {
            throw new \InvalidArgumentException('non-nullable applied_usage_thresholds cannot be null');
        }
        $this->container['applied_usage_thresholds'] = $applied_usage_thresholds;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return \Lago\LagoPhpClient\Model\CreditObject[]|null
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param \Lago\LagoPhpClient\Model\CreditObject[]|null $credits credits
     *
     * @return self
     */
    public function setCredits($credits)
    {
        if (is_null($credits)) {
            throw new \InvalidArgumentException('non-nullable credits cannot be null');
        }
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \Lago\LagoPhpClient\Model\FeeObject[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \Lago\LagoPhpClient\Model\FeeObject[]|null $fees fees
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets subscriptions
     *
     * @return \Lago\LagoPhpClient\Model\SubscriptionObject[]|null
     */
    public function getSubscriptions()
    {
        return $this->container['subscriptions'];
    }

    /**
     * Sets subscriptions
     *
     * @param \Lago\LagoPhpClient\Model\SubscriptionObject[]|null $subscriptions subscriptions
     *
     * @return self
     */
    public function setSubscriptions($subscriptions)
    {
        if (is_null($subscriptions)) {
            throw new \InvalidArgumentException('non-nullable subscriptions cannot be null');
        }
        $this->container['subscriptions'] = $subscriptions;

        return $this;
    }

    /**
     * Gets error_details
     *
     * @return \Lago\LagoPhpClient\Model\ErrorDetailObject[]|null
     */
    public function getErrorDetails()
    {
        return $this->container['error_details'];
    }

    /**
     * Sets error_details
     *
     * @param \Lago\LagoPhpClient\Model\ErrorDetailObject[]|null $error_details error_details
     *
     * @return self
     */
    public function setErrorDetails($error_details)
    {
        if (is_null($error_details)) {
            throw new \InvalidArgumentException('non-nullable error_details cannot be null');
        }
        $this->container['error_details'] = $error_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


