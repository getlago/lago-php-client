<?php
/**
 * FeeObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * FeeObject Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FeeObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FeeObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lago_id' => 'string',
        'lago_charge_id' => 'string',
        'lago_charge_filter_id' => 'string',
        'lago_invoice_id' => 'string',
        'lago_true_up_fee_id' => 'string',
        'lago_true_up_parent_fee_id' => 'string',
        'lago_subscription_id' => 'string',
        'lago_customer_id' => 'string',
        'external_customer_id' => 'string',
        'external_subscription_id' => 'string',
        'invoice_display_name' => 'string',
        'amount_cents' => 'int',
        'precise_amount' => 'string',
        'precise_total_amount' => 'string',
        'amount_currency' => '\Lago\LagoPhpClient\Model\Currency',
        'taxes_amount_cents' => 'int',
        'taxes_precise_amount' => 'string',
        'taxes_rate' => 'float',
        'units' => 'string',
        'precise_unit_amount' => 'string',
        'total_amount_cents' => 'int',
        'total_amount_currency' => '\Lago\LagoPhpClient\Model\Currency',
        'events_count' => 'int',
        'pay_in_advance' => 'bool',
        'invoiceable' => 'bool',
        'from_date' => '\DateTime',
        'to_date' => '\DateTime',
        'payment_status' => 'string',
        'created_at' => '\DateTime',
        'succeeded_at' => '\DateTime',
        'failed_at' => '\DateTime',
        'refunded_at' => '\DateTime',
        'event_transaction_id' => 'string',
        'amount_details' => '\Lago\LagoPhpClient\Model\FeeAmountDetails',
        'self_billed' => 'bool',
        'item' => '\Lago\LagoPhpClient\Model\FeeObjectItem',
        'applied_taxes' => '\Lago\LagoPhpClient\Model\FeeAppliedTaxObject[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lago_id' => 'uuid',
        'lago_charge_id' => 'uuid',
        'lago_charge_filter_id' => 'uuid',
        'lago_invoice_id' => 'uuid',
        'lago_true_up_fee_id' => 'uuid',
        'lago_true_up_parent_fee_id' => 'uuid',
        'lago_subscription_id' => 'uuid',
        'lago_customer_id' => 'uuid',
        'external_customer_id' => null,
        'external_subscription_id' => null,
        'invoice_display_name' => null,
        'amount_cents' => null,
        'precise_amount' => null,
        'precise_total_amount' => null,
        'amount_currency' => null,
        'taxes_amount_cents' => null,
        'taxes_precise_amount' => null,
        'taxes_rate' => null,
        'units' => null,
        'precise_unit_amount' => null,
        'total_amount_cents' => null,
        'total_amount_currency' => null,
        'events_count' => null,
        'pay_in_advance' => null,
        'invoiceable' => null,
        'from_date' => 'date-time',
        'to_date' => 'date-time',
        'payment_status' => null,
        'created_at' => 'date-time',
        'succeeded_at' => 'date-time',
        'failed_at' => 'date-time',
        'refunded_at' => 'date-time',
        'event_transaction_id' => null,
        'amount_details' => null,
        'self_billed' => null,
        'item' => null,
        'applied_taxes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lago_id' => true,
        'lago_charge_id' => true,
        'lago_charge_filter_id' => true,
        'lago_invoice_id' => true,
        'lago_true_up_fee_id' => true,
        'lago_true_up_parent_fee_id' => true,
        'lago_subscription_id' => true,
        'lago_customer_id' => true,
        'external_customer_id' => true,
        'external_subscription_id' => true,
        'invoice_display_name' => false,
        'amount_cents' => false,
        'precise_amount' => false,
        'precise_total_amount' => false,
        'amount_currency' => false,
        'taxes_amount_cents' => false,
        'taxes_precise_amount' => false,
        'taxes_rate' => false,
        'units' => false,
        'precise_unit_amount' => false,
        'total_amount_cents' => false,
        'total_amount_currency' => false,
        'events_count' => false,
        'pay_in_advance' => false,
        'invoiceable' => false,
        'from_date' => true,
        'to_date' => true,
        'payment_status' => false,
        'created_at' => true,
        'succeeded_at' => true,
        'failed_at' => true,
        'refunded_at' => true,
        'event_transaction_id' => true,
        'amount_details' => false,
        'self_billed' => false,
        'item' => false,
        'applied_taxes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lago_id' => 'lago_id',
        'lago_charge_id' => 'lago_charge_id',
        'lago_charge_filter_id' => 'lago_charge_filter_id',
        'lago_invoice_id' => 'lago_invoice_id',
        'lago_true_up_fee_id' => 'lago_true_up_fee_id',
        'lago_true_up_parent_fee_id' => 'lago_true_up_parent_fee_id',
        'lago_subscription_id' => 'lago_subscription_id',
        'lago_customer_id' => 'lago_customer_id',
        'external_customer_id' => 'external_customer_id',
        'external_subscription_id' => 'external_subscription_id',
        'invoice_display_name' => 'invoice_display_name',
        'amount_cents' => 'amount_cents',
        'precise_amount' => 'precise_amount',
        'precise_total_amount' => 'precise_total_amount',
        'amount_currency' => 'amount_currency',
        'taxes_amount_cents' => 'taxes_amount_cents',
        'taxes_precise_amount' => 'taxes_precise_amount',
        'taxes_rate' => 'taxes_rate',
        'units' => 'units',
        'precise_unit_amount' => 'precise_unit_amount',
        'total_amount_cents' => 'total_amount_cents',
        'total_amount_currency' => 'total_amount_currency',
        'events_count' => 'events_count',
        'pay_in_advance' => 'pay_in_advance',
        'invoiceable' => 'invoiceable',
        'from_date' => 'from_date',
        'to_date' => 'to_date',
        'payment_status' => 'payment_status',
        'created_at' => 'created_at',
        'succeeded_at' => 'succeeded_at',
        'failed_at' => 'failed_at',
        'refunded_at' => 'refunded_at',
        'event_transaction_id' => 'event_transaction_id',
        'amount_details' => 'amount_details',
        'self_billed' => 'self_billed',
        'item' => 'item',
        'applied_taxes' => 'applied_taxes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lago_id' => 'setLagoId',
        'lago_charge_id' => 'setLagoChargeId',
        'lago_charge_filter_id' => 'setLagoChargeFilterId',
        'lago_invoice_id' => 'setLagoInvoiceId',
        'lago_true_up_fee_id' => 'setLagoTrueUpFeeId',
        'lago_true_up_parent_fee_id' => 'setLagoTrueUpParentFeeId',
        'lago_subscription_id' => 'setLagoSubscriptionId',
        'lago_customer_id' => 'setLagoCustomerId',
        'external_customer_id' => 'setExternalCustomerId',
        'external_subscription_id' => 'setExternalSubscriptionId',
        'invoice_display_name' => 'setInvoiceDisplayName',
        'amount_cents' => 'setAmountCents',
        'precise_amount' => 'setPreciseAmount',
        'precise_total_amount' => 'setPreciseTotalAmount',
        'amount_currency' => 'setAmountCurrency',
        'taxes_amount_cents' => 'setTaxesAmountCents',
        'taxes_precise_amount' => 'setTaxesPreciseAmount',
        'taxes_rate' => 'setTaxesRate',
        'units' => 'setUnits',
        'precise_unit_amount' => 'setPreciseUnitAmount',
        'total_amount_cents' => 'setTotalAmountCents',
        'total_amount_currency' => 'setTotalAmountCurrency',
        'events_count' => 'setEventsCount',
        'pay_in_advance' => 'setPayInAdvance',
        'invoiceable' => 'setInvoiceable',
        'from_date' => 'setFromDate',
        'to_date' => 'setToDate',
        'payment_status' => 'setPaymentStatus',
        'created_at' => 'setCreatedAt',
        'succeeded_at' => 'setSucceededAt',
        'failed_at' => 'setFailedAt',
        'refunded_at' => 'setRefundedAt',
        'event_transaction_id' => 'setEventTransactionId',
        'amount_details' => 'setAmountDetails',
        'self_billed' => 'setSelfBilled',
        'item' => 'setItem',
        'applied_taxes' => 'setAppliedTaxes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lago_id' => 'getLagoId',
        'lago_charge_id' => 'getLagoChargeId',
        'lago_charge_filter_id' => 'getLagoChargeFilterId',
        'lago_invoice_id' => 'getLagoInvoiceId',
        'lago_true_up_fee_id' => 'getLagoTrueUpFeeId',
        'lago_true_up_parent_fee_id' => 'getLagoTrueUpParentFeeId',
        'lago_subscription_id' => 'getLagoSubscriptionId',
        'lago_customer_id' => 'getLagoCustomerId',
        'external_customer_id' => 'getExternalCustomerId',
        'external_subscription_id' => 'getExternalSubscriptionId',
        'invoice_display_name' => 'getInvoiceDisplayName',
        'amount_cents' => 'getAmountCents',
        'precise_amount' => 'getPreciseAmount',
        'precise_total_amount' => 'getPreciseTotalAmount',
        'amount_currency' => 'getAmountCurrency',
        'taxes_amount_cents' => 'getTaxesAmountCents',
        'taxes_precise_amount' => 'getTaxesPreciseAmount',
        'taxes_rate' => 'getTaxesRate',
        'units' => 'getUnits',
        'precise_unit_amount' => 'getPreciseUnitAmount',
        'total_amount_cents' => 'getTotalAmountCents',
        'total_amount_currency' => 'getTotalAmountCurrency',
        'events_count' => 'getEventsCount',
        'pay_in_advance' => 'getPayInAdvance',
        'invoiceable' => 'getInvoiceable',
        'from_date' => 'getFromDate',
        'to_date' => 'getToDate',
        'payment_status' => 'getPaymentStatus',
        'created_at' => 'getCreatedAt',
        'succeeded_at' => 'getSucceededAt',
        'failed_at' => 'getFailedAt',
        'refunded_at' => 'getRefundedAt',
        'event_transaction_id' => 'getEventTransactionId',
        'amount_details' => 'getAmountDetails',
        'self_billed' => 'getSelfBilled',
        'item' => 'getItem',
        'applied_taxes' => 'getAppliedTaxes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_STATUS_PENDING = 'pending';
    public const PAYMENT_STATUS_SUCCEEDED = 'succeeded';
    public const PAYMENT_STATUS_FAILED = 'failed';
    public const PAYMENT_STATUS_REFUNDED = 'refunded';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_PENDING,
            self::PAYMENT_STATUS_SUCCEEDED,
            self::PAYMENT_STATUS_FAILED,
            self::PAYMENT_STATUS_REFUNDED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('lago_id', $data ?? [], null);
        $this->setIfExists('lago_charge_id', $data ?? [], null);
        $this->setIfExists('lago_charge_filter_id', $data ?? [], null);
        $this->setIfExists('lago_invoice_id', $data ?? [], null);
        $this->setIfExists('lago_true_up_fee_id', $data ?? [], null);
        $this->setIfExists('lago_true_up_parent_fee_id', $data ?? [], null);
        $this->setIfExists('lago_subscription_id', $data ?? [], null);
        $this->setIfExists('lago_customer_id', $data ?? [], null);
        $this->setIfExists('external_customer_id', $data ?? [], null);
        $this->setIfExists('external_subscription_id', $data ?? [], null);
        $this->setIfExists('invoice_display_name', $data ?? [], null);
        $this->setIfExists('amount_cents', $data ?? [], null);
        $this->setIfExists('precise_amount', $data ?? [], null);
        $this->setIfExists('precise_total_amount', $data ?? [], null);
        $this->setIfExists('amount_currency', $data ?? [], null);
        $this->setIfExists('taxes_amount_cents', $data ?? [], null);
        $this->setIfExists('taxes_precise_amount', $data ?? [], null);
        $this->setIfExists('taxes_rate', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('precise_unit_amount', $data ?? [], null);
        $this->setIfExists('total_amount_cents', $data ?? [], null);
        $this->setIfExists('total_amount_currency', $data ?? [], null);
        $this->setIfExists('events_count', $data ?? [], null);
        $this->setIfExists('pay_in_advance', $data ?? [], null);
        $this->setIfExists('invoiceable', $data ?? [], null);
        $this->setIfExists('from_date', $data ?? [], null);
        $this->setIfExists('to_date', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('succeeded_at', $data ?? [], null);
        $this->setIfExists('failed_at', $data ?? [], null);
        $this->setIfExists('refunded_at', $data ?? [], null);
        $this->setIfExists('event_transaction_id', $data ?? [], null);
        $this->setIfExists('amount_details', $data ?? [], null);
        $this->setIfExists('self_billed', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('applied_taxes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount_cents'] === null) {
            $invalidProperties[] = "'amount_cents' can't be null";
        }
        if ($this->container['amount_currency'] === null) {
            $invalidProperties[] = "'amount_currency' can't be null";
        }
        if ($this->container['taxes_amount_cents'] === null) {
            $invalidProperties[] = "'taxes_amount_cents' can't be null";
        }
        if ($this->container['taxes_rate'] === null) {
            $invalidProperties[] = "'taxes_rate' can't be null";
        }
        if ($this->container['units'] === null) {
            $invalidProperties[] = "'units' can't be null";
        }
        if ($this->container['precise_unit_amount'] === null) {
            $invalidProperties[] = "'precise_unit_amount' can't be null";
        }
        if ($this->container['total_amount_cents'] === null) {
            $invalidProperties[] = "'total_amount_cents' can't be null";
        }
        if ($this->container['total_amount_currency'] === null) {
            $invalidProperties[] = "'total_amount_currency' can't be null";
        }
        if ($this->container['pay_in_advance'] === null) {
            $invalidProperties[] = "'pay_in_advance' can't be null";
        }
        if ($this->container['invoiceable'] === null) {
            $invalidProperties[] = "'invoiceable' can't be null";
        }
        if ($this->container['payment_status'] === null) {
            $invalidProperties[] = "'payment_status' can't be null";
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['item'] === null) {
            $invalidProperties[] = "'item' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lago_id
     *
     * @return string|null
     */
    public function getLagoId()
    {
        return $this->container['lago_id'];
    }

    /**
     * Sets lago_id
     *
     * @param string|null $lago_id Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the fee's record within the Lago system.
     *
     * @return self
     */
    public function setLagoId($lago_id)
    {
        if (is_null($lago_id)) {
            array_push($this->openAPINullablesSetToNull, 'lago_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lago_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lago_id'] = $lago_id;

        return $this;
    }

    /**
     * Gets lago_charge_id
     *
     * @return string|null
     */
    public function getLagoChargeId()
    {
        return $this->container['lago_charge_id'];
    }

    /**
     * Sets lago_charge_id
     *
     * @param string|null $lago_charge_id Unique identifier assigned to the charge that the fee belongs to
     *
     * @return self
     */
    public function setLagoChargeId($lago_charge_id)
    {
        if (is_null($lago_charge_id)) {
            array_push($this->openAPINullablesSetToNull, 'lago_charge_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lago_charge_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lago_charge_id'] = $lago_charge_id;

        return $this;
    }

    /**
     * Gets lago_charge_filter_id
     *
     * @return string|null
     */
    public function getLagoChargeFilterId()
    {
        return $this->container['lago_charge_filter_id'];
    }

    /**
     * Sets lago_charge_filter_id
     *
     * @param string|null $lago_charge_filter_id Unique identifier assigned to the charge filter that the fee belongs to
     *
     * @return self
     */
    public function setLagoChargeFilterId($lago_charge_filter_id)
    {
        if (is_null($lago_charge_filter_id)) {
            array_push($this->openAPINullablesSetToNull, 'lago_charge_filter_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lago_charge_filter_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lago_charge_filter_id'] = $lago_charge_filter_id;

        return $this;
    }

    /**
     * Gets lago_invoice_id
     *
     * @return string|null
     */
    public function getLagoInvoiceId()
    {
        return $this->container['lago_invoice_id'];
    }

    /**
     * Sets lago_invoice_id
     *
     * @param string|null $lago_invoice_id Unique identifier assigned to the invoice that the fee belongs to
     *
     * @return self
     */
    public function setLagoInvoiceId($lago_invoice_id)
    {
        if (is_null($lago_invoice_id)) {
            array_push($this->openAPINullablesSetToNull, 'lago_invoice_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lago_invoice_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lago_invoice_id'] = $lago_invoice_id;

        return $this;
    }

    /**
     * Gets lago_true_up_fee_id
     *
     * @return string|null
     */
    public function getLagoTrueUpFeeId()
    {
        return $this->container['lago_true_up_fee_id'];
    }

    /**
     * Sets lago_true_up_fee_id
     *
     * @param string|null $lago_true_up_fee_id Unique identifier assigned to the true-up fee when a minimum has been set to the charge. This identifier helps to distinguish and manage the true-up fee associated with the charge, which may be applicable when a minimum threshold or limit is set for the charge amount.
     *
     * @return self
     */
    public function setLagoTrueUpFeeId($lago_true_up_fee_id)
    {
        if (is_null($lago_true_up_fee_id)) {
            array_push($this->openAPINullablesSetToNull, 'lago_true_up_fee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lago_true_up_fee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lago_true_up_fee_id'] = $lago_true_up_fee_id;

        return $this;
    }

    /**
     * Gets lago_true_up_parent_fee_id
     *
     * @return string|null
     */
    public function getLagoTrueUpParentFeeId()
    {
        return $this->container['lago_true_up_parent_fee_id'];
    }

    /**
     * Sets lago_true_up_parent_fee_id
     *
     * @param string|null $lago_true_up_parent_fee_id Unique identifier assigned to the parent fee on which the true-up fee is assigned. This identifier establishes the relationship between the parent fee and the associated true-up fee.
     *
     * @return self
     */
    public function setLagoTrueUpParentFeeId($lago_true_up_parent_fee_id)
    {
        if (is_null($lago_true_up_parent_fee_id)) {
            array_push($this->openAPINullablesSetToNull, 'lago_true_up_parent_fee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lago_true_up_parent_fee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lago_true_up_parent_fee_id'] = $lago_true_up_parent_fee_id;

        return $this;
    }

    /**
     * Gets lago_subscription_id
     *
     * @return string|null
     */
    public function getLagoSubscriptionId()
    {
        return $this->container['lago_subscription_id'];
    }

    /**
     * Sets lago_subscription_id
     *
     * @param string|null $lago_subscription_id Unique identifier assigned to the subscription, created by Lago. This field is specifically displayed when the fee type is charge or subscription.
     *
     * @return self
     */
    public function setLagoSubscriptionId($lago_subscription_id)
    {
        if (is_null($lago_subscription_id)) {
            array_push($this->openAPINullablesSetToNull, 'lago_subscription_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lago_subscription_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lago_subscription_id'] = $lago_subscription_id;

        return $this;
    }

    /**
     * Gets lago_customer_id
     *
     * @return string|null
     */
    public function getLagoCustomerId()
    {
        return $this->container['lago_customer_id'];
    }

    /**
     * Sets lago_customer_id
     *
     * @param string|null $lago_customer_id Unique identifier assigned to the customer, created by Lago. This field is specifically displayed when the fee type is charge or subscription.
     *
     * @return self
     */
    public function setLagoCustomerId($lago_customer_id)
    {
        if (is_null($lago_customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'lago_customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lago_customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lago_customer_id'] = $lago_customer_id;

        return $this;
    }

    /**
     * Gets external_customer_id
     *
     * @return string|null
     */
    public function getExternalCustomerId()
    {
        return $this->container['external_customer_id'];
    }

    /**
     * Sets external_customer_id
     *
     * @param string|null $external_customer_id Unique identifier assigned to the customer in your application. This field is specifically displayed when the fee type is charge or subscription.
     *
     * @return self
     */
    public function setExternalCustomerId($external_customer_id)
    {
        if (is_null($external_customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_customer_id'] = $external_customer_id;

        return $this;
    }

    /**
     * Gets external_subscription_id
     *
     * @return string|null
     */
    public function getExternalSubscriptionId()
    {
        return $this->container['external_subscription_id'];
    }

    /**
     * Sets external_subscription_id
     *
     * @param string|null $external_subscription_id Unique identifier assigned to the subscription in your application. This field is specifically displayed when the fee type is charge or subscription.
     *
     * @return self
     */
    public function setExternalSubscriptionId($external_subscription_id)
    {
        if (is_null($external_subscription_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_subscription_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_subscription_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_subscription_id'] = $external_subscription_id;

        return $this;
    }

    /**
     * Gets invoice_display_name
     *
     * @return string|null
     */
    public function getInvoiceDisplayName()
    {
        return $this->container['invoice_display_name'];
    }

    /**
     * Sets invoice_display_name
     *
     * @param string|null $invoice_display_name Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
     *
     * @return self
     */
    public function setInvoiceDisplayName($invoice_display_name)
    {
        if (is_null($invoice_display_name)) {
            throw new \InvalidArgumentException('non-nullable invoice_display_name cannot be null');
        }
        $this->container['invoice_display_name'] = $invoice_display_name;

        return $this;
    }

    /**
     * Gets amount_cents
     *
     * @return int
     */
    public function getAmountCents()
    {
        return $this->container['amount_cents'];
    }

    /**
     * Sets amount_cents
     *
     * @param int $amount_cents The cost of this specific fee, excluding any applicable taxes.
     *
     * @return self
     */
    public function setAmountCents($amount_cents)
    {
        if (is_null($amount_cents)) {
            throw new \InvalidArgumentException('non-nullable amount_cents cannot be null');
        }
        $this->container['amount_cents'] = $amount_cents;

        return $this;
    }

    /**
     * Gets precise_amount
     *
     * @return string|null
     */
    public function getPreciseAmount()
    {
        return $this->container['precise_amount'];
    }

    /**
     * Sets precise_amount
     *
     * @param string|null $precise_amount The cost of this specific fee, excluding any applicable taxes, with precision.
     *
     * @return self
     */
    public function setPreciseAmount($precise_amount)
    {
        if (is_null($precise_amount)) {
            throw new \InvalidArgumentException('non-nullable precise_amount cannot be null');
        }
        $this->container['precise_amount'] = $precise_amount;

        return $this;
    }

    /**
     * Gets precise_total_amount
     *
     * @return string|null
     */
    public function getPreciseTotalAmount()
    {
        return $this->container['precise_total_amount'];
    }

    /**
     * Sets precise_total_amount
     *
     * @param string|null $precise_total_amount The cost of this specific fee, including any applicable taxes, with precision.
     *
     * @return self
     */
    public function setPreciseTotalAmount($precise_total_amount)
    {
        if (is_null($precise_total_amount)) {
            throw new \InvalidArgumentException('non-nullable precise_total_amount cannot be null');
        }
        $this->container['precise_total_amount'] = $precise_total_amount;

        return $this;
    }

    /**
     * Gets amount_currency
     *
     * @return \Lago\LagoPhpClient\Model\Currency
     */
    public function getAmountCurrency()
    {
        return $this->container['amount_currency'];
    }

    /**
     * Sets amount_currency
     *
     * @param \Lago\LagoPhpClient\Model\Currency $amount_currency The currency of this specific fee. It indicates the monetary unit in which the fee's cost is expressed.
     *
     * @return self
     */
    public function setAmountCurrency($amount_currency)
    {
        if (is_null($amount_currency)) {
            throw new \InvalidArgumentException('non-nullable amount_currency cannot be null');
        }
        $this->container['amount_currency'] = $amount_currency;

        return $this;
    }

    /**
     * Gets taxes_amount_cents
     *
     * @return int
     */
    public function getTaxesAmountCents()
    {
        return $this->container['taxes_amount_cents'];
    }

    /**
     * Sets taxes_amount_cents
     *
     * @param int $taxes_amount_cents The cost of the tax associated with this specific fee.
     *
     * @return self
     */
    public function setTaxesAmountCents($taxes_amount_cents)
    {
        if (is_null($taxes_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable taxes_amount_cents cannot be null');
        }
        $this->container['taxes_amount_cents'] = $taxes_amount_cents;

        return $this;
    }

    /**
     * Gets taxes_precise_amount
     *
     * @return string|null
     */
    public function getTaxesPreciseAmount()
    {
        return $this->container['taxes_precise_amount'];
    }

    /**
     * Sets taxes_precise_amount
     *
     * @param string|null $taxes_precise_amount The cost of the tax associated with this specific fee, with precision.
     *
     * @return self
     */
    public function setTaxesPreciseAmount($taxes_precise_amount)
    {
        if (is_null($taxes_precise_amount)) {
            throw new \InvalidArgumentException('non-nullable taxes_precise_amount cannot be null');
        }
        $this->container['taxes_precise_amount'] = $taxes_precise_amount;

        return $this;
    }

    /**
     * Gets taxes_rate
     *
     * @return float
     */
    public function getTaxesRate()
    {
        return $this->container['taxes_rate'];
    }

    /**
     * Sets taxes_rate
     *
     * @param float $taxes_rate The tax rate associated with this specific fee.
     *
     * @return self
     */
    public function setTaxesRate($taxes_rate)
    {
        if (is_null($taxes_rate)) {
            throw new \InvalidArgumentException('non-nullable taxes_rate cannot be null');
        }
        $this->container['taxes_rate'] = $taxes_rate;

        return $this;
    }

    /**
     * Gets units
     *
     * @return string
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param string $units The number of units used to charge the customer. This field indicates the quantity or count of units consumed or utilized in the context of the charge. It helps in determining the basis for calculating the fee or cost associated with the usage of the service or product provided to the customer.
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets precise_unit_amount
     *
     * @return string
     */
    public function getPreciseUnitAmount()
    {
        return $this->container['precise_unit_amount'];
    }

    /**
     * Sets precise_unit_amount
     *
     * @param string $precise_unit_amount The unit amount of the fee per unit, with precision.
     *
     * @return self
     */
    public function setPreciseUnitAmount($precise_unit_amount)
    {
        if (is_null($precise_unit_amount)) {
            throw new \InvalidArgumentException('non-nullable precise_unit_amount cannot be null');
        }
        $this->container['precise_unit_amount'] = $precise_unit_amount;

        return $this;
    }

    /**
     * Gets total_amount_cents
     *
     * @return int
     */
    public function getTotalAmountCents()
    {
        return $this->container['total_amount_cents'];
    }

    /**
     * Sets total_amount_cents
     *
     * @param int $total_amount_cents The cost of this specific fee, including any applicable taxes.
     *
     * @return self
     */
    public function setTotalAmountCents($total_amount_cents)
    {
        if (is_null($total_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable total_amount_cents cannot be null');
        }
        $this->container['total_amount_cents'] = $total_amount_cents;

        return $this;
    }

    /**
     * Gets total_amount_currency
     *
     * @return \Lago\LagoPhpClient\Model\Currency
     */
    public function getTotalAmountCurrency()
    {
        return $this->container['total_amount_currency'];
    }

    /**
     * Sets total_amount_currency
     *
     * @param \Lago\LagoPhpClient\Model\Currency $total_amount_currency The currency of this specific fee, including any applicable taxes.
     *
     * @return self
     */
    public function setTotalAmountCurrency($total_amount_currency)
    {
        if (is_null($total_amount_currency)) {
            throw new \InvalidArgumentException('non-nullable total_amount_currency cannot be null');
        }
        $this->container['total_amount_currency'] = $total_amount_currency;

        return $this;
    }

    /**
     * Gets events_count
     *
     * @return int|null
     */
    public function getEventsCount()
    {
        return $this->container['events_count'];
    }

    /**
     * Sets events_count
     *
     * @param int|null $events_count The number of events that have been sent and used to charge the customer. This field indicates the count or quantity of events that have been processed and considered in the charging process.
     *
     * @return self
     */
    public function setEventsCount($events_count)
    {
        if (is_null($events_count)) {
            throw new \InvalidArgumentException('non-nullable events_count cannot be null');
        }
        $this->container['events_count'] = $events_count;

        return $this;
    }

    /**
     * Gets pay_in_advance
     *
     * @return bool
     */
    public function getPayInAdvance()
    {
        return $this->container['pay_in_advance'];
    }

    /**
     * Sets pay_in_advance
     *
     * @param bool $pay_in_advance Flag that indicates whether the fee was paid in advance. It serves as a boolean value, where `true` represents that the fee was paid in advance (straightaway), and `false` indicates that the fee was not paid in arrears (at the end of the period).
     *
     * @return self
     */
    public function setPayInAdvance($pay_in_advance)
    {
        if (is_null($pay_in_advance)) {
            throw new \InvalidArgumentException('non-nullable pay_in_advance cannot be null');
        }
        $this->container['pay_in_advance'] = $pay_in_advance;

        return $this;
    }

    /**
     * Gets invoiceable
     *
     * @return bool
     */
    public function getInvoiceable()
    {
        return $this->container['invoiceable'];
    }

    /**
     * Sets invoiceable
     *
     * @param bool $invoiceable Flag that indicates whether the fee was included on the invoice. It serves as a boolean value, where `true` represents that the fee was included on the invoice, and `false` indicates that the fee was not included on the invoice.
     *
     * @return self
     */
    public function setInvoiceable($invoiceable)
    {
        if (is_null($invoiceable)) {
            throw new \InvalidArgumentException('non-nullable invoiceable cannot be null');
        }
        $this->container['invoiceable'] = $invoiceable;

        return $this;
    }

    /**
     * Gets from_date
     *
     * @return \DateTime|null
     */
    public function getFromDate()
    {
        return $this->container['from_date'];
    }

    /**
     * Sets from_date
     *
     * @param \DateTime|null $from_date The beginning date of the period that the fee covers. It is applicable only to `subscription` and `charge` fees. This field indicates the start date of the billing period or subscription period associated with the fee.
     *
     * @return self
     */
    public function setFromDate($from_date)
    {
        if (is_null($from_date)) {
            array_push($this->openAPINullablesSetToNull, 'from_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from_date'] = $from_date;

        return $this;
    }

    /**
     * Gets to_date
     *
     * @return \DateTime|null
     */
    public function getToDate()
    {
        return $this->container['to_date'];
    }

    /**
     * Sets to_date
     *
     * @param \DateTime|null $to_date The ending date of the period that the fee covers. It is applicable only to `subscription` and `charge` fees. This field indicates the end date of the billing period or subscription period associated with the fee.
     *
     * @return self
     */
    public function setToDate($to_date)
    {
        if (is_null($to_date)) {
            array_push($this->openAPINullablesSetToNull, 'to_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_date'] = $to_date;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are `pending`, `succeeded`, `failed` and `refunded`.
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The date and time when the fee was created. It is provided in Coordinated Universal Time (UTC) format.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets succeeded_at
     *
     * @return \DateTime|null
     */
    public function getSucceededAt()
    {
        return $this->container['succeeded_at'];
    }

    /**
     * Sets succeeded_at
     *
     * @param \DateTime|null $succeeded_at The date and time when the payment for the fee was successfully processed. It is provided in Coordinated Universal Time (UTC) format.
     *
     * @return self
     */
    public function setSucceededAt($succeeded_at)
    {
        if (is_null($succeeded_at)) {
            array_push($this->openAPINullablesSetToNull, 'succeeded_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('succeeded_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['succeeded_at'] = $succeeded_at;

        return $this;
    }

    /**
     * Gets failed_at
     *
     * @return \DateTime|null
     */
    public function getFailedAt()
    {
        return $this->container['failed_at'];
    }

    /**
     * Sets failed_at
     *
     * @param \DateTime|null $failed_at The date and time when the payment for the fee failed to process. It is provided in Coordinated Universal Time (UTC) format.
     *
     * @return self
     */
    public function setFailedAt($failed_at)
    {
        if (is_null($failed_at)) {
            array_push($this->openAPINullablesSetToNull, 'failed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failed_at'] = $failed_at;

        return $this;
    }

    /**
     * Gets refunded_at
     *
     * @return \DateTime|null
     */
    public function getRefundedAt()
    {
        return $this->container['refunded_at'];
    }

    /**
     * Sets refunded_at
     *
     * @param \DateTime|null $refunded_at The date and time when the payment for the fee was refunded. It is provided in Coordinated Universal Time (UTC) format
     *
     * @return self
     */
    public function setRefundedAt($refunded_at)
    {
        if (is_null($refunded_at)) {
            array_push($this->openAPINullablesSetToNull, 'refunded_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refunded_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refunded_at'] = $refunded_at;

        return $this;
    }

    /**
     * Gets event_transaction_id
     *
     * @return string|null
     */
    public function getEventTransactionId()
    {
        return $this->container['event_transaction_id'];
    }

    /**
     * Sets event_transaction_id
     *
     * @param string|null $event_transaction_id Unique identifier assigned to the transaction. This field is specifically displayed when the fee type is `charge` and the payment for the fee is made in advance (`pay_in_advance` is set to `true`).
     *
     * @return self
     */
    public function setEventTransactionId($event_transaction_id)
    {
        if (is_null($event_transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'event_transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('event_transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['event_transaction_id'] = $event_transaction_id;

        return $this;
    }

    /**
     * Gets amount_details
     *
     * @return \Lago\LagoPhpClient\Model\FeeAmountDetails|null
     */
    public function getAmountDetails()
    {
        return $this->container['amount_details'];
    }

    /**
     * Sets amount_details
     *
     * @param \Lago\LagoPhpClient\Model\FeeAmountDetails|null $amount_details List of all unit amount details for calculating the fee.
     *
     * @return self
     */
    public function setAmountDetails($amount_details)
    {
        if (is_null($amount_details)) {
            throw new \InvalidArgumentException('non-nullable amount_details cannot be null');
        }
        $this->container['amount_details'] = $amount_details;

        return $this;
    }

    /**
     * Gets self_billed
     *
     * @return bool|null
     */
    public function getSelfBilled()
    {
        return $this->container['self_billed'];
    }

    /**
     * Sets self_billed
     *
     * @param bool|null $self_billed Indicates if the fee belongs to self-billed invoice. Self-billing is a process where an organization creates the invoice on behalf of the partner.
     *
     * @return self
     */
    public function setSelfBilled($self_billed)
    {
        if (is_null($self_billed)) {
            throw new \InvalidArgumentException('non-nullable self_billed cannot be null');
        }
        $this->container['self_billed'] = $self_billed;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \Lago\LagoPhpClient\Model\FeeObjectItem
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \Lago\LagoPhpClient\Model\FeeObjectItem $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets applied_taxes
     *
     * @return \Lago\LagoPhpClient\Model\FeeAppliedTaxObject[]|null
     */
    public function getAppliedTaxes()
    {
        return $this->container['applied_taxes'];
    }

    /**
     * Sets applied_taxes
     *
     * @param \Lago\LagoPhpClient\Model\FeeAppliedTaxObject[]|null $applied_taxes List of fee applied taxes
     *
     * @return self
     */
    public function setAppliedTaxes($applied_taxes)
    {
        if (is_null($applied_taxes)) {
            throw new \InvalidArgumentException('non-nullable applied_taxes cannot be null');
        }
        $this->container['applied_taxes'] = $applied_taxes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


