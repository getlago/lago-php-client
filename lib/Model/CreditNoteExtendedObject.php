<?php
/**
 * CreditNoteExtendedObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * CreditNoteExtendedObject Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreditNoteExtendedObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditNoteExtendedObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lago_id' => 'string',
        'billing_entity_code' => 'string',
        'sequential_id' => 'int',
        'number' => 'string',
        'lago_invoice_id' => 'string',
        'invoice_number' => 'string',
        'issuing_date' => '\DateTime',
        'credit_status' => 'string',
        'refund_status' => 'string',
        'reason' => 'string',
        'description' => 'string',
        'currency' => '\Lago\LagoPhpClient\Model\Currency',
        'total_amount_cents' => 'int',
        'taxes_amount_cents' => 'int',
        'taxes_rate' => 'float',
        'sub_total_excluding_taxes_amount_cents' => 'int',
        'balance_amount_cents' => 'int',
        'credit_amount_cents' => 'int',
        'refund_amount_cents' => 'int',
        'coupons_adjustment_amount_cents' => 'int',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'file_url' => 'string',
        'items' => '\Lago\LagoPhpClient\Model\CreditNoteItemObject[]',
        'applied_taxes' => '\Lago\LagoPhpClient\Model\CreditNoteAppliedTaxObject[]',
        'self_billed' => 'bool',
        'error_details' => '\Lago\LagoPhpClient\Model\CreditNoteErrorDetailsObject[]',
        'customer' => '\Lago\LagoPhpClient\Model\CustomerBaseObject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lago_id' => 'uuid',
        'billing_entity_code' => null,
        'sequential_id' => null,
        'number' => null,
        'lago_invoice_id' => 'uuid',
        'invoice_number' => null,
        'issuing_date' => 'date',
        'credit_status' => null,
        'refund_status' => null,
        'reason' => null,
        'description' => null,
        'currency' => null,
        'total_amount_cents' => null,
        'taxes_amount_cents' => null,
        'taxes_rate' => null,
        'sub_total_excluding_taxes_amount_cents' => null,
        'balance_amount_cents' => null,
        'credit_amount_cents' => null,
        'refund_amount_cents' => null,
        'coupons_adjustment_amount_cents' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'file_url' => null,
        'items' => null,
        'applied_taxes' => null,
        'self_billed' => null,
        'error_details' => null,
        'customer' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lago_id' => false,
        'billing_entity_code' => false,
        'sequential_id' => false,
        'number' => false,
        'lago_invoice_id' => false,
        'invoice_number' => false,
        'issuing_date' => false,
        'credit_status' => true,
        'refund_status' => true,
        'reason' => false,
        'description' => false,
        'currency' => false,
        'total_amount_cents' => false,
        'taxes_amount_cents' => false,
        'taxes_rate' => false,
        'sub_total_excluding_taxes_amount_cents' => false,
        'balance_amount_cents' => false,
        'credit_amount_cents' => false,
        'refund_amount_cents' => false,
        'coupons_adjustment_amount_cents' => false,
        'created_at' => false,
        'updated_at' => false,
        'file_url' => false,
        'items' => false,
        'applied_taxes' => false,
        'self_billed' => false,
        'error_details' => false,
        'customer' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lago_id' => 'lago_id',
        'billing_entity_code' => 'billing_entity_code',
        'sequential_id' => 'sequential_id',
        'number' => 'number',
        'lago_invoice_id' => 'lago_invoice_id',
        'invoice_number' => 'invoice_number',
        'issuing_date' => 'issuing_date',
        'credit_status' => 'credit_status',
        'refund_status' => 'refund_status',
        'reason' => 'reason',
        'description' => 'description',
        'currency' => 'currency',
        'total_amount_cents' => 'total_amount_cents',
        'taxes_amount_cents' => 'taxes_amount_cents',
        'taxes_rate' => 'taxes_rate',
        'sub_total_excluding_taxes_amount_cents' => 'sub_total_excluding_taxes_amount_cents',
        'balance_amount_cents' => 'balance_amount_cents',
        'credit_amount_cents' => 'credit_amount_cents',
        'refund_amount_cents' => 'refund_amount_cents',
        'coupons_adjustment_amount_cents' => 'coupons_adjustment_amount_cents',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'file_url' => 'file_url',
        'items' => 'items',
        'applied_taxes' => 'applied_taxes',
        'self_billed' => 'self_billed',
        'error_details' => 'error_details',
        'customer' => 'customer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lago_id' => 'setLagoId',
        'billing_entity_code' => 'setBillingEntityCode',
        'sequential_id' => 'setSequentialId',
        'number' => 'setNumber',
        'lago_invoice_id' => 'setLagoInvoiceId',
        'invoice_number' => 'setInvoiceNumber',
        'issuing_date' => 'setIssuingDate',
        'credit_status' => 'setCreditStatus',
        'refund_status' => 'setRefundStatus',
        'reason' => 'setReason',
        'description' => 'setDescription',
        'currency' => 'setCurrency',
        'total_amount_cents' => 'setTotalAmountCents',
        'taxes_amount_cents' => 'setTaxesAmountCents',
        'taxes_rate' => 'setTaxesRate',
        'sub_total_excluding_taxes_amount_cents' => 'setSubTotalExcludingTaxesAmountCents',
        'balance_amount_cents' => 'setBalanceAmountCents',
        'credit_amount_cents' => 'setCreditAmountCents',
        'refund_amount_cents' => 'setRefundAmountCents',
        'coupons_adjustment_amount_cents' => 'setCouponsAdjustmentAmountCents',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'file_url' => 'setFileUrl',
        'items' => 'setItems',
        'applied_taxes' => 'setAppliedTaxes',
        'self_billed' => 'setSelfBilled',
        'error_details' => 'setErrorDetails',
        'customer' => 'setCustomer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lago_id' => 'getLagoId',
        'billing_entity_code' => 'getBillingEntityCode',
        'sequential_id' => 'getSequentialId',
        'number' => 'getNumber',
        'lago_invoice_id' => 'getLagoInvoiceId',
        'invoice_number' => 'getInvoiceNumber',
        'issuing_date' => 'getIssuingDate',
        'credit_status' => 'getCreditStatus',
        'refund_status' => 'getRefundStatus',
        'reason' => 'getReason',
        'description' => 'getDescription',
        'currency' => 'getCurrency',
        'total_amount_cents' => 'getTotalAmountCents',
        'taxes_amount_cents' => 'getTaxesAmountCents',
        'taxes_rate' => 'getTaxesRate',
        'sub_total_excluding_taxes_amount_cents' => 'getSubTotalExcludingTaxesAmountCents',
        'balance_amount_cents' => 'getBalanceAmountCents',
        'credit_amount_cents' => 'getCreditAmountCents',
        'refund_amount_cents' => 'getRefundAmountCents',
        'coupons_adjustment_amount_cents' => 'getCouponsAdjustmentAmountCents',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'file_url' => 'getFileUrl',
        'items' => 'getItems',
        'applied_taxes' => 'getAppliedTaxes',
        'self_billed' => 'getSelfBilled',
        'error_details' => 'getErrorDetails',
        'customer' => 'getCustomer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CREDIT_STATUS_AVAILABLE = 'available';
    public const CREDIT_STATUS_CONSUMED = 'consumed';
    public const CREDIT_STATUS_VOIDED = 'voided';
    public const REFUND_STATUS_PENDING = 'pending';
    public const REFUND_STATUS_SUCCEEDED = 'succeeded';
    public const REFUND_STATUS_FAILED = 'failed';
    public const REASON_DUPLICATED_CHARGE = 'duplicated_charge';
    public const REASON_PRODUCT_UNSATISFACTORY = 'product_unsatisfactory';
    public const REASON_ORDER_CHANGE = 'order_change';
    public const REASON_ORDER_CANCELLATION = 'order_cancellation';
    public const REASON_FRAUDULENT_CHARGE = 'fraudulent_charge';
    public const REASON_OTHER = 'other';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreditStatusAllowableValues()
    {
        return [
            self::CREDIT_STATUS_AVAILABLE,
            self::CREDIT_STATUS_CONSUMED,
            self::CREDIT_STATUS_VOIDED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRefundStatusAllowableValues()
    {
        return [
            self::REFUND_STATUS_PENDING,
            self::REFUND_STATUS_SUCCEEDED,
            self::REFUND_STATUS_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_DUPLICATED_CHARGE,
            self::REASON_PRODUCT_UNSATISFACTORY,
            self::REASON_ORDER_CHANGE,
            self::REASON_ORDER_CANCELLATION,
            self::REASON_FRAUDULENT_CHARGE,
            self::REASON_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('lago_id', $data ?? [], null);
        $this->setIfExists('billing_entity_code', $data ?? [], null);
        $this->setIfExists('sequential_id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('lago_invoice_id', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('issuing_date', $data ?? [], null);
        $this->setIfExists('credit_status', $data ?? [], null);
        $this->setIfExists('refund_status', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('total_amount_cents', $data ?? [], null);
        $this->setIfExists('taxes_amount_cents', $data ?? [], null);
        $this->setIfExists('taxes_rate', $data ?? [], null);
        $this->setIfExists('sub_total_excluding_taxes_amount_cents', $data ?? [], null);
        $this->setIfExists('balance_amount_cents', $data ?? [], null);
        $this->setIfExists('credit_amount_cents', $data ?? [], null);
        $this->setIfExists('refund_amount_cents', $data ?? [], null);
        $this->setIfExists('coupons_adjustment_amount_cents', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('file_url', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('applied_taxes', $data ?? [], null);
        $this->setIfExists('self_billed', $data ?? [], null);
        $this->setIfExists('error_details', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lago_id'] === null) {
            $invalidProperties[] = "'lago_id' can't be null";
        }
        if ($this->container['billing_entity_code'] === null) {
            $invalidProperties[] = "'billing_entity_code' can't be null";
        }
        if ($this->container['sequential_id'] === null) {
            $invalidProperties[] = "'sequential_id' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['lago_invoice_id'] === null) {
            $invalidProperties[] = "'lago_invoice_id' can't be null";
        }
        if ($this->container['invoice_number'] === null) {
            $invalidProperties[] = "'invoice_number' can't be null";
        }
        if ($this->container['issuing_date'] === null) {
            $invalidProperties[] = "'issuing_date' can't be null";
        }
        $allowedValues = $this->getCreditStatusAllowableValues();
        if (!is_null($this->container['credit_status']) && !in_array($this->container['credit_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'credit_status', must be one of '%s'",
                $this->container['credit_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRefundStatusAllowableValues();
        if (!is_null($this->container['refund_status']) && !in_array($this->container['refund_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'refund_status', must be one of '%s'",
                $this->container['refund_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reason', must be one of '%s'",
                $this->container['reason'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['total_amount_cents'] === null) {
            $invalidProperties[] = "'total_amount_cents' can't be null";
        }
        if ($this->container['taxes_amount_cents'] === null) {
            $invalidProperties[] = "'taxes_amount_cents' can't be null";
        }
        if ($this->container['taxes_rate'] === null) {
            $invalidProperties[] = "'taxes_rate' can't be null";
        }
        if ($this->container['sub_total_excluding_taxes_amount_cents'] === null) {
            $invalidProperties[] = "'sub_total_excluding_taxes_amount_cents' can't be null";
        }
        if ($this->container['balance_amount_cents'] === null) {
            $invalidProperties[] = "'balance_amount_cents' can't be null";
        }
        if ($this->container['credit_amount_cents'] === null) {
            $invalidProperties[] = "'credit_amount_cents' can't be null";
        }
        if ($this->container['refund_amount_cents'] === null) {
            $invalidProperties[] = "'refund_amount_cents' can't be null";
        }
        if ($this->container['coupons_adjustment_amount_cents'] === null) {
            $invalidProperties[] = "'coupons_adjustment_amount_cents' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lago_id
     *
     * @return string
     */
    public function getLagoId()
    {
        return $this->container['lago_id'];
    }

    /**
     * Sets lago_id
     *
     * @param string $lago_id The credit note unique identifier, created by Lago.
     *
     * @return self
     */
    public function setLagoId($lago_id)
    {
        if (is_null($lago_id)) {
            throw new \InvalidArgumentException('non-nullable lago_id cannot be null');
        }
        $this->container['lago_id'] = $lago_id;

        return $this;
    }

    /**
     * Gets billing_entity_code
     *
     * @return string
     */
    public function getBillingEntityCode()
    {
        return $this->container['billing_entity_code'];
    }

    /**
     * Sets billing_entity_code
     *
     * @param string $billing_entity_code The unique code of the billing entity associated with the credit note.
     *
     * @return self
     */
    public function setBillingEntityCode($billing_entity_code)
    {
        if (is_null($billing_entity_code)) {
            throw new \InvalidArgumentException('non-nullable billing_entity_code cannot be null');
        }
        $this->container['billing_entity_code'] = $billing_entity_code;

        return $this;
    }

    /**
     * Gets sequential_id
     *
     * @return int
     */
    public function getSequentialId()
    {
        return $this->container['sequential_id'];
    }

    /**
     * Sets sequential_id
     *
     * @param int $sequential_id The sequential identifier of the credit note, specifically scoped on the associated invoice. It provides a unique numerical identifier for the credit note within the context of the invoice.
     *
     * @return self
     */
    public function setSequentialId($sequential_id)
    {
        if (is_null($sequential_id)) {
            throw new \InvalidArgumentException('non-nullable sequential_id cannot be null');
        }
        $this->container['sequential_id'] = $sequential_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number The credit note unique number.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets lago_invoice_id
     *
     * @return string
     */
    public function getLagoInvoiceId()
    {
        return $this->container['lago_invoice_id'];
    }

    /**
     * Sets lago_invoice_id
     *
     * @param string $lago_invoice_id Unique identifier assigned to the invoice that the credit note belongs to
     *
     * @return self
     */
    public function setLagoInvoiceId($lago_invoice_id)
    {
        if (is_null($lago_invoice_id)) {
            throw new \InvalidArgumentException('non-nullable lago_invoice_id cannot be null');
        }
        $this->container['lago_invoice_id'] = $lago_invoice_id;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number The invoice unique number, related to the credit note.
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets issuing_date
     *
     * @return \DateTime
     */
    public function getIssuingDate()
    {
        return $this->container['issuing_date'];
    }

    /**
     * Sets issuing_date
     *
     * @param \DateTime $issuing_date The date of creation of the credit note. It follows the ISO 8601 date format and provides the specific date when the credit note was created.
     *
     * @return self
     */
    public function setIssuingDate($issuing_date)
    {
        if (is_null($issuing_date)) {
            throw new \InvalidArgumentException('non-nullable issuing_date cannot be null');
        }
        $this->container['issuing_date'] = $issuing_date;

        return $this;
    }

    /**
     * Gets credit_status
     *
     * @return string|null
     */
    public function getCreditStatus()
    {
        return $this->container['credit_status'];
    }

    /**
     * Sets credit_status
     *
     * @param string|null $credit_status The status of the credit portion of the credit note. It indicates the current state or condition of the credit amount associated with the credit note. The possible values for this field are:  - `available`: this status indicates that an amount remains available for future usage. The credit can be applied towards future transactions or invoices. - `consumed`: this status indicates that the credit amount has been fully consumed. The remaining amount is 0, indicating that the credit has been utilized in its entirety. - `voided`: this status indicates that the remaining amount of the credit cannot be used any further. The credit has been voided and is no longer available for application or redemption.
     *
     * @return self
     */
    public function setCreditStatus($credit_status)
    {
        if (is_null($credit_status)) {
            array_push($this->openAPINullablesSetToNull, 'credit_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credit_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getCreditStatusAllowableValues();
        if (!is_null($credit_status) && !in_array($credit_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'credit_status', must be one of '%s'",
                    $credit_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['credit_status'] = $credit_status;

        return $this;
    }

    /**
     * Gets refund_status
     *
     * @return string|null
     */
    public function getRefundStatus()
    {
        return $this->container['refund_status'];
    }

    /**
     * Sets refund_status
     *
     * @param string|null $refund_status The status of the refund portion of the credit note. It indicates the current state or condition of the refund associated with the credit note. The possible values for this field are:  - `pending`: this status indicates that the refund is pending execution. The refund request has been initiated but has not been processed or completed yet. - `succeeded`: this status indicates that the refund has been successfully executed. The refund amount has been processed and returned to the customer or the designated recipient. - `failed`: this status indicates that the refund failed to execute. The refund request encountered an error or unsuccessful processing, and the refund amount could not be returned.
     *
     * @return self
     */
    public function setRefundStatus($refund_status)
    {
        if (is_null($refund_status)) {
            array_push($this->openAPINullablesSetToNull, 'refund_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRefundStatusAllowableValues();
        if (!is_null($refund_status) && !in_array($refund_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'refund_status', must be one of '%s'",
                    $refund_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['refund_status'] = $refund_status;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason The reason of the credit note creation. Possible values are `duplicated_charge`, `product_unsatisfactory`, `order_change`, `order_cancellation`, `fraudulent_charge` or `other`.
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $allowedValues = $this->getReasonAllowableValues();
        if (!in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reason', must be one of '%s'",
                    $reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the credit note.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Lago\LagoPhpClient\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Lago\LagoPhpClient\Model\Currency $currency The currency of the credit note.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets total_amount_cents
     *
     * @return int
     */
    public function getTotalAmountCents()
    {
        return $this->container['total_amount_cents'];
    }

    /**
     * Sets total_amount_cents
     *
     * @param int $total_amount_cents The total amount of the credit note, expressed in cents.
     *
     * @return self
     */
    public function setTotalAmountCents($total_amount_cents)
    {
        if (is_null($total_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable total_amount_cents cannot be null');
        }
        $this->container['total_amount_cents'] = $total_amount_cents;

        return $this;
    }

    /**
     * Gets taxes_amount_cents
     *
     * @return int
     */
    public function getTaxesAmountCents()
    {
        return $this->container['taxes_amount_cents'];
    }

    /**
     * Sets taxes_amount_cents
     *
     * @param int $taxes_amount_cents The tax amount of the credit note, expressed in cents.
     *
     * @return self
     */
    public function setTaxesAmountCents($taxes_amount_cents)
    {
        if (is_null($taxes_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable taxes_amount_cents cannot be null');
        }
        $this->container['taxes_amount_cents'] = $taxes_amount_cents;

        return $this;
    }

    /**
     * Gets taxes_rate
     *
     * @return float
     */
    public function getTaxesRate()
    {
        return $this->container['taxes_rate'];
    }

    /**
     * Sets taxes_rate
     *
     * @param float $taxes_rate The tax rate associated with this specific credit note.
     *
     * @return self
     */
    public function setTaxesRate($taxes_rate)
    {
        if (is_null($taxes_rate)) {
            throw new \InvalidArgumentException('non-nullable taxes_rate cannot be null');
        }
        $this->container['taxes_rate'] = $taxes_rate;

        return $this;
    }

    /**
     * Gets sub_total_excluding_taxes_amount_cents
     *
     * @return int
     */
    public function getSubTotalExcludingTaxesAmountCents()
    {
        return $this->container['sub_total_excluding_taxes_amount_cents'];
    }

    /**
     * Sets sub_total_excluding_taxes_amount_cents
     *
     * @param int $sub_total_excluding_taxes_amount_cents The subtotal of the credit note excluding any applicable taxes, expressed in cents.
     *
     * @return self
     */
    public function setSubTotalExcludingTaxesAmountCents($sub_total_excluding_taxes_amount_cents)
    {
        if (is_null($sub_total_excluding_taxes_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable sub_total_excluding_taxes_amount_cents cannot be null');
        }
        $this->container['sub_total_excluding_taxes_amount_cents'] = $sub_total_excluding_taxes_amount_cents;

        return $this;
    }

    /**
     * Gets balance_amount_cents
     *
     * @return int
     */
    public function getBalanceAmountCents()
    {
        return $this->container['balance_amount_cents'];
    }

    /**
     * Sets balance_amount_cents
     *
     * @param int $balance_amount_cents The remaining credit note amount, expressed in cents.
     *
     * @return self
     */
    public function setBalanceAmountCents($balance_amount_cents)
    {
        if (is_null($balance_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable balance_amount_cents cannot be null');
        }
        $this->container['balance_amount_cents'] = $balance_amount_cents;

        return $this;
    }

    /**
     * Gets credit_amount_cents
     *
     * @return int
     */
    public function getCreditAmountCents()
    {
        return $this->container['credit_amount_cents'];
    }

    /**
     * Sets credit_amount_cents
     *
     * @param int $credit_amount_cents The credited amount of the credit note, expressed in cents.
     *
     * @return self
     */
    public function setCreditAmountCents($credit_amount_cents)
    {
        if (is_null($credit_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable credit_amount_cents cannot be null');
        }
        $this->container['credit_amount_cents'] = $credit_amount_cents;

        return $this;
    }

    /**
     * Gets refund_amount_cents
     *
     * @return int
     */
    public function getRefundAmountCents()
    {
        return $this->container['refund_amount_cents'];
    }

    /**
     * Sets refund_amount_cents
     *
     * @param int $refund_amount_cents The refunded amount of the credit note, expressed in cents.
     *
     * @return self
     */
    public function setRefundAmountCents($refund_amount_cents)
    {
        if (is_null($refund_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable refund_amount_cents cannot be null');
        }
        $this->container['refund_amount_cents'] = $refund_amount_cents;

        return $this;
    }

    /**
     * Gets coupons_adjustment_amount_cents
     *
     * @return int
     */
    public function getCouponsAdjustmentAmountCents()
    {
        return $this->container['coupons_adjustment_amount_cents'];
    }

    /**
     * Sets coupons_adjustment_amount_cents
     *
     * @param int $coupons_adjustment_amount_cents The pro-rated amount of the coupons applied to the source invoice.
     *
     * @return self
     */
    public function setCouponsAdjustmentAmountCents($coupons_adjustment_amount_cents)
    {
        if (is_null($coupons_adjustment_amount_cents)) {
            throw new \InvalidArgumentException('non-nullable coupons_adjustment_amount_cents cannot be null');
        }
        $this->container['coupons_adjustment_amount_cents'] = $coupons_adjustment_amount_cents;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date when the credit note was created. It is expressed in Coordinated Universal Time (UTC).
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The date when the credit note was last updated. It is expressed in Coordinated Universal Time (UTC).
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets file_url
     *
     * @return string|null
     */
    public function getFileUrl()
    {
        return $this->container['file_url'];
    }

    /**
     * Sets file_url
     *
     * @param string|null $file_url The PDF file of the credit note.
     *
     * @return self
     */
    public function setFileUrl($file_url)
    {
        if (is_null($file_url)) {
            throw new \InvalidArgumentException('non-nullable file_url cannot be null');
        }
        $this->container['file_url'] = $file_url;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Lago\LagoPhpClient\Model\CreditNoteItemObject[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Lago\LagoPhpClient\Model\CreditNoteItemObject[]|null $items Array of credit note's items.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets applied_taxes
     *
     * @return \Lago\LagoPhpClient\Model\CreditNoteAppliedTaxObject[]|null
     */
    public function getAppliedTaxes()
    {
        return $this->container['applied_taxes'];
    }

    /**
     * Sets applied_taxes
     *
     * @param \Lago\LagoPhpClient\Model\CreditNoteAppliedTaxObject[]|null $applied_taxes applied_taxes
     *
     * @return self
     */
    public function setAppliedTaxes($applied_taxes)
    {
        if (is_null($applied_taxes)) {
            throw new \InvalidArgumentException('non-nullable applied_taxes cannot be null');
        }
        $this->container['applied_taxes'] = $applied_taxes;

        return $this;
    }

    /**
     * Gets self_billed
     *
     * @return bool|null
     */
    public function getSelfBilled()
    {
        return $this->container['self_billed'];
    }

    /**
     * Sets self_billed
     *
     * @param bool|null $self_billed Indicates if the credit note belongs to self-billed invoice. Self-billing is a process where an organization creates the invoice on behalf of the partner.
     *
     * @return self
     */
    public function setSelfBilled($self_billed)
    {
        if (is_null($self_billed)) {
            throw new \InvalidArgumentException('non-nullable self_billed cannot be null');
        }
        $this->container['self_billed'] = $self_billed;

        return $this;
    }

    /**
     * Gets error_details
     *
     * @return \Lago\LagoPhpClient\Model\CreditNoteErrorDetailsObject[]|null
     */
    public function getErrorDetails()
    {
        return $this->container['error_details'];
    }

    /**
     * Sets error_details
     *
     * @param \Lago\LagoPhpClient\Model\CreditNoteErrorDetailsObject[]|null $error_details error_details
     *
     * @return self
     */
    public function setErrorDetails($error_details)
    {
        if (is_null($error_details)) {
            throw new \InvalidArgumentException('non-nullable error_details cannot be null');
        }
        $this->container['error_details'] = $error_details;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Lago\LagoPhpClient\Model\CustomerBaseObject|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Lago\LagoPhpClient\Model\CustomerBaseObject|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


