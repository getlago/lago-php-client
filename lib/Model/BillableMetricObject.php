<?php
/**
 * BillableMetricObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * BillableMetricObject Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillableMetricObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BillableMetricObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lago_id' => 'string',
        'name' => 'string',
        'code' => 'string',
        'description' => 'string',
        'recurring' => 'bool',
        'rounding_function' => 'string',
        'rounding_precision' => 'int',
        'created_at' => '\DateTime',
        'expression' => 'string',
        'field_name' => 'string',
        'aggregation_type' => 'string',
        'weighted_interval' => 'string',
        'filters' => '\Lago\LagoPhpClient\Model\BillableMetricFilterObject[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lago_id' => 'uuid',
        'name' => null,
        'code' => null,
        'description' => null,
        'recurring' => null,
        'rounding_function' => null,
        'rounding_precision' => null,
        'created_at' => 'date-time',
        'expression' => null,
        'field_name' => null,
        'aggregation_type' => null,
        'weighted_interval' => null,
        'filters' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lago_id' => false,
        'name' => false,
        'code' => false,
        'description' => true,
        'recurring' => false,
        'rounding_function' => true,
        'rounding_precision' => true,
        'created_at' => false,
        'expression' => false,
        'field_name' => true,
        'aggregation_type' => false,
        'weighted_interval' => true,
        'filters' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lago_id' => 'lago_id',
        'name' => 'name',
        'code' => 'code',
        'description' => 'description',
        'recurring' => 'recurring',
        'rounding_function' => 'rounding_function',
        'rounding_precision' => 'rounding_precision',
        'created_at' => 'created_at',
        'expression' => 'expression',
        'field_name' => 'field_name',
        'aggregation_type' => 'aggregation_type',
        'weighted_interval' => 'weighted_interval',
        'filters' => 'filters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lago_id' => 'setLagoId',
        'name' => 'setName',
        'code' => 'setCode',
        'description' => 'setDescription',
        'recurring' => 'setRecurring',
        'rounding_function' => 'setRoundingFunction',
        'rounding_precision' => 'setRoundingPrecision',
        'created_at' => 'setCreatedAt',
        'expression' => 'setExpression',
        'field_name' => 'setFieldName',
        'aggregation_type' => 'setAggregationType',
        'weighted_interval' => 'setWeightedInterval',
        'filters' => 'setFilters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lago_id' => 'getLagoId',
        'name' => 'getName',
        'code' => 'getCode',
        'description' => 'getDescription',
        'recurring' => 'getRecurring',
        'rounding_function' => 'getRoundingFunction',
        'rounding_precision' => 'getRoundingPrecision',
        'created_at' => 'getCreatedAt',
        'expression' => 'getExpression',
        'field_name' => 'getFieldName',
        'aggregation_type' => 'getAggregationType',
        'weighted_interval' => 'getWeightedInterval',
        'filters' => 'getFilters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ROUNDING_FUNCTION_CEIL = 'ceil';
    public const ROUNDING_FUNCTION_FLOOR = 'floor';
    public const ROUNDING_FUNCTION_ROUND = 'round';
    public const AGGREGATION_TYPE_COUNT_AGG = 'count_agg';
    public const AGGREGATION_TYPE_SUM_AGG = 'sum_agg';
    public const AGGREGATION_TYPE_MAX_AGG = 'max_agg';
    public const AGGREGATION_TYPE_UNIQUE_COUNT_AGG = 'unique_count_agg';
    public const AGGREGATION_TYPE_WEIGHTED_SUM_AGG = 'weighted_sum_agg';
    public const AGGREGATION_TYPE_LATEST_AGG = 'latest_agg';
    public const WEIGHTED_INTERVAL_SECONDS = 'seconds';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoundingFunctionAllowableValues()
    {
        return [
            self::ROUNDING_FUNCTION_CEIL,
            self::ROUNDING_FUNCTION_FLOOR,
            self::ROUNDING_FUNCTION_ROUND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAggregationTypeAllowableValues()
    {
        return [
            self::AGGREGATION_TYPE_COUNT_AGG,
            self::AGGREGATION_TYPE_SUM_AGG,
            self::AGGREGATION_TYPE_MAX_AGG,
            self::AGGREGATION_TYPE_UNIQUE_COUNT_AGG,
            self::AGGREGATION_TYPE_WEIGHTED_SUM_AGG,
            self::AGGREGATION_TYPE_LATEST_AGG,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeightedIntervalAllowableValues()
    {
        return [
            self::WEIGHTED_INTERVAL_SECONDS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('lago_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('recurring', $data ?? [], null);
        $this->setIfExists('rounding_function', $data ?? [], null);
        $this->setIfExists('rounding_precision', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('expression', $data ?? [], null);
        $this->setIfExists('field_name', $data ?? [], null);
        $this->setIfExists('aggregation_type', $data ?? [], null);
        $this->setIfExists('weighted_interval', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lago_id'] === null) {
            $invalidProperties[] = "'lago_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['recurring'] === null) {
            $invalidProperties[] = "'recurring' can't be null";
        }
        $allowedValues = $this->getRoundingFunctionAllowableValues();
        if (!is_null($this->container['rounding_function']) && !in_array($this->container['rounding_function'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rounding_function', must be one of '%s'",
                $this->container['rounding_function'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['aggregation_type'] === null) {
            $invalidProperties[] = "'aggregation_type' can't be null";
        }
        $allowedValues = $this->getAggregationTypeAllowableValues();
        if (!is_null($this->container['aggregation_type']) && !in_array($this->container['aggregation_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'aggregation_type', must be one of '%s'",
                $this->container['aggregation_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWeightedIntervalAllowableValues();
        if (!is_null($this->container['weighted_interval']) && !in_array($this->container['weighted_interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'weighted_interval', must be one of '%s'",
                $this->container['weighted_interval'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lago_id
     *
     * @return string
     */
    public function getLagoId()
    {
        return $this->container['lago_id'];
    }

    /**
     * Sets lago_id
     *
     * @param string $lago_id Unique identifier of the billable metric created by Lago.
     *
     * @return self
     */
    public function setLagoId($lago_id)
    {
        if (is_null($lago_id)) {
            throw new \InvalidArgumentException('non-nullable lago_id cannot be null');
        }
        $this->container['lago_id'] = $lago_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the billable metric.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Unique code used to identify the billable metric associated with the API request. This code associates each event with the correct metric.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Internal description of the billable metric.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return bool
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param bool $recurring Defines if the billable metric is persisted billing period over billing period.  - If set to `true`: the accumulated number of units calculated from the previous billing period is persisted to the next billing period. - If set to `false`: the accumulated number of units is reset to 0 at the end of the billing period. - If not defined in the request, default value is `false`.
     *
     * @return self
     */
    public function setRecurring($recurring)
    {
        if (is_null($recurring)) {
            throw new \InvalidArgumentException('non-nullable recurring cannot be null');
        }
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets rounding_function
     *
     * @return string|null
     */
    public function getRoundingFunction()
    {
        return $this->container['rounding_function'];
    }

    /**
     * Sets rounding_function
     *
     * @param string|null $rounding_function Refers to the numeric value or mathematical expression that will be rounded based on the calculated number of billing units. Possible values are `round`, `ceil` and `floor`.
     *
     * @return self
     */
    public function setRoundingFunction($rounding_function)
    {
        if (is_null($rounding_function)) {
            array_push($this->openAPINullablesSetToNull, 'rounding_function');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rounding_function', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRoundingFunctionAllowableValues();
        if (!is_null($rounding_function) && !in_array($rounding_function, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rounding_function', must be one of '%s'",
                    $rounding_function,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rounding_function'] = $rounding_function;

        return $this;
    }

    /**
     * Gets rounding_precision
     *
     * @return int|null
     */
    public function getRoundingPrecision()
    {
        return $this->container['rounding_precision'];
    }

    /**
     * Sets rounding_precision
     *
     * @param int|null $rounding_precision Specifies the number of decimal places to which the `rounding_function` will be rounded. It can be a positive or negative value.
     *
     * @return self
     */
    public function setRoundingPrecision($rounding_precision)
    {
        if (is_null($rounding_precision)) {
            array_push($this->openAPINullablesSetToNull, 'rounding_precision');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rounding_precision', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rounding_precision'] = $rounding_precision;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date of the billable metric.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets expression
     *
     * @return string|null
     */
    public function getExpression()
    {
        return $this->container['expression'];
    }

    /**
     * Sets expression
     *
     * @param string|null $expression Expression used to calculate the event units. The expression is evalutated for each event and the result is then used to calculate the total aggregated units.
     *
     * @return self
     */
    public function setExpression($expression)
    {
        if (is_null($expression)) {
            throw new \InvalidArgumentException('non-nullable expression cannot be null');
        }
        $this->container['expression'] = $expression;

        return $this;
    }

    /**
     * Gets field_name
     *
     * @return string|null
     */
    public function getFieldName()
    {
        return $this->container['field_name'];
    }

    /**
     * Sets field_name
     *
     * @param string|null $field_name Property of the billable metric used for aggregating usage data. This field is not required for `count_agg`.
     *
     * @return self
     */
    public function setFieldName($field_name)
    {
        if (is_null($field_name)) {
            array_push($this->openAPINullablesSetToNull, 'field_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('field_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['field_name'] = $field_name;

        return $this;
    }

    /**
     * Gets aggregation_type
     *
     * @return string
     */
    public function getAggregationType()
    {
        return $this->container['aggregation_type'];
    }

    /**
     * Sets aggregation_type
     *
     * @param string $aggregation_type Aggregation method used to compute usage for this billable metric.
     *
     * @return self
     */
    public function setAggregationType($aggregation_type)
    {
        if (is_null($aggregation_type)) {
            throw new \InvalidArgumentException('non-nullable aggregation_type cannot be null');
        }
        $allowedValues = $this->getAggregationTypeAllowableValues();
        if (!in_array($aggregation_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'aggregation_type', must be one of '%s'",
                    $aggregation_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['aggregation_type'] = $aggregation_type;

        return $this;
    }

    /**
     * Gets weighted_interval
     *
     * @return string|null
     */
    public function getWeightedInterval()
    {
        return $this->container['weighted_interval'];
    }

    /**
     * Sets weighted_interval
     *
     * @param string|null $weighted_interval Parameter exclusively utilized in conjunction with the `weighted_sum` aggregation type. It serves to adjust the aggregation result by assigning weights and proration to the result based on time intervals. When this field is not provided, the default time interval is assumed to be in `seconds`.
     *
     * @return self
     */
    public function setWeightedInterval($weighted_interval)
    {
        if (is_null($weighted_interval)) {
            array_push($this->openAPINullablesSetToNull, 'weighted_interval');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weighted_interval', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getWeightedIntervalAllowableValues();
        if (!is_null($weighted_interval) && !in_array($weighted_interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'weighted_interval', must be one of '%s'",
                    $weighted_interval,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weighted_interval'] = $weighted_interval;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Lago\LagoPhpClient\Model\BillableMetricFilterObject[]|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Lago\LagoPhpClient\Model\BillableMetricFilterObject[]|null $filters filters
     *
     * @return self
     */
    public function setFilters($filters)
    {
        if (is_null($filters)) {
            throw new \InvalidArgumentException('non-nullable filters cannot be null');
        }
        $this->container['filters'] = $filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


