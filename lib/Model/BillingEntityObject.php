<?php
/**
 * BillingEntityObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * BillingEntityObject Class Doc Comment
 *
 * @category Class
 * @description Billing entity object
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillingEntityObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BillingEntityObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lago_id' => 'string',
        'code' => 'string',
        'name' => 'string',
        'default_currency' => '\Lago\LagoPhpClient\Model\Currency',
        'document_locale' => 'string',
        'document_numbering' => 'string',
        'document_number_prefix' => 'string',
        'finalize_zero_amount_invoice' => 'bool',
        'invoice_footer' => 'string',
        'invoice_grace_period' => 'int',
        'is_default' => 'bool',
        'net_payment_term' => 'int',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'country' => '\Lago\LagoPhpClient\Model\Country',
        'zipcode' => 'string',
        'email' => 'string',
        'legal_name' => 'string',
        'legal_number' => 'string',
        'tax_identification_number' => 'string',
        'timezone' => '\Lago\LagoPhpClient\Model\Timezone',
        'email_settings' => 'string[]',
        'eu_tax_management' => 'bool',
        'logo_url' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lago_id' => 'uuid',
        'code' => null,
        'name' => null,
        'default_currency' => null,
        'document_locale' => null,
        'document_numbering' => null,
        'document_number_prefix' => null,
        'finalize_zero_amount_invoice' => null,
        'invoice_footer' => null,
        'invoice_grace_period' => null,
        'is_default' => null,
        'net_payment_term' => null,
        'address_line1' => null,
        'address_line2' => null,
        'city' => null,
        'state' => null,
        'country' => null,
        'zipcode' => null,
        'email' => 'email',
        'legal_name' => null,
        'legal_number' => null,
        'tax_identification_number' => null,
        'timezone' => null,
        'email_settings' => null,
        'eu_tax_management' => null,
        'logo_url' => 'uri',
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lago_id' => false,
        'code' => false,
        'name' => false,
        'default_currency' => false,
        'document_locale' => false,
        'document_numbering' => false,
        'document_number_prefix' => true,
        'finalize_zero_amount_invoice' => false,
        'invoice_footer' => true,
        'invoice_grace_period' => false,
        'is_default' => false,
        'net_payment_term' => false,
        'address_line1' => true,
        'address_line2' => true,
        'city' => true,
        'state' => true,
        'country' => false,
        'zipcode' => true,
        'email' => true,
        'legal_name' => true,
        'legal_number' => true,
        'tax_identification_number' => true,
        'timezone' => false,
        'email_settings' => false,
        'eu_tax_management' => false,
        'logo_url' => true,
        'created_at' => false,
        'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lago_id' => 'lago_id',
        'code' => 'code',
        'name' => 'name',
        'default_currency' => 'default_currency',
        'document_locale' => 'document_locale',
        'document_numbering' => 'document_numbering',
        'document_number_prefix' => 'document_number_prefix',
        'finalize_zero_amount_invoice' => 'finalize_zero_amount_invoice',
        'invoice_footer' => 'invoice_footer',
        'invoice_grace_period' => 'invoice_grace_period',
        'is_default' => 'is_default',
        'net_payment_term' => 'net_payment_term',
        'address_line1' => 'address_line1',
        'address_line2' => 'address_line2',
        'city' => 'city',
        'state' => 'state',
        'country' => 'country',
        'zipcode' => 'zipcode',
        'email' => 'email',
        'legal_name' => 'legal_name',
        'legal_number' => 'legal_number',
        'tax_identification_number' => 'tax_identification_number',
        'timezone' => 'timezone',
        'email_settings' => 'email_settings',
        'eu_tax_management' => 'eu_tax_management',
        'logo_url' => 'logo_url',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lago_id' => 'setLagoId',
        'code' => 'setCode',
        'name' => 'setName',
        'default_currency' => 'setDefaultCurrency',
        'document_locale' => 'setDocumentLocale',
        'document_numbering' => 'setDocumentNumbering',
        'document_number_prefix' => 'setDocumentNumberPrefix',
        'finalize_zero_amount_invoice' => 'setFinalizeZeroAmountInvoice',
        'invoice_footer' => 'setInvoiceFooter',
        'invoice_grace_period' => 'setInvoiceGracePeriod',
        'is_default' => 'setIsDefault',
        'net_payment_term' => 'setNetPaymentTerm',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'city' => 'setCity',
        'state' => 'setState',
        'country' => 'setCountry',
        'zipcode' => 'setZipcode',
        'email' => 'setEmail',
        'legal_name' => 'setLegalName',
        'legal_number' => 'setLegalNumber',
        'tax_identification_number' => 'setTaxIdentificationNumber',
        'timezone' => 'setTimezone',
        'email_settings' => 'setEmailSettings',
        'eu_tax_management' => 'setEuTaxManagement',
        'logo_url' => 'setLogoUrl',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lago_id' => 'getLagoId',
        'code' => 'getCode',
        'name' => 'getName',
        'default_currency' => 'getDefaultCurrency',
        'document_locale' => 'getDocumentLocale',
        'document_numbering' => 'getDocumentNumbering',
        'document_number_prefix' => 'getDocumentNumberPrefix',
        'finalize_zero_amount_invoice' => 'getFinalizeZeroAmountInvoice',
        'invoice_footer' => 'getInvoiceFooter',
        'invoice_grace_period' => 'getInvoiceGracePeriod',
        'is_default' => 'getIsDefault',
        'net_payment_term' => 'getNetPaymentTerm',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'city' => 'getCity',
        'state' => 'getState',
        'country' => 'getCountry',
        'zipcode' => 'getZipcode',
        'email' => 'getEmail',
        'legal_name' => 'getLegalName',
        'legal_number' => 'getLegalNumber',
        'tax_identification_number' => 'getTaxIdentificationNumber',
        'timezone' => 'getTimezone',
        'email_settings' => 'getEmailSettings',
        'eu_tax_management' => 'getEuTaxManagement',
        'logo_url' => 'getLogoUrl',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DOCUMENT_NUMBERING_PER_CUSTOMER = 'per_customer';
    public const DOCUMENT_NUMBERING_PER_BILLING_ENTITY = 'per_billing_entity';
    public const EMAIL_SETTINGS_INVOICE_FINALIZED = 'invoice.finalized';
    public const EMAIL_SETTINGS_CREDIT_NOTE_CREATED = 'credit_note.created';
    public const EMAIL_SETTINGS_PAYMENT_RECEIPT_CREATED = 'payment_receipt.created';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentNumberingAllowableValues()
    {
        return [
            self::DOCUMENT_NUMBERING_PER_CUSTOMER,
            self::DOCUMENT_NUMBERING_PER_BILLING_ENTITY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmailSettingsAllowableValues()
    {
        return [
            self::EMAIL_SETTINGS_INVOICE_FINALIZED,
            self::EMAIL_SETTINGS_CREDIT_NOTE_CREATED,
            self::EMAIL_SETTINGS_PAYMENT_RECEIPT_CREATED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('lago_id', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('default_currency', $data ?? [], null);
        $this->setIfExists('document_locale', $data ?? [], null);
        $this->setIfExists('document_numbering', $data ?? [], null);
        $this->setIfExists('document_number_prefix', $data ?? [], null);
        $this->setIfExists('finalize_zero_amount_invoice', $data ?? [], null);
        $this->setIfExists('invoice_footer', $data ?? [], null);
        $this->setIfExists('invoice_grace_period', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('net_payment_term', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('zipcode', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('legal_name', $data ?? [], null);
        $this->setIfExists('legal_number', $data ?? [], null);
        $this->setIfExists('tax_identification_number', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('email_settings', $data ?? [], null);
        $this->setIfExists('eu_tax_management', $data ?? [], null);
        $this->setIfExists('logo_url', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lago_id'] === null) {
            $invalidProperties[] = "'lago_id' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['default_currency'] === null) {
            $invalidProperties[] = "'default_currency' can't be null";
        }
        if ($this->container['document_locale'] === null) {
            $invalidProperties[] = "'document_locale' can't be null";
        }
        if ($this->container['document_numbering'] === null) {
            $invalidProperties[] = "'document_numbering' can't be null";
        }
        $allowedValues = $this->getDocumentNumberingAllowableValues();
        if (!is_null($this->container['document_numbering']) && !in_array($this->container['document_numbering'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_numbering', must be one of '%s'",
                $this->container['document_numbering'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['finalize_zero_amount_invoice'] === null) {
            $invalidProperties[] = "'finalize_zero_amount_invoice' can't be null";
        }
        if ($this->container['invoice_grace_period'] === null) {
            $invalidProperties[] = "'invoice_grace_period' can't be null";
        }
        if ($this->container['net_payment_term'] === null) {
            $invalidProperties[] = "'net_payment_term' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lago_id
     *
     * @return string
     */
    public function getLagoId()
    {
        return $this->container['lago_id'];
    }

    /**
     * Sets lago_id
     *
     * @param string $lago_id A unique identifier for the billing entity in the Lago application
     *
     * @return self
     */
    public function setLagoId($lago_id)
    {
        if (is_null($lago_id)) {
            throw new \InvalidArgumentException('non-nullable lago_id cannot be null');
        }
        $this->container['lago_id'] = $lago_id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The unique code of the billing entity
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the billing entity
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets default_currency
     *
     * @return \Lago\LagoPhpClient\Model\Currency
     */
    public function getDefaultCurrency()
    {
        return $this->container['default_currency'];
    }

    /**
     * Sets default_currency
     *
     * @param \Lago\LagoPhpClient\Model\Currency $default_currency The default currency of the billing entity
     *
     * @return self
     */
    public function setDefaultCurrency($default_currency)
    {
        if (is_null($default_currency)) {
            throw new \InvalidArgumentException('non-nullable default_currency cannot be null');
        }
        $this->container['default_currency'] = $default_currency;

        return $this;
    }

    /**
     * Gets document_locale
     *
     * @return string
     */
    public function getDocumentLocale()
    {
        return $this->container['document_locale'];
    }

    /**
     * Sets document_locale
     *
     * @param string $document_locale The language of the documents generated for this billing entity
     *
     * @return self
     */
    public function setDocumentLocale($document_locale)
    {
        if (is_null($document_locale)) {
            throw new \InvalidArgumentException('non-nullable document_locale cannot be null');
        }
        $this->container['document_locale'] = $document_locale;

        return $this;
    }

    /**
     * Gets document_numbering
     *
     * @return string
     */
    public function getDocumentNumbering()
    {
        return $this->container['document_numbering'];
    }

    /**
     * Sets document_numbering
     *
     * @param string $document_numbering The type of document numbering for this billing entity: - `per_customer`: document numbers are unique per customer - `per_billing_entity`: document numbers are unique per billing entity
     *
     * @return self
     */
    public function setDocumentNumbering($document_numbering)
    {
        if (is_null($document_numbering)) {
            throw new \InvalidArgumentException('non-nullable document_numbering cannot be null');
        }
        $allowedValues = $this->getDocumentNumberingAllowableValues();
        if (!in_array($document_numbering, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_numbering', must be one of '%s'",
                    $document_numbering,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_numbering'] = $document_numbering;

        return $this;
    }

    /**
     * Gets document_number_prefix
     *
     * @return string|null
     */
    public function getDocumentNumberPrefix()
    {
        return $this->container['document_number_prefix'];
    }

    /**
     * Sets document_number_prefix
     *
     * @param string|null $document_number_prefix The prefix used in document numbers for this billing entity
     *
     * @return self
     */
    public function setDocumentNumberPrefix($document_number_prefix)
    {
        if (is_null($document_number_prefix)) {
            array_push($this->openAPINullablesSetToNull, 'document_number_prefix');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_number_prefix', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_number_prefix'] = $document_number_prefix;

        return $this;
    }

    /**
     * Gets finalize_zero_amount_invoice
     *
     * @return bool
     */
    public function getFinalizeZeroAmountInvoice()
    {
        return $this->container['finalize_zero_amount_invoice'];
    }

    /**
     * Sets finalize_zero_amount_invoice
     *
     * @param bool $finalize_zero_amount_invoice Whether to finalize invoices with zero amount for this billing entity
     *
     * @return self
     */
    public function setFinalizeZeroAmountInvoice($finalize_zero_amount_invoice)
    {
        if (is_null($finalize_zero_amount_invoice)) {
            throw new \InvalidArgumentException('non-nullable finalize_zero_amount_invoice cannot be null');
        }
        $this->container['finalize_zero_amount_invoice'] = $finalize_zero_amount_invoice;

        return $this;
    }

    /**
     * Gets invoice_footer
     *
     * @return string|null
     */
    public function getInvoiceFooter()
    {
        return $this->container['invoice_footer'];
    }

    /**
     * Sets invoice_footer
     *
     * @param string|null $invoice_footer The footer text to be displayed on invoices for this billing entity
     *
     * @return self
     */
    public function setInvoiceFooter($invoice_footer)
    {
        if (is_null($invoice_footer)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_footer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_footer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_footer'] = $invoice_footer;

        return $this;
    }

    /**
     * Gets invoice_grace_period
     *
     * @return int
     */
    public function getInvoiceGracePeriod()
    {
        return $this->container['invoice_grace_period'];
    }

    /**
     * Sets invoice_grace_period
     *
     * @param int $invoice_grace_period The grace period (in days) for invoice finalization
     *
     * @return self
     */
    public function setInvoiceGracePeriod($invoice_grace_period)
    {
        if (is_null($invoice_grace_period)) {
            throw new \InvalidArgumentException('non-nullable invoice_grace_period cannot be null');
        }
        $this->container['invoice_grace_period'] = $invoice_grace_period;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default Whether this billing entity is the default billing entity for the organization. Default billing entity will be used as fallback in services if no billing entity is specified when billing_entity is not provided. Default billing entity is the billing entity that will be used to generate invoices if no billing entity is specified when invoice is created. is the oldest active billing entity and this flag cannot be changed
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets net_payment_term
     *
     * @return int
     */
    public function getNetPaymentTerm()
    {
        return $this->container['net_payment_term'];
    }

    /**
     * Sets net_payment_term
     *
     * @param int $net_payment_term The net payment term (in days) for this billing entity
     *
     * @return self
     */
    public function setNetPaymentTerm($net_payment_term)
    {
        if (is_null($net_payment_term)) {
            throw new \InvalidArgumentException('non-nullable net_payment_term cannot be null');
        }
        $this->container['net_payment_term'] = $net_payment_term;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string|null $address_line1 The first line of the billing address
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            array_push($this->openAPINullablesSetToNull, 'address_line1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 The second line of the billing address
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            array_push($this->openAPINullablesSetToNull, 'address_line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The city of the billing address
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The state of the billing address
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            array_push($this->openAPINullablesSetToNull, 'state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Lago\LagoPhpClient\Model\Country|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \Lago\LagoPhpClient\Model\Country|null $country The country code of the billing address
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets zipcode
     *
     * @return string|null
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     *
     * @param string|null $zipcode The zipcode of the billing address
     *
     * @return self
     */
    public function setZipcode($zipcode)
    {
        if (is_null($zipcode)) {
            array_push($this->openAPINullablesSetToNull, 'zipcode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zipcode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of the billing entity
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return string|null
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string|null $legal_name The legal name of the billing entity
     *
     * @return self
     */
    public function setLegalName($legal_name)
    {
        if (is_null($legal_name)) {
            array_push($this->openAPINullablesSetToNull, 'legal_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets legal_number
     *
     * @return string|null
     */
    public function getLegalNumber()
    {
        return $this->container['legal_number'];
    }

    /**
     * Sets legal_number
     *
     * @param string|null $legal_number The legal registration number of the billing entity
     *
     * @return self
     */
    public function setLegalNumber($legal_number)
    {
        if (is_null($legal_number)) {
            array_push($this->openAPINullablesSetToNull, 'legal_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_number'] = $legal_number;

        return $this;
    }

    /**
     * Gets tax_identification_number
     *
     * @return string|null
     */
    public function getTaxIdentificationNumber()
    {
        return $this->container['tax_identification_number'];
    }

    /**
     * Sets tax_identification_number
     *
     * @param string|null $tax_identification_number The tax identification number of the billing entity
     *
     * @return self
     */
    public function setTaxIdentificationNumber($tax_identification_number)
    {
        if (is_null($tax_identification_number)) {
            array_push($this->openAPINullablesSetToNull, 'tax_identification_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_identification_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_identification_number'] = $tax_identification_number;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return \Lago\LagoPhpClient\Model\Timezone
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param \Lago\LagoPhpClient\Model\Timezone $timezone The timezone of the billing entity
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets email_settings
     *
     * @return string[]|null
     */
    public function getEmailSettings()
    {
        return $this->container['email_settings'];
    }

    /**
     * Sets email_settings
     *
     * @param string[]|null $email_settings The email notification settings for this billing entity
     *
     * @return self
     */
    public function setEmailSettings($email_settings)
    {
        if (is_null($email_settings)) {
            throw new \InvalidArgumentException('non-nullable email_settings cannot be null');
        }
        $allowedValues = $this->getEmailSettingsAllowableValues();
        if (array_diff($email_settings, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'email_settings', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['email_settings'] = $email_settings;

        return $this;
    }

    /**
     * Gets eu_tax_management
     *
     * @return bool|null
     */
    public function getEuTaxManagement()
    {
        return $this->container['eu_tax_management'];
    }

    /**
     * Sets eu_tax_management
     *
     * @param bool|null $eu_tax_management Whether EU tax management is enabled for this billing entity
     *
     * @return self
     */
    public function setEuTaxManagement($eu_tax_management)
    {
        if (is_null($eu_tax_management)) {
            throw new \InvalidArgumentException('non-nullable eu_tax_management cannot be null');
        }
        $this->container['eu_tax_management'] = $eu_tax_management;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url The URL of the billing entity's logo
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        if (is_null($logo_url)) {
            array_push($this->openAPINullablesSetToNull, 'logo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at The date and time when the billing entity was created
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at The date and time when the billing entity was last updated
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


