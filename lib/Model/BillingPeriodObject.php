<?php
/**
 * BillingPeriodObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * BillingPeriodObject Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BillingPeriodObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BillingPeriodObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lago_subscription_id' => 'string',
        'external_subscription_id' => 'string',
        'lago_plan_id' => 'string',
        'subscription_from_datetime' => '\DateTime',
        'subscription_to_datetime' => '\DateTime',
        'charges_from_datetime' => '\DateTime',
        'charges_to_datetime' => '\DateTime',
        'invoicing_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lago_subscription_id' => 'uuid',
        'external_subscription_id' => null,
        'lago_plan_id' => 'uuid',
        'subscription_from_datetime' => 'date-time',
        'subscription_to_datetime' => 'date-time',
        'charges_from_datetime' => 'date-time',
        'charges_to_datetime' => 'date-time',
        'invoicing_reason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lago_subscription_id' => false,
        'external_subscription_id' => false,
        'lago_plan_id' => false,
        'subscription_from_datetime' => false,
        'subscription_to_datetime' => false,
        'charges_from_datetime' => false,
        'charges_to_datetime' => false,
        'invoicing_reason' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lago_subscription_id' => 'lago_subscription_id',
        'external_subscription_id' => 'external_subscription_id',
        'lago_plan_id' => 'lago_plan_id',
        'subscription_from_datetime' => 'subscription_from_datetime',
        'subscription_to_datetime' => 'subscription_to_datetime',
        'charges_from_datetime' => 'charges_from_datetime',
        'charges_to_datetime' => 'charges_to_datetime',
        'invoicing_reason' => 'invoicing_reason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lago_subscription_id' => 'setLagoSubscriptionId',
        'external_subscription_id' => 'setExternalSubscriptionId',
        'lago_plan_id' => 'setLagoPlanId',
        'subscription_from_datetime' => 'setSubscriptionFromDatetime',
        'subscription_to_datetime' => 'setSubscriptionToDatetime',
        'charges_from_datetime' => 'setChargesFromDatetime',
        'charges_to_datetime' => 'setChargesToDatetime',
        'invoicing_reason' => 'setInvoicingReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lago_subscription_id' => 'getLagoSubscriptionId',
        'external_subscription_id' => 'getExternalSubscriptionId',
        'lago_plan_id' => 'getLagoPlanId',
        'subscription_from_datetime' => 'getSubscriptionFromDatetime',
        'subscription_to_datetime' => 'getSubscriptionToDatetime',
        'charges_from_datetime' => 'getChargesFromDatetime',
        'charges_to_datetime' => 'getChargesToDatetime',
        'invoicing_reason' => 'getInvoicingReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INVOICING_REASON_SUBSCRIPTION_STARTING = 'subscription_starting';
    public const INVOICING_REASON_SUBSCRIPTION_PERIODIC = 'subscription_periodic';
    public const INVOICING_REASON_SUBSCRIPTION_TERMINATING = 'subscription_terminating';
    public const INVOICING_REASON_IN_ADVANCE_CHARGE = 'in_advance_charge';
    public const INVOICING_REASON_IN_ADVANCE_CHARGE_PERIODIC = 'in_advance_charge_periodic';
    public const INVOICING_REASON_PROGRESSIVE_BILLING = 'progressive_billing';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoicingReasonAllowableValues()
    {
        return [
            self::INVOICING_REASON_SUBSCRIPTION_STARTING,
            self::INVOICING_REASON_SUBSCRIPTION_PERIODIC,
            self::INVOICING_REASON_SUBSCRIPTION_TERMINATING,
            self::INVOICING_REASON_IN_ADVANCE_CHARGE,
            self::INVOICING_REASON_IN_ADVANCE_CHARGE_PERIODIC,
            self::INVOICING_REASON_PROGRESSIVE_BILLING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('lago_subscription_id', $data ?? [], null);
        $this->setIfExists('external_subscription_id', $data ?? [], null);
        $this->setIfExists('lago_plan_id', $data ?? [], null);
        $this->setIfExists('subscription_from_datetime', $data ?? [], null);
        $this->setIfExists('subscription_to_datetime', $data ?? [], null);
        $this->setIfExists('charges_from_datetime', $data ?? [], null);
        $this->setIfExists('charges_to_datetime', $data ?? [], null);
        $this->setIfExists('invoicing_reason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lago_subscription_id'] === null) {
            $invalidProperties[] = "'lago_subscription_id' can't be null";
        }
        if ($this->container['external_subscription_id'] === null) {
            $invalidProperties[] = "'external_subscription_id' can't be null";
        }
        if ($this->container['lago_plan_id'] === null) {
            $invalidProperties[] = "'lago_plan_id' can't be null";
        }
        if ($this->container['subscription_from_datetime'] === null) {
            $invalidProperties[] = "'subscription_from_datetime' can't be null";
        }
        if ($this->container['subscription_to_datetime'] === null) {
            $invalidProperties[] = "'subscription_to_datetime' can't be null";
        }
        if ($this->container['charges_from_datetime'] === null) {
            $invalidProperties[] = "'charges_from_datetime' can't be null";
        }
        if ($this->container['charges_to_datetime'] === null) {
            $invalidProperties[] = "'charges_to_datetime' can't be null";
        }
        if ($this->container['invoicing_reason'] === null) {
            $invalidProperties[] = "'invoicing_reason' can't be null";
        }
        $allowedValues = $this->getInvoicingReasonAllowableValues();
        if (!is_null($this->container['invoicing_reason']) && !in_array($this->container['invoicing_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'invoicing_reason', must be one of '%s'",
                $this->container['invoicing_reason'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lago_subscription_id
     *
     * @return string
     */
    public function getLagoSubscriptionId()
    {
        return $this->container['lago_subscription_id'];
    }

    /**
     * Sets lago_subscription_id
     *
     * @param string $lago_subscription_id Unique identifier assigned to the subscription, created by Lago.
     *
     * @return self
     */
    public function setLagoSubscriptionId($lago_subscription_id)
    {
        if (is_null($lago_subscription_id)) {
            throw new \InvalidArgumentException('non-nullable lago_subscription_id cannot be null');
        }
        $this->container['lago_subscription_id'] = $lago_subscription_id;

        return $this;
    }

    /**
     * Gets external_subscription_id
     *
     * @return string
     */
    public function getExternalSubscriptionId()
    {
        return $this->container['external_subscription_id'];
    }

    /**
     * Sets external_subscription_id
     *
     * @param string $external_subscription_id Unique identifier assigned to the subscription in your application.
     *
     * @return self
     */
    public function setExternalSubscriptionId($external_subscription_id)
    {
        if (is_null($external_subscription_id)) {
            throw new \InvalidArgumentException('non-nullable external_subscription_id cannot be null');
        }
        $this->container['external_subscription_id'] = $external_subscription_id;

        return $this;
    }

    /**
     * Gets lago_plan_id
     *
     * @return string
     */
    public function getLagoPlanId()
    {
        return $this->container['lago_plan_id'];
    }

    /**
     * Sets lago_plan_id
     *
     * @param string $lago_plan_id Unique identifier assigned to the plan, created by Lago.
     *
     * @return self
     */
    public function setLagoPlanId($lago_plan_id)
    {
        if (is_null($lago_plan_id)) {
            throw new \InvalidArgumentException('non-nullable lago_plan_id cannot be null');
        }
        $this->container['lago_plan_id'] = $lago_plan_id;

        return $this;
    }

    /**
     * Gets subscription_from_datetime
     *
     * @return \DateTime
     */
    public function getSubscriptionFromDatetime()
    {
        return $this->container['subscription_from_datetime'];
    }

    /**
     * Sets subscription_from_datetime
     *
     * @param \DateTime $subscription_from_datetime The beginning date of the subscription billing period. This field indicates the start date of the billing period associated with the subscription fee.
     *
     * @return self
     */
    public function setSubscriptionFromDatetime($subscription_from_datetime)
    {
        if (is_null($subscription_from_datetime)) {
            throw new \InvalidArgumentException('non-nullable subscription_from_datetime cannot be null');
        }
        $this->container['subscription_from_datetime'] = $subscription_from_datetime;

        return $this;
    }

    /**
     * Gets subscription_to_datetime
     *
     * @return \DateTime
     */
    public function getSubscriptionToDatetime()
    {
        return $this->container['subscription_to_datetime'];
    }

    /**
     * Sets subscription_to_datetime
     *
     * @param \DateTime $subscription_to_datetime The ending date of the subscription billing period. This field indicates the end date of the billing period associated with the subscription fee.
     *
     * @return self
     */
    public function setSubscriptionToDatetime($subscription_to_datetime)
    {
        if (is_null($subscription_to_datetime)) {
            throw new \InvalidArgumentException('non-nullable subscription_to_datetime cannot be null');
        }
        $this->container['subscription_to_datetime'] = $subscription_to_datetime;

        return $this;
    }

    /**
     * Gets charges_from_datetime
     *
     * @return \DateTime
     */
    public function getChargesFromDatetime()
    {
        return $this->container['charges_from_datetime'];
    }

    /**
     * Sets charges_from_datetime
     *
     * @param \DateTime $charges_from_datetime The beginning date of the period that covers the charge fees. It is applicable only to the `charge` fees attached to the subscription. This field indicates the start date of the billing period or subscription period associated with the fees.
     *
     * @return self
     */
    public function setChargesFromDatetime($charges_from_datetime)
    {
        if (is_null($charges_from_datetime)) {
            throw new \InvalidArgumentException('non-nullable charges_from_datetime cannot be null');
        }
        $this->container['charges_from_datetime'] = $charges_from_datetime;

        return $this;
    }

    /**
     * Gets charges_to_datetime
     *
     * @return \DateTime
     */
    public function getChargesToDatetime()
    {
        return $this->container['charges_to_datetime'];
    }

    /**
     * Sets charges_to_datetime
     *
     * @param \DateTime $charges_to_datetime The ending date of the period that covers the charge fees. It is applicable only to the `charge` fees attached to the subscription. This field indicates the end date of the billing period or subscription period associated with the fees.
     *
     * @return self
     */
    public function setChargesToDatetime($charges_to_datetime)
    {
        if (is_null($charges_to_datetime)) {
            throw new \InvalidArgumentException('non-nullable charges_to_datetime cannot be null');
        }
        $this->container['charges_to_datetime'] = $charges_to_datetime;

        return $this;
    }

    /**
     * Gets invoicing_reason
     *
     * @return string
     */
    public function getInvoicingReason()
    {
        return $this->container['invoicing_reason'];
    }

    /**
     * Sets invoicing_reason
     *
     * @param string $invoicing_reason The reason explaining why this subscription appears on the invoice.
     *
     * @return self
     */
    public function setInvoicingReason($invoicing_reason)
    {
        if (is_null($invoicing_reason)) {
            throw new \InvalidArgumentException('non-nullable invoicing_reason cannot be null');
        }
        $allowedValues = $this->getInvoicingReasonAllowableValues();
        if (!in_array($invoicing_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'invoicing_reason', must be one of '%s'",
                    $invoicing_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoicing_reason'] = $invoicing_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


