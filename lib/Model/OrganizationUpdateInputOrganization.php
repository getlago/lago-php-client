<?php
/**
 * OrganizationUpdateInputOrganization
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * OrganizationUpdateInputOrganization Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrganizationUpdateInputOrganization implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrganizationUpdateInput_organization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'webhook_url' => 'string',
        'country' => '\Lago\LagoPhpClient\Model\CountryOrNull',
        'default_currency' => '\Lago\LagoPhpClient\Model\Currency',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'state' => 'string',
        'zipcode' => 'string',
        'email' => 'string',
        'city' => 'string',
        'legal_name' => 'string',
        'legal_number' => 'string',
        'document_numbering' => 'string',
        'document_number_prefix' => 'string',
        'net_payment_term' => 'int',
        'tax_identification_number' => 'string',
        'timezone' => '\Lago\LagoPhpClient\Model\Timezone',
        'email_settings' => 'string[]',
        'billing_configuration' => '\Lago\LagoPhpClient\Model\OrganizationBillingConfiguration',
        'finalize_zero_amount_invoice' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'webhook_url' => null,
        'country' => null,
        'default_currency' => null,
        'address_line1' => null,
        'address_line2' => null,
        'state' => null,
        'zipcode' => null,
        'email' => 'email',
        'city' => null,
        'legal_name' => null,
        'legal_number' => null,
        'document_numbering' => null,
        'document_number_prefix' => null,
        'net_payment_term' => null,
        'tax_identification_number' => null,
        'timezone' => null,
        'email_settings' => null,
        'billing_configuration' => null,
        'finalize_zero_amount_invoice' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'webhook_url' => true,
        'country' => true,
        'default_currency' => false,
        'address_line1' => true,
        'address_line2' => true,
        'state' => true,
        'zipcode' => true,
        'email' => true,
        'city' => true,
        'legal_name' => true,
        'legal_number' => true,
        'document_numbering' => false,
        'document_number_prefix' => false,
        'net_payment_term' => false,
        'tax_identification_number' => true,
        'timezone' => false,
        'email_settings' => false,
        'billing_configuration' => false,
        'finalize_zero_amount_invoice' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'webhook_url' => 'webhook_url',
        'country' => 'country',
        'default_currency' => 'default_currency',
        'address_line1' => 'address_line1',
        'address_line2' => 'address_line2',
        'state' => 'state',
        'zipcode' => 'zipcode',
        'email' => 'email',
        'city' => 'city',
        'legal_name' => 'legal_name',
        'legal_number' => 'legal_number',
        'document_numbering' => 'document_numbering',
        'document_number_prefix' => 'document_number_prefix',
        'net_payment_term' => 'net_payment_term',
        'tax_identification_number' => 'tax_identification_number',
        'timezone' => 'timezone',
        'email_settings' => 'email_settings',
        'billing_configuration' => 'billing_configuration',
        'finalize_zero_amount_invoice' => 'finalize_zero_amount_invoice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'webhook_url' => 'setWebhookUrl',
        'country' => 'setCountry',
        'default_currency' => 'setDefaultCurrency',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'state' => 'setState',
        'zipcode' => 'setZipcode',
        'email' => 'setEmail',
        'city' => 'setCity',
        'legal_name' => 'setLegalName',
        'legal_number' => 'setLegalNumber',
        'document_numbering' => 'setDocumentNumbering',
        'document_number_prefix' => 'setDocumentNumberPrefix',
        'net_payment_term' => 'setNetPaymentTerm',
        'tax_identification_number' => 'setTaxIdentificationNumber',
        'timezone' => 'setTimezone',
        'email_settings' => 'setEmailSettings',
        'billing_configuration' => 'setBillingConfiguration',
        'finalize_zero_amount_invoice' => 'setFinalizeZeroAmountInvoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'webhook_url' => 'getWebhookUrl',
        'country' => 'getCountry',
        'default_currency' => 'getDefaultCurrency',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'state' => 'getState',
        'zipcode' => 'getZipcode',
        'email' => 'getEmail',
        'city' => 'getCity',
        'legal_name' => 'getLegalName',
        'legal_number' => 'getLegalNumber',
        'document_numbering' => 'getDocumentNumbering',
        'document_number_prefix' => 'getDocumentNumberPrefix',
        'net_payment_term' => 'getNetPaymentTerm',
        'tax_identification_number' => 'getTaxIdentificationNumber',
        'timezone' => 'getTimezone',
        'email_settings' => 'getEmailSettings',
        'billing_configuration' => 'getBillingConfiguration',
        'finalize_zero_amount_invoice' => 'getFinalizeZeroAmountInvoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DOCUMENT_NUMBERING_PER_CUSTOMER = 'per_customer';
    public const DOCUMENT_NUMBERING_PER_ORGANIZATION = 'per_organization';
    public const EMAIL_SETTINGS_INVOICE_FINALIZED = 'invoice.finalized';
    public const EMAIL_SETTINGS_CREDIT_NOTE_CREATED = 'credit_note.created';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentNumberingAllowableValues()
    {
        return [
            self::DOCUMENT_NUMBERING_PER_CUSTOMER,
            self::DOCUMENT_NUMBERING_PER_ORGANIZATION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmailSettingsAllowableValues()
    {
        return [
            self::EMAIL_SETTINGS_INVOICE_FINALIZED,
            self::EMAIL_SETTINGS_CREDIT_NOTE_CREATED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('webhook_url', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('default_currency', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('zipcode', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('legal_name', $data ?? [], null);
        $this->setIfExists('legal_number', $data ?? [], null);
        $this->setIfExists('document_numbering', $data ?? [], null);
        $this->setIfExists('document_number_prefix', $data ?? [], null);
        $this->setIfExists('net_payment_term', $data ?? [], null);
        $this->setIfExists('tax_identification_number', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('email_settings', $data ?? [], null);
        $this->setIfExists('billing_configuration', $data ?? [], null);
        $this->setIfExists('finalize_zero_amount_invoice', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDocumentNumberingAllowableValues();
        if (!is_null($this->container['document_numbering']) && !in_array($this->container['document_numbering'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_numbering', must be one of '%s'",
                $this->container['document_numbering'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets webhook_url
     *
     * @return string|null
     */
    public function getWebhookUrl()
    {
        return $this->container['webhook_url'];
    }

    /**
     * Sets webhook_url
     *
     * @param string|null $webhook_url The URL of your newest updated webhook endpoint. This URL allows your organization to receive important messages, notifications, or data from the Lago system. By configuring your webhook endpoint to this URL, you can ensure that your organization stays informed and receives relevant information in a timely manner.
     *
     * @return self
     */
    public function setWebhookUrl($webhook_url)
    {
        if (is_null($webhook_url)) {
            array_push($this->openAPINullablesSetToNull, 'webhook_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webhook_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['webhook_url'] = $webhook_url;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Lago\LagoPhpClient\Model\CountryOrNull|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \Lago\LagoPhpClient\Model\CountryOrNull|null $country The country of your organization.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets default_currency
     *
     * @return \Lago\LagoPhpClient\Model\Currency|null
     */
    public function getDefaultCurrency()
    {
        return $this->container['default_currency'];
    }

    /**
     * Sets default_currency
     *
     * @param \Lago\LagoPhpClient\Model\Currency|null $default_currency The default currency of an organization.
     *
     * @return self
     */
    public function setDefaultCurrency($default_currency)
    {
        if (is_null($default_currency)) {
            throw new \InvalidArgumentException('non-nullable default_currency cannot be null');
        }
        $this->container['default_currency'] = $default_currency;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string|null $address_line1 The first line of your organization's billing address.
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            array_push($this->openAPINullablesSetToNull, 'address_line1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 The second line of your organization's billing address.
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            array_push($this->openAPINullablesSetToNull, 'address_line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The state of your organization's billing address.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            array_push($this->openAPINullablesSetToNull, 'state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zipcode
     *
     * @return string|null
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     *
     * @param string|null $zipcode The zipcode of your organization's billing address.
     *
     * @return self
     */
    public function setZipcode($zipcode)
    {
        if (is_null($zipcode)) {
            array_push($this->openAPINullablesSetToNull, 'zipcode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zipcode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of your organization used to bill your customers.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The city of your organization's billing address.
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return string|null
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string|null $legal_name The legal name of your organization.
     *
     * @return self
     */
    public function setLegalName($legal_name)
    {
        if (is_null($legal_name)) {
            array_push($this->openAPINullablesSetToNull, 'legal_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets legal_number
     *
     * @return string|null
     */
    public function getLegalNumber()
    {
        return $this->container['legal_number'];
    }

    /**
     * Sets legal_number
     *
     * @param string|null $legal_number The legal number of your organization.
     *
     * @return self
     */
    public function setLegalNumber($legal_number)
    {
        if (is_null($legal_number)) {
            array_push($this->openAPINullablesSetToNull, 'legal_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_number'] = $legal_number;

        return $this;
    }

    /**
     * Gets document_numbering
     *
     * @return string|null
     */
    public function getDocumentNumbering()
    {
        return $this->container['document_numbering'];
    }

    /**
     * Sets document_numbering
     *
     * @param string|null $document_numbering This parameter configures the method of incrementing invoice numbers for your customers.  - `per_customer`: Invoice numbers are incremented individually for each customer. This means every customer will have their own unique sequence of invoice numbers, separate from other customers. It ensures that each customer's invoice numbers follow a distinct and isolated numbering pattern. - `per_organization`: Invoice number incrementation is made across your entire organization. Rather than individual sequences for each customer, all invoices within the organization follow a single, unified numbering system. This creates a continuous and organization-wide sequence for all invoice numbers. Invoices are incremented per month (dynamic value used is YYYYMM), and invoice numbers are reset at the end of each month.  The default value for `document_numbering` is set to `per_customer`, meaning that, unless changed, invoice numbers will increment uniquely for each customer.
     *
     * @return self
     */
    public function setDocumentNumbering($document_numbering)
    {
        if (is_null($document_numbering)) {
            throw new \InvalidArgumentException('non-nullable document_numbering cannot be null');
        }
        $allowedValues = $this->getDocumentNumberingAllowableValues();
        if (!in_array($document_numbering, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_numbering', must be one of '%s'",
                    $document_numbering,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_numbering'] = $document_numbering;

        return $this;
    }

    /**
     * Gets document_number_prefix
     *
     * @return string|null
     */
    public function getDocumentNumberPrefix()
    {
        return $this->container['document_number_prefix'];
    }

    /**
     * Sets document_number_prefix
     *
     * @param string|null $document_number_prefix Sets the prefix for invoices and credit notes. Default is the first three letters of your organization name plus the last four digits of your organization ID. Customizable within 1-10 characters, and automatically capitalized by Lago.
     *
     * @return self
     */
    public function setDocumentNumberPrefix($document_number_prefix)
    {
        if (is_null($document_number_prefix)) {
            throw new \InvalidArgumentException('non-nullable document_number_prefix cannot be null');
        }
        $this->container['document_number_prefix'] = $document_number_prefix;

        return $this;
    }

    /**
     * Gets net_payment_term
     *
     * @return int|null
     */
    public function getNetPaymentTerm()
    {
        return $this->container['net_payment_term'];
    }

    /**
     * Sets net_payment_term
     *
     * @param int|null $net_payment_term The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.
     *
     * @return self
     */
    public function setNetPaymentTerm($net_payment_term)
    {
        if (is_null($net_payment_term)) {
            throw new \InvalidArgumentException('non-nullable net_payment_term cannot be null');
        }
        $this->container['net_payment_term'] = $net_payment_term;

        return $this;
    }

    /**
     * Gets tax_identification_number
     *
     * @return string|null
     */
    public function getTaxIdentificationNumber()
    {
        return $this->container['tax_identification_number'];
    }

    /**
     * Sets tax_identification_number
     *
     * @param string|null $tax_identification_number The tax identification number of your organization.
     *
     * @return self
     */
    public function setTaxIdentificationNumber($tax_identification_number)
    {
        if (is_null($tax_identification_number)) {
            array_push($this->openAPINullablesSetToNull, 'tax_identification_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_identification_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_identification_number'] = $tax_identification_number;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return \Lago\LagoPhpClient\Model\Timezone|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param \Lago\LagoPhpClient\Model\Timezone|null $timezone Your organization's timezone, used for billing purposes in your own local time. Can be overwritten by the customer's timezone.
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets email_settings
     *
     * @return string[]|null
     */
    public function getEmailSettings()
    {
        return $this->container['email_settings'];
    }

    /**
     * Sets email_settings
     *
     * @param string[]|null $email_settings Represents the email settings of the organization. It allows you to define which documents are sent by email. The field value determines the types of documents that trigger email notifications. Possible values for are `invoice.finalized` and `credit_note.created`. By configuring this field, you can specify whether invoices, credit notes, or both should be sent to recipients via email.
     *
     * @return self
     */
    public function setEmailSettings($email_settings)
    {
        if (is_null($email_settings)) {
            throw new \InvalidArgumentException('non-nullable email_settings cannot be null');
        }
        $allowedValues = $this->getEmailSettingsAllowableValues();
        if (array_diff($email_settings, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'email_settings', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['email_settings'] = $email_settings;

        return $this;
    }

    /**
     * Gets billing_configuration
     *
     * @return \Lago\LagoPhpClient\Model\OrganizationBillingConfiguration|null
     */
    public function getBillingConfiguration()
    {
        return $this->container['billing_configuration'];
    }

    /**
     * Sets billing_configuration
     *
     * @param \Lago\LagoPhpClient\Model\OrganizationBillingConfiguration|null $billing_configuration billing_configuration
     *
     * @return self
     */
    public function setBillingConfiguration($billing_configuration)
    {
        if (is_null($billing_configuration)) {
            throw new \InvalidArgumentException('non-nullable billing_configuration cannot be null');
        }
        $this->container['billing_configuration'] = $billing_configuration;

        return $this;
    }

    /**
     * Gets finalize_zero_amount_invoice
     *
     * @return bool|null
     */
    public function getFinalizeZeroAmountInvoice()
    {
        return $this->container['finalize_zero_amount_invoice'];
    }

    /**
     * Sets finalize_zero_amount_invoice
     *
     * @param bool|null $finalize_zero_amount_invoice Determines whether invoices with a zero total amount should be finalized. If set to true, zero amount invoices will be finalized. If set to false, zero amount invoices will not be finalized.
     *
     * @return self
     */
    public function setFinalizeZeroAmountInvoice($finalize_zero_amount_invoice)
    {
        if (is_null($finalize_zero_amount_invoice)) {
            throw new \InvalidArgumentException('non-nullable finalize_zero_amount_invoice cannot be null');
        }
        $this->container['finalize_zero_amount_invoice'] = $finalize_zero_amount_invoice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


