<?php
/**
 * CustomerCreateInputCustomer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * CustomerCreateInputCustomer Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerCreateInputCustomer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerCreateInput_customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'external_id' => 'string',
        'billing_entity_code' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'city' => 'string',
        'country' => '\Lago\LagoPhpClient\Model\CountryOrNull',
        'currency' => '\Lago\LagoPhpClient\Model\CurrencyOrNull',
        'email' => 'string',
        'legal_name' => 'string',
        'legal_number' => 'string',
        'logo_url' => 'string',
        'name' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'account_type' => 'string',
        'customer_type' => 'string',
        'phone' => 'string',
        'state' => 'string',
        'tax_codes' => 'string[]',
        'tax_identification_number' => 'string',
        'timezone' => '\Lago\LagoPhpClient\Model\TimezoneOrNull',
        'url' => 'string',
        'zipcode' => 'string',
        'net_payment_term' => 'int',
        'finalize_zero_amount_invoice' => 'string',
        'billing_configuration' => '\Lago\LagoPhpClient\Model\CustomerBillingConfiguration',
        'shipping_address' => '\Lago\LagoPhpClient\Model\Address',
        'integration_customers' => '\Lago\LagoPhpClient\Model\CustomerCreateInputCustomerIntegrationCustomersInner[]',
        'metadata' => '\Lago\LagoPhpClient\Model\CustomerCreateInputCustomerMetadataInner[]',
        'skip_invoice_custom_sections' => 'bool',
        'invoice_custom_section_codes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'external_id' => null,
        'billing_entity_code' => null,
        'address_line1' => null,
        'address_line2' => null,
        'city' => null,
        'country' => null,
        'currency' => null,
        'email' => 'email',
        'legal_name' => null,
        'legal_number' => null,
        'logo_url' => null,
        'name' => null,
        'firstname' => null,
        'lastname' => null,
        'account_type' => null,
        'customer_type' => null,
        'phone' => null,
        'state' => null,
        'tax_codes' => null,
        'tax_identification_number' => null,
        'timezone' => null,
        'url' => null,
        'zipcode' => null,
        'net_payment_term' => null,
        'finalize_zero_amount_invoice' => null,
        'billing_configuration' => null,
        'shipping_address' => null,
        'integration_customers' => null,
        'metadata' => null,
        'skip_invoice_custom_sections' => null,
        'invoice_custom_section_codes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'external_id' => false,
        'billing_entity_code' => true,
        'address_line1' => true,
        'address_line2' => true,
        'city' => true,
        'country' => true,
        'currency' => true,
        'email' => true,
        'legal_name' => true,
        'legal_number' => true,
        'logo_url' => true,
        'name' => true,
        'firstname' => true,
        'lastname' => true,
        'account_type' => true,
        'customer_type' => true,
        'phone' => true,
        'state' => true,
        'tax_codes' => false,
        'tax_identification_number' => true,
        'timezone' => true,
        'url' => true,
        'zipcode' => true,
        'net_payment_term' => true,
        'finalize_zero_amount_invoice' => false,
        'billing_configuration' => false,
        'shipping_address' => false,
        'integration_customers' => false,
        'metadata' => false,
        'skip_invoice_custom_sections' => false,
        'invoice_custom_section_codes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_id' => 'external_id',
        'billing_entity_code' => 'billing_entity_code',
        'address_line1' => 'address_line1',
        'address_line2' => 'address_line2',
        'city' => 'city',
        'country' => 'country',
        'currency' => 'currency',
        'email' => 'email',
        'legal_name' => 'legal_name',
        'legal_number' => 'legal_number',
        'logo_url' => 'logo_url',
        'name' => 'name',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'account_type' => 'account_type',
        'customer_type' => 'customer_type',
        'phone' => 'phone',
        'state' => 'state',
        'tax_codes' => 'tax_codes',
        'tax_identification_number' => 'tax_identification_number',
        'timezone' => 'timezone',
        'url' => 'url',
        'zipcode' => 'zipcode',
        'net_payment_term' => 'net_payment_term',
        'finalize_zero_amount_invoice' => 'finalize_zero_amount_invoice',
        'billing_configuration' => 'billing_configuration',
        'shipping_address' => 'shipping_address',
        'integration_customers' => 'integration_customers',
        'metadata' => 'metadata',
        'skip_invoice_custom_sections' => 'skip_invoice_custom_sections',
        'invoice_custom_section_codes' => 'invoice_custom_section_codes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_id' => 'setExternalId',
        'billing_entity_code' => 'setBillingEntityCode',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'city' => 'setCity',
        'country' => 'setCountry',
        'currency' => 'setCurrency',
        'email' => 'setEmail',
        'legal_name' => 'setLegalName',
        'legal_number' => 'setLegalNumber',
        'logo_url' => 'setLogoUrl',
        'name' => 'setName',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'account_type' => 'setAccountType',
        'customer_type' => 'setCustomerType',
        'phone' => 'setPhone',
        'state' => 'setState',
        'tax_codes' => 'setTaxCodes',
        'tax_identification_number' => 'setTaxIdentificationNumber',
        'timezone' => 'setTimezone',
        'url' => 'setUrl',
        'zipcode' => 'setZipcode',
        'net_payment_term' => 'setNetPaymentTerm',
        'finalize_zero_amount_invoice' => 'setFinalizeZeroAmountInvoice',
        'billing_configuration' => 'setBillingConfiguration',
        'shipping_address' => 'setShippingAddress',
        'integration_customers' => 'setIntegrationCustomers',
        'metadata' => 'setMetadata',
        'skip_invoice_custom_sections' => 'setSkipInvoiceCustomSections',
        'invoice_custom_section_codes' => 'setInvoiceCustomSectionCodes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_id' => 'getExternalId',
        'billing_entity_code' => 'getBillingEntityCode',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'city' => 'getCity',
        'country' => 'getCountry',
        'currency' => 'getCurrency',
        'email' => 'getEmail',
        'legal_name' => 'getLegalName',
        'legal_number' => 'getLegalNumber',
        'logo_url' => 'getLogoUrl',
        'name' => 'getName',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'account_type' => 'getAccountType',
        'customer_type' => 'getCustomerType',
        'phone' => 'getPhone',
        'state' => 'getState',
        'tax_codes' => 'getTaxCodes',
        'tax_identification_number' => 'getTaxIdentificationNumber',
        'timezone' => 'getTimezone',
        'url' => 'getUrl',
        'zipcode' => 'getZipcode',
        'net_payment_term' => 'getNetPaymentTerm',
        'finalize_zero_amount_invoice' => 'getFinalizeZeroAmountInvoice',
        'billing_configuration' => 'getBillingConfiguration',
        'shipping_address' => 'getShippingAddress',
        'integration_customers' => 'getIntegrationCustomers',
        'metadata' => 'getMetadata',
        'skip_invoice_custom_sections' => 'getSkipInvoiceCustomSections',
        'invoice_custom_section_codes' => 'getInvoiceCustomSectionCodes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACCOUNT_TYPE_CUSTOMER = 'customer';
    public const ACCOUNT_TYPE_PARTNER = 'partner';
    public const CUSTOMER_TYPE_COMPANY = 'company';
    public const CUSTOMER_TYPE_INDIVIDUAL = 'individual';
    public const FINALIZE_ZERO_AMOUNT_INVOICE_INHERIT = 'inherit';
    public const FINALIZE_ZERO_AMOUNT_INVOICE_SKIP = 'skip';
    public const FINALIZE_ZERO_AMOUNT_INVOICE_FINALIZE = 'finalize';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_CUSTOMER,
            self::ACCOUNT_TYPE_PARTNER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerTypeAllowableValues()
    {
        return [
            self::CUSTOMER_TYPE_COMPANY,
            self::CUSTOMER_TYPE_INDIVIDUAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFinalizeZeroAmountInvoiceAllowableValues()
    {
        return [
            self::FINALIZE_ZERO_AMOUNT_INVOICE_INHERIT,
            self::FINALIZE_ZERO_AMOUNT_INVOICE_SKIP,
            self::FINALIZE_ZERO_AMOUNT_INVOICE_FINALIZE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('billing_entity_code', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('legal_name', $data ?? [], null);
        $this->setIfExists('legal_number', $data ?? [], null);
        $this->setIfExists('logo_url', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('firstname', $data ?? [], null);
        $this->setIfExists('lastname', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('customer_type', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('tax_codes', $data ?? [], null);
        $this->setIfExists('tax_identification_number', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('zipcode', $data ?? [], null);
        $this->setIfExists('net_payment_term', $data ?? [], null);
        $this->setIfExists('finalize_zero_amount_invoice', $data ?? [], null);
        $this->setIfExists('billing_configuration', $data ?? [], null);
        $this->setIfExists('shipping_address', $data ?? [], null);
        $this->setIfExists('integration_customers', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('skip_invoice_custom_sections', $data ?? [], null);
        $this->setIfExists('invoice_custom_section_codes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['external_id'] === null) {
            $invalidProperties[] = "'external_id' can't be null";
        }
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_type', must be one of '%s'",
                $this->container['account_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCustomerTypeAllowableValues();
        if (!is_null($this->container['customer_type']) && !in_array($this->container['customer_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'customer_type', must be one of '%s'",
                $this->container['customer_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFinalizeZeroAmountInvoiceAllowableValues();
        if (!is_null($this->container['finalize_zero_amount_invoice']) && !in_array($this->container['finalize_zero_amount_invoice'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'finalize_zero_amount_invoice', must be one of '%s'",
                $this->container['finalize_zero_amount_invoice'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id The customer external unique identifier (provided by your own application)
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets billing_entity_code
     *
     * @return string|null
     */
    public function getBillingEntityCode()
    {
        return $this->container['billing_entity_code'];
    }

    /**
     * Sets billing_entity_code
     *
     * @param string|null $billing_entity_code The unique code of the billing entity to associate with the customer. If not provided, the default billing entity will be used.
     *
     * @return self
     */
    public function setBillingEntityCode($billing_entity_code)
    {
        if (is_null($billing_entity_code)) {
            array_push($this->openAPINullablesSetToNull, 'billing_entity_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_entity_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_entity_code'] = $billing_entity_code;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string|null $address_line1 The first line of the billing address
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            array_push($this->openAPINullablesSetToNull, 'address_line1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 The second line of the billing address
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            array_push($this->openAPINullablesSetToNull, 'address_line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city The city of the customer's billing address
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Lago\LagoPhpClient\Model\CountryOrNull|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \Lago\LagoPhpClient\Model\CountryOrNull|null $country Country code of the customer's billing address. Format must be ISO 3166 (alpha-2)
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Lago\LagoPhpClient\Model\CurrencyOrNull|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Lago\LagoPhpClient\Model\CurrencyOrNull|null $currency Currency of the customer. Format must be ISO 4217
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email of the customer
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return string|null
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string|null $legal_name The legal company name of the customer
     *
     * @return self
     */
    public function setLegalName($legal_name)
    {
        if (is_null($legal_name)) {
            array_push($this->openAPINullablesSetToNull, 'legal_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets legal_number
     *
     * @return string|null
     */
    public function getLegalNumber()
    {
        return $this->container['legal_number'];
    }

    /**
     * Sets legal_number
     *
     * @param string|null $legal_number The legal company number of the customer
     *
     * @return self
     */
    public function setLegalNumber($legal_number)
    {
        if (is_null($legal_number)) {
            array_push($this->openAPINullablesSetToNull, 'legal_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_number'] = $legal_number;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url The logo URL of the customer
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        if (is_null($logo_url)) {
            array_push($this->openAPINullablesSetToNull, 'logo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The full name of the customer
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname First name of the customer
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        if (is_null($firstname)) {
            array_push($this->openAPINullablesSetToNull, 'firstname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('firstname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string|null
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string|null $lastname Last name of the customer
     *
     * @return self
     */
    public function setLastname($lastname)
    {
        if (is_null($lastname)) {
            array_push($this->openAPINullablesSetToNull, 'lastname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type The type of the account. It can have one of the following values: - `customer`: the account is a customer, default value. - `partner`: the account is a partner.
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            array_push($this->openAPINullablesSetToNull, 'account_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($account_type) && !in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_type', must be one of '%s'",
                    $account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets customer_type
     *
     * @return string|null
     */
    public function getCustomerType()
    {
        return $this->container['customer_type'];
    }

    /**
     * Sets customer_type
     *
     * @param string|null $customer_type The type of the customer. It can have one of the following values: - `company`: the customer is a company. - `individual`: the customer is an individual.
     *
     * @return self
     */
    public function setCustomerType($customer_type)
    {
        if (is_null($customer_type)) {
            array_push($this->openAPINullablesSetToNull, 'customer_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getCustomerTypeAllowableValues();
        if (!is_null($customer_type) && !in_array($customer_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'customer_type', must be one of '%s'",
                    $customer_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customer_type'] = $customer_type;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone The phone number of the customer
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The state of the customer's billing address
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            array_push($this->openAPINullablesSetToNull, 'state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets tax_codes
     *
     * @return string[]|null
     */
    public function getTaxCodes()
    {
        return $this->container['tax_codes'];
    }

    /**
     * Sets tax_codes
     *
     * @param string[]|null $tax_codes List of unique code used to identify the taxes.
     *
     * @return self
     */
    public function setTaxCodes($tax_codes)
    {
        if (is_null($tax_codes)) {
            throw new \InvalidArgumentException('non-nullable tax_codes cannot be null');
        }
        $this->container['tax_codes'] = $tax_codes;

        return $this;
    }

    /**
     * Gets tax_identification_number
     *
     * @return string|null
     */
    public function getTaxIdentificationNumber()
    {
        return $this->container['tax_identification_number'];
    }

    /**
     * Sets tax_identification_number
     *
     * @param string|null $tax_identification_number The tax identification number of the customer
     *
     * @return self
     */
    public function setTaxIdentificationNumber($tax_identification_number)
    {
        if (is_null($tax_identification_number)) {
            array_push($this->openAPINullablesSetToNull, 'tax_identification_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_identification_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_identification_number'] = $tax_identification_number;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return \Lago\LagoPhpClient\Model\TimezoneOrNull|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param \Lago\LagoPhpClient\Model\TimezoneOrNull|null $timezone The customer's timezone, used for billing purposes in their local time. Overrides the organization's timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            array_push($this->openAPINullablesSetToNull, 'timezone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timezone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url The custom website URL of the customer
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets zipcode
     *
     * @return string|null
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     *
     * @param string|null $zipcode The zipcode of the customer's billing address
     *
     * @return self
     */
    public function setZipcode($zipcode)
    {
        if (is_null($zipcode)) {
            array_push($this->openAPINullablesSetToNull, 'zipcode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zipcode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets net_payment_term
     *
     * @return int|null
     */
    public function getNetPaymentTerm()
    {
        return $this->container['net_payment_term'];
    }

    /**
     * Sets net_payment_term
     *
     * @param int|null $net_payment_term The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.
     *
     * @return self
     */
    public function setNetPaymentTerm($net_payment_term)
    {
        if (is_null($net_payment_term)) {
            array_push($this->openAPINullablesSetToNull, 'net_payment_term');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('net_payment_term', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['net_payment_term'] = $net_payment_term;

        return $this;
    }

    /**
     * Gets finalize_zero_amount_invoice
     *
     * @return string|null
     */
    public function getFinalizeZeroAmountInvoice()
    {
        return $this->container['finalize_zero_amount_invoice'];
    }

    /**
     * Sets finalize_zero_amount_invoice
     *
     * @param string|null $finalize_zero_amount_invoice Specifies how invoices with a zero total amount should be handled: - `inherit`: (Default) Follows the organization-level configuration. - `finalize`: Invoices are issued and finalized even if the total amount is zero. - `skip`: Invoices with a total amount of zero are not finalized.
     *
     * @return self
     */
    public function setFinalizeZeroAmountInvoice($finalize_zero_amount_invoice)
    {
        if (is_null($finalize_zero_amount_invoice)) {
            throw new \InvalidArgumentException('non-nullable finalize_zero_amount_invoice cannot be null');
        }
        $allowedValues = $this->getFinalizeZeroAmountInvoiceAllowableValues();
        if (!in_array($finalize_zero_amount_invoice, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'finalize_zero_amount_invoice', must be one of '%s'",
                    $finalize_zero_amount_invoice,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['finalize_zero_amount_invoice'] = $finalize_zero_amount_invoice;

        return $this;
    }

    /**
     * Gets billing_configuration
     *
     * @return \Lago\LagoPhpClient\Model\CustomerBillingConfiguration|null
     */
    public function getBillingConfiguration()
    {
        return $this->container['billing_configuration'];
    }

    /**
     * Sets billing_configuration
     *
     * @param \Lago\LagoPhpClient\Model\CustomerBillingConfiguration|null $billing_configuration billing_configuration
     *
     * @return self
     */
    public function setBillingConfiguration($billing_configuration)
    {
        if (is_null($billing_configuration)) {
            throw new \InvalidArgumentException('non-nullable billing_configuration cannot be null');
        }
        $this->container['billing_configuration'] = $billing_configuration;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return \Lago\LagoPhpClient\Model\Address|null
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param \Lago\LagoPhpClient\Model\Address|null $shipping_address shipping_address
     *
     * @return self
     */
    public function setShippingAddress($shipping_address)
    {
        if (is_null($shipping_address)) {
            throw new \InvalidArgumentException('non-nullable shipping_address cannot be null');
        }
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets integration_customers
     *
     * @return \Lago\LagoPhpClient\Model\CustomerCreateInputCustomerIntegrationCustomersInner[]|null
     */
    public function getIntegrationCustomers()
    {
        return $this->container['integration_customers'];
    }

    /**
     * Sets integration_customers
     *
     * @param \Lago\LagoPhpClient\Model\CustomerCreateInputCustomerIntegrationCustomersInner[]|null $integration_customers integration_customers
     *
     * @return self
     */
    public function setIntegrationCustomers($integration_customers)
    {
        if (is_null($integration_customers)) {
            throw new \InvalidArgumentException('non-nullable integration_customers cannot be null');
        }
        $this->container['integration_customers'] = $integration_customers;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Lago\LagoPhpClient\Model\CustomerCreateInputCustomerMetadataInner[]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Lago\LagoPhpClient\Model\CustomerCreateInputCustomerMetadataInner[]|null $metadata Set of key-value pairs that you can attach to a customer. This can be useful for storing additional information about the customer in a structured format
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets skip_invoice_custom_sections
     *
     * @return bool|null
     */
    public function getSkipInvoiceCustomSections()
    {
        return $this->container['skip_invoice_custom_sections'];
    }

    /**
     * Sets skip_invoice_custom_sections
     *
     * @param bool|null $skip_invoice_custom_sections Set to `true` to exclude all invoice custom sections from PDF generation for this customer only. False by default
     *
     * @return self
     */
    public function setSkipInvoiceCustomSections($skip_invoice_custom_sections)
    {
        if (is_null($skip_invoice_custom_sections)) {
            throw new \InvalidArgumentException('non-nullable skip_invoice_custom_sections cannot be null');
        }
        $this->container['skip_invoice_custom_sections'] = $skip_invoice_custom_sections;

        return $this;
    }

    /**
     * Gets invoice_custom_section_codes
     *
     * @return string[]|null
     */
    public function getInvoiceCustomSectionCodes()
    {
        return $this->container['invoice_custom_section_codes'];
    }

    /**
     * Sets invoice_custom_section_codes
     *
     * @param string[]|null $invoice_custom_section_codes List of unique codes identifying the invoice custom sections.
     *
     * @return self
     */
    public function setInvoiceCustomSectionCodes($invoice_custom_section_codes)
    {
        if (is_null($invoice_custom_section_codes)) {
            throw new \InvalidArgumentException('non-nullable invoice_custom_section_codes cannot be null');
        }
        $this->container['invoice_custom_section_codes'] = $invoice_custom_section_codes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


