<?php
/**
 * PaymentProviderErrorObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * PaymentProviderErrorObject Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentProviderErrorObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentProviderErrorObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lago_payment_provider_id' => 'string',
        'payment_provider_name' => 'string',
        'payment_provider_code' => 'string',
        'source' => 'string',
        'action' => 'string',
        'provider_error' => '\Lago\LagoPhpClient\Model\CustomerIntegratrionErrorObjectProviderError'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lago_payment_provider_id' => 'uuid',
        'payment_provider_name' => null,
        'payment_provider_code' => null,
        'source' => null,
        'action' => null,
        'provider_error' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lago_payment_provider_id' => false,
        'payment_provider_name' => false,
        'payment_provider_code' => false,
        'source' => false,
        'action' => false,
        'provider_error' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lago_payment_provider_id' => 'lago_payment_provider_id',
        'payment_provider_name' => 'payment_provider_name',
        'payment_provider_code' => 'payment_provider_code',
        'source' => 'source',
        'action' => 'action',
        'provider_error' => 'provider_error'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lago_payment_provider_id' => 'setLagoPaymentProviderId',
        'payment_provider_name' => 'setPaymentProviderName',
        'payment_provider_code' => 'setPaymentProviderCode',
        'source' => 'setSource',
        'action' => 'setAction',
        'provider_error' => 'setProviderError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lago_payment_provider_id' => 'getLagoPaymentProviderId',
        'payment_provider_name' => 'getPaymentProviderName',
        'payment_provider_code' => 'getPaymentProviderCode',
        'source' => 'getSource',
        'action' => 'getAction',
        'provider_error' => 'getProviderError'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SOURCE_STRIPE = 'stripe';
    public const ACTION_PAYMENT_PROVIDER_REGISTER_WEBHOOK = 'payment_provider.register_webhook';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_STRIPE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_PAYMENT_PROVIDER_REGISTER_WEBHOOK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('lago_payment_provider_id', $data ?? [], null);
        $this->setIfExists('payment_provider_name', $data ?? [], null);
        $this->setIfExists('payment_provider_code', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('provider_error', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lago_payment_provider_id'] === null) {
            $invalidProperties[] = "'lago_payment_provider_id' can't be null";
        }
        if ($this->container['payment_provider_name'] === null) {
            $invalidProperties[] = "'payment_provider_name' can't be null";
        }
        if ($this->container['payment_provider_code'] === null) {
            $invalidProperties[] = "'payment_provider_code' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['provider_error'] === null) {
            $invalidProperties[] = "'provider_error' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lago_payment_provider_id
     *
     * @return string
     */
    public function getLagoPaymentProviderId()
    {
        return $this->container['lago_payment_provider_id'];
    }

    /**
     * Sets lago_payment_provider_id
     *
     * @param string $lago_payment_provider_id Unique identifier assigned to the payment provider within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the payment provider's record within the Lago system.
     *
     * @return self
     */
    public function setLagoPaymentProviderId($lago_payment_provider_id)
    {
        if (is_null($lago_payment_provider_id)) {
            throw new \InvalidArgumentException('non-nullable lago_payment_provider_id cannot be null');
        }
        $this->container['lago_payment_provider_id'] = $lago_payment_provider_id;

        return $this;
    }

    /**
     * Gets payment_provider_name
     *
     * @return string
     */
    public function getPaymentProviderName()
    {
        return $this->container['payment_provider_name'];
    }

    /**
     * Sets payment_provider_name
     *
     * @param string $payment_provider_name The name of payment provider
     *
     * @return self
     */
    public function setPaymentProviderName($payment_provider_name)
    {
        if (is_null($payment_provider_name)) {
            throw new \InvalidArgumentException('non-nullable payment_provider_name cannot be null');
        }
        $this->container['payment_provider_name'] = $payment_provider_name;

        return $this;
    }

    /**
     * Gets payment_provider_code
     *
     * @return string
     */
    public function getPaymentProviderCode()
    {
        return $this->container['payment_provider_code'];
    }

    /**
     * Sets payment_provider_code
     *
     * @param string $payment_provider_code Code of the payment provider
     *
     * @return self
     */
    public function setPaymentProviderCode($payment_provider_code)
    {
        if (is_null($payment_provider_code)) {
            throw new \InvalidArgumentException('non-nullable payment_provider_code cannot be null');
        }
        $this->container['payment_provider_code'] = $payment_provider_code;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source The source of the error
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action The action that was being performed when the error occurred
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $allowedValues = $this->getActionAllowableValues();
        if (!in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets provider_error
     *
     * @return \Lago\LagoPhpClient\Model\CustomerIntegratrionErrorObjectProviderError
     */
    public function getProviderError()
    {
        return $this->container['provider_error'];
    }

    /**
     * Sets provider_error
     *
     * @param \Lago\LagoPhpClient\Model\CustomerIntegratrionErrorObjectProviderError $provider_error provider_error
     *
     * @return self
     */
    public function setProviderError($provider_error)
    {
        if (is_null($provider_error)) {
            throw new \InvalidArgumentException('non-nullable provider_error cannot be null');
        }
        $this->container['provider_error'] = $provider_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


