<?php
/**
 * ChargeProperties
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * ChargeProperties Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChargeProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChargeProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'grouped_by' => 'string[]',
        'pricing_group_keys' => 'string[]',
        'graduated_ranges' => '\Lago\LagoPhpClient\Model\ChargePropertiesGraduatedRangesInner[]',
        'graduated_percentage_ranges' => '\Lago\LagoPhpClient\Model\ChargePropertiesGraduatedPercentageRangesInner[]',
        'amount' => 'string',
        'free_units' => 'int',
        'package_size' => 'int',
        'rate' => 'string',
        'fixed_amount' => 'string',
        'free_units_per_events' => 'int',
        'free_units_per_total_aggregation' => 'string',
        'per_transaction_max_amount' => 'string',
        'per_transaction_min_amount' => 'string',
        'volume_ranges' => '\Lago\LagoPhpClient\Model\ChargePropertiesVolumeRangesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'grouped_by' => null,
        'pricing_group_keys' => null,
        'graduated_ranges' => null,
        'graduated_percentage_ranges' => null,
        'amount' => null,
        'free_units' => null,
        'package_size' => null,
        'rate' => null,
        'fixed_amount' => null,
        'free_units_per_events' => null,
        'free_units_per_total_aggregation' => null,
        'per_transaction_max_amount' => '^[0-9]+.?[0-9]*$',
        'per_transaction_min_amount' => '^[0-9]+.?[0-9]*$',
        'volume_ranges' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'grouped_by' => false,
        'pricing_group_keys' => false,
        'graduated_ranges' => false,
        'graduated_percentage_ranges' => false,
        'amount' => false,
        'free_units' => false,
        'package_size' => false,
        'rate' => false,
        'fixed_amount' => false,
        'free_units_per_events' => true,
        'free_units_per_total_aggregation' => true,
        'per_transaction_max_amount' => true,
        'per_transaction_min_amount' => true,
        'volume_ranges' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'grouped_by' => 'grouped_by',
        'pricing_group_keys' => 'pricing_group_keys',
        'graduated_ranges' => 'graduated_ranges',
        'graduated_percentage_ranges' => 'graduated_percentage_ranges',
        'amount' => 'amount',
        'free_units' => 'free_units',
        'package_size' => 'package_size',
        'rate' => 'rate',
        'fixed_amount' => 'fixed_amount',
        'free_units_per_events' => 'free_units_per_events',
        'free_units_per_total_aggregation' => 'free_units_per_total_aggregation',
        'per_transaction_max_amount' => 'per_transaction_max_amount',
        'per_transaction_min_amount' => 'per_transaction_min_amount',
        'volume_ranges' => 'volume_ranges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'grouped_by' => 'setGroupedBy',
        'pricing_group_keys' => 'setPricingGroupKeys',
        'graduated_ranges' => 'setGraduatedRanges',
        'graduated_percentage_ranges' => 'setGraduatedPercentageRanges',
        'amount' => 'setAmount',
        'free_units' => 'setFreeUnits',
        'package_size' => 'setPackageSize',
        'rate' => 'setRate',
        'fixed_amount' => 'setFixedAmount',
        'free_units_per_events' => 'setFreeUnitsPerEvents',
        'free_units_per_total_aggregation' => 'setFreeUnitsPerTotalAggregation',
        'per_transaction_max_amount' => 'setPerTransactionMaxAmount',
        'per_transaction_min_amount' => 'setPerTransactionMinAmount',
        'volume_ranges' => 'setVolumeRanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'grouped_by' => 'getGroupedBy',
        'pricing_group_keys' => 'getPricingGroupKeys',
        'graduated_ranges' => 'getGraduatedRanges',
        'graduated_percentage_ranges' => 'getGraduatedPercentageRanges',
        'amount' => 'getAmount',
        'free_units' => 'getFreeUnits',
        'package_size' => 'getPackageSize',
        'rate' => 'getRate',
        'fixed_amount' => 'getFixedAmount',
        'free_units_per_events' => 'getFreeUnitsPerEvents',
        'free_units_per_total_aggregation' => 'getFreeUnitsPerTotalAggregation',
        'per_transaction_max_amount' => 'getPerTransactionMaxAmount',
        'per_transaction_min_amount' => 'getPerTransactionMinAmount',
        'volume_ranges' => 'getVolumeRanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('grouped_by', $data ?? [], null);
        $this->setIfExists('pricing_group_keys', $data ?? [], null);
        $this->setIfExists('graduated_ranges', $data ?? [], null);
        $this->setIfExists('graduated_percentage_ranges', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('free_units', $data ?? [], null);
        $this->setIfExists('package_size', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('fixed_amount', $data ?? [], null);
        $this->setIfExists('free_units_per_events', $data ?? [], null);
        $this->setIfExists('free_units_per_total_aggregation', $data ?? [], null);
        $this->setIfExists('per_transaction_max_amount', $data ?? [], null);
        $this->setIfExists('per_transaction_min_amount', $data ?? [], null);
        $this->setIfExists('volume_ranges', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['amount']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['amount'])) {
            $invalidProperties[] = "invalid value for 'amount', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        if (!is_null($this->container['rate']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['rate'])) {
            $invalidProperties[] = "invalid value for 'rate', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        if (!is_null($this->container['fixed_amount']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['fixed_amount'])) {
            $invalidProperties[] = "invalid value for 'fixed_amount', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        if (!is_null($this->container['free_units_per_total_aggregation']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['free_units_per_total_aggregation'])) {
            $invalidProperties[] = "invalid value for 'free_units_per_total_aggregation', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets grouped_by
     *
     * @return string[]|null
     */
    public function getGroupedBy()
    {
        return $this->container['grouped_by'];
    }

    /**
     * Sets grouped_by
     *
     * @param string[]|null $grouped_by The list of event properties that are used to group the events on the invoice for a `standard` charge model. **DEPRECATED** Replaced by `pricing_group_keys`.
     *
     * @return self
     */
    public function setGroupedBy($grouped_by)
    {
        if (is_null($grouped_by)) {
            throw new \InvalidArgumentException('non-nullable grouped_by cannot be null');
        }
        $this->container['grouped_by'] = $grouped_by;

        return $this;
    }

    /**
     * Gets pricing_group_keys
     *
     * @return string[]|null
     */
    public function getPricingGroupKeys()
    {
        return $this->container['pricing_group_keys'];
    }

    /**
     * Sets pricing_group_keys
     *
     * @param string[]|null $pricing_group_keys The list of event properties that are used to group the events on the invoice.
     *
     * @return self
     */
    public function setPricingGroupKeys($pricing_group_keys)
    {
        if (is_null($pricing_group_keys)) {
            throw new \InvalidArgumentException('non-nullable pricing_group_keys cannot be null');
        }
        $this->container['pricing_group_keys'] = $pricing_group_keys;

        return $this;
    }

    /**
     * Gets graduated_ranges
     *
     * @return \Lago\LagoPhpClient\Model\ChargePropertiesGraduatedRangesInner[]|null
     */
    public function getGraduatedRanges()
    {
        return $this->container['graduated_ranges'];
    }

    /**
     * Sets graduated_ranges
     *
     * @param \Lago\LagoPhpClient\Model\ChargePropertiesGraduatedRangesInner[]|null $graduated_ranges Graduated ranges, sorted from bottom to top tiers, used for a `graduated` charge model.
     *
     * @return self
     */
    public function setGraduatedRanges($graduated_ranges)
    {
        if (is_null($graduated_ranges)) {
            throw new \InvalidArgumentException('non-nullable graduated_ranges cannot be null');
        }
        $this->container['graduated_ranges'] = $graduated_ranges;

        return $this;
    }

    /**
     * Gets graduated_percentage_ranges
     *
     * @return \Lago\LagoPhpClient\Model\ChargePropertiesGraduatedPercentageRangesInner[]|null
     */
    public function getGraduatedPercentageRanges()
    {
        return $this->container['graduated_percentage_ranges'];
    }

    /**
     * Sets graduated_percentage_ranges
     *
     * @param \Lago\LagoPhpClient\Model\ChargePropertiesGraduatedPercentageRangesInner[]|null $graduated_percentage_ranges Graduated percentage ranges, sorted from bottom to top tiers, used for a `graduated_percentage` charge model.
     *
     * @return self
     */
    public function setGraduatedPercentageRanges($graduated_percentage_ranges)
    {
        if (is_null($graduated_percentage_ranges)) {
            throw new \InvalidArgumentException('non-nullable graduated_percentage_ranges cannot be null');
        }
        $this->container['graduated_percentage_ranges'] = $graduated_percentage_ranges;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount - The unit price, excluding tax, for a `standard` charge model. It is expressed as a decimal value. - The amount, excluding tax, for a complete set of units in a `package` charge model. It is expressed as a decimal value.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if ((!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($amount)))) {
            throw new \InvalidArgumentException("invalid value for \$amount when calling ChargeProperties., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets free_units
     *
     * @return int|null
     */
    public function getFreeUnits()
    {
        return $this->container['free_units'];
    }

    /**
     * Sets free_units
     *
     * @param int|null $free_units The quantity of units that are provided free of charge for each billing period in a `package` charge model. This field specifies the number of units that customers can use without incurring any additional cost during each billing cycle.
     *
     * @return self
     */
    public function setFreeUnits($free_units)
    {
        if (is_null($free_units)) {
            throw new \InvalidArgumentException('non-nullable free_units cannot be null');
        }
        $this->container['free_units'] = $free_units;

        return $this;
    }

    /**
     * Gets package_size
     *
     * @return int|null
     */
    public function getPackageSize()
    {
        return $this->container['package_size'];
    }

    /**
     * Sets package_size
     *
     * @param int|null $package_size The quantity of units included in each pack or set for a `package` charge model. It indicates the number of units that are bundled together as a single package or set within the pricing structure.
     *
     * @return self
     */
    public function setPackageSize($package_size)
    {
        if (is_null($package_size)) {
            throw new \InvalidArgumentException('non-nullable package_size cannot be null');
        }
        $this->container['package_size'] = $package_size;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return string|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param string|null $rate The percentage rate that is applied to the amount of each transaction for a `percentage` charge model. It is expressed as a decimal value.
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }

        if ((!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($rate)))) {
            throw new \InvalidArgumentException("invalid value for \$rate when calling ChargeProperties., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets fixed_amount
     *
     * @return string|null
     */
    public function getFixedAmount()
    {
        return $this->container['fixed_amount'];
    }

    /**
     * Sets fixed_amount
     *
     * @param string|null $fixed_amount The fixed fee that is applied to each transaction for a `percentage` charge model. It is expressed as a decimal value.
     *
     * @return self
     */
    public function setFixedAmount($fixed_amount)
    {
        if (is_null($fixed_amount)) {
            throw new \InvalidArgumentException('non-nullable fixed_amount cannot be null');
        }

        if ((!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($fixed_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$fixed_amount when calling ChargeProperties., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['fixed_amount'] = $fixed_amount;

        return $this;
    }

    /**
     * Gets free_units_per_events
     *
     * @return int|null
     */
    public function getFreeUnitsPerEvents()
    {
        return $this->container['free_units_per_events'];
    }

    /**
     * Sets free_units_per_events
     *
     * @param int|null $free_units_per_events The count of transactions that are not impacted by the `percentage` rate and fixed fee in a percentage charge model. This field indicates the number of transactions that are exempt from the calculation of charges based on the specified percentage rate and fixed fee.
     *
     * @return self
     */
    public function setFreeUnitsPerEvents($free_units_per_events)
    {
        if (is_null($free_units_per_events)) {
            array_push($this->openAPINullablesSetToNull, 'free_units_per_events');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_units_per_events', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['free_units_per_events'] = $free_units_per_events;

        return $this;
    }

    /**
     * Gets free_units_per_total_aggregation
     *
     * @return string|null
     */
    public function getFreeUnitsPerTotalAggregation()
    {
        return $this->container['free_units_per_total_aggregation'];
    }

    /**
     * Sets free_units_per_total_aggregation
     *
     * @param string|null $free_units_per_total_aggregation The transaction amount that is not impacted by the `percentage` rate and fixed fee in a percentage charge model. This field indicates the portion of the transaction amount that is exempt from the calculation of charges based on the specified percentage rate and fixed fee.
     *
     * @return self
     */
    public function setFreeUnitsPerTotalAggregation($free_units_per_total_aggregation)
    {
        if (is_null($free_units_per_total_aggregation)) {
            array_push($this->openAPINullablesSetToNull, 'free_units_per_total_aggregation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_units_per_total_aggregation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($free_units_per_total_aggregation) && (!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($free_units_per_total_aggregation)))) {
            throw new \InvalidArgumentException("invalid value for \$free_units_per_total_aggregation when calling ChargeProperties., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['free_units_per_total_aggregation'] = $free_units_per_total_aggregation;

        return $this;
    }

    /**
     * Gets per_transaction_max_amount
     *
     * @return string|null
     */
    public function getPerTransactionMaxAmount()
    {
        return $this->container['per_transaction_max_amount'];
    }

    /**
     * Sets per_transaction_max_amount
     *
     * @param string|null $per_transaction_max_amount Specifies the maximum allowable spending for a single transaction. Working as a transaction cap.
     *
     * @return self
     */
    public function setPerTransactionMaxAmount($per_transaction_max_amount)
    {
        if (is_null($per_transaction_max_amount)) {
            array_push($this->openAPINullablesSetToNull, 'per_transaction_max_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('per_transaction_max_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['per_transaction_max_amount'] = $per_transaction_max_amount;

        return $this;
    }

    /**
     * Gets per_transaction_min_amount
     *
     * @return string|null
     */
    public function getPerTransactionMinAmount()
    {
        return $this->container['per_transaction_min_amount'];
    }

    /**
     * Sets per_transaction_min_amount
     *
     * @param string|null $per_transaction_min_amount Specifies the minimum allowable spending for a single transaction. Working as a transaction floor.
     *
     * @return self
     */
    public function setPerTransactionMinAmount($per_transaction_min_amount)
    {
        if (is_null($per_transaction_min_amount)) {
            array_push($this->openAPINullablesSetToNull, 'per_transaction_min_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('per_transaction_min_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['per_transaction_min_amount'] = $per_transaction_min_amount;

        return $this;
    }

    /**
     * Gets volume_ranges
     *
     * @return \Lago\LagoPhpClient\Model\ChargePropertiesVolumeRangesInner[]|null
     */
    public function getVolumeRanges()
    {
        return $this->container['volume_ranges'];
    }

    /**
     * Sets volume_ranges
     *
     * @param \Lago\LagoPhpClient\Model\ChargePropertiesVolumeRangesInner[]|null $volume_ranges Volume ranges, sorted from bottom to top tiers, used for a `volume` charge model.
     *
     * @return self
     */
    public function setVolumeRanges($volume_ranges)
    {
        if (is_null($volume_ranges)) {
            throw new \InvalidArgumentException('non-nullable volume_ranges cannot be null');
        }
        $this->container['volume_ranges'] = $volume_ranges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


