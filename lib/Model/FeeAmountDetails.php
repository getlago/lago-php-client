<?php
/**
 * FeeAmountDetails
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * FeeAmountDetails Class Doc Comment
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FeeAmountDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FeeAmountDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'graduated_ranges' => '\Lago\LagoPhpClient\Model\FeeAmountDetailsGraduatedRangesInner[]',
        'graduated_percentage_ranges' => '\Lago\LagoPhpClient\Model\FeeAmountDetailsGraduatedPercentageRangesInner[]',
        'free_units' => 'string',
        'paid_units' => 'string',
        'per_package_size' => 'int',
        'per_package_unit_amount' => 'string',
        'units' => 'string',
        'free_events' => 'int',
        'rate' => 'string',
        'per_unit_total_amount' => 'string',
        'paid_events' => 'int',
        'fixed_fee_unit_amount' => 'string',
        'fixed_fee_total_amount' => 'string',
        'min_max_adjustment_total_amount' => 'string',
        'volume_ranges' => '\Lago\LagoPhpClient\Model\FeeAmountDetailsVolumeRangesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'graduated_ranges' => null,
        'graduated_percentage_ranges' => null,
        'free_units' => null,
        'paid_units' => null,
        'per_package_size' => null,
        'per_package_unit_amount' => null,
        'units' => null,
        'free_events' => null,
        'rate' => '^[0-9]+.?[0-9]*$',
        'per_unit_total_amount' => null,
        'paid_events' => null,
        'fixed_fee_unit_amount' => null,
        'fixed_fee_total_amount' => null,
        'min_max_adjustment_total_amount' => null,
        'volume_ranges' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'graduated_ranges' => false,
        'graduated_percentage_ranges' => false,
        'free_units' => false,
        'paid_units' => false,
        'per_package_size' => false,
        'per_package_unit_amount' => false,
        'units' => false,
        'free_events' => false,
        'rate' => false,
        'per_unit_total_amount' => false,
        'paid_events' => false,
        'fixed_fee_unit_amount' => false,
        'fixed_fee_total_amount' => false,
        'min_max_adjustment_total_amount' => false,
        'volume_ranges' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'graduated_ranges' => 'graduated_ranges',
        'graduated_percentage_ranges' => 'graduated_percentage_ranges',
        'free_units' => 'free_units',
        'paid_units' => 'paid_units',
        'per_package_size' => 'per_package_size',
        'per_package_unit_amount' => 'per_package_unit_amount',
        'units' => 'units',
        'free_events' => 'free_events',
        'rate' => 'rate',
        'per_unit_total_amount' => 'per_unit_total_amount',
        'paid_events' => 'paid_events',
        'fixed_fee_unit_amount' => 'fixed_fee_unit_amount',
        'fixed_fee_total_amount' => 'fixed_fee_total_amount',
        'min_max_adjustment_total_amount' => 'min_max_adjustment_total_amount',
        'volume_ranges' => 'volume_ranges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'graduated_ranges' => 'setGraduatedRanges',
        'graduated_percentage_ranges' => 'setGraduatedPercentageRanges',
        'free_units' => 'setFreeUnits',
        'paid_units' => 'setPaidUnits',
        'per_package_size' => 'setPerPackageSize',
        'per_package_unit_amount' => 'setPerPackageUnitAmount',
        'units' => 'setUnits',
        'free_events' => 'setFreeEvents',
        'rate' => 'setRate',
        'per_unit_total_amount' => 'setPerUnitTotalAmount',
        'paid_events' => 'setPaidEvents',
        'fixed_fee_unit_amount' => 'setFixedFeeUnitAmount',
        'fixed_fee_total_amount' => 'setFixedFeeTotalAmount',
        'min_max_adjustment_total_amount' => 'setMinMaxAdjustmentTotalAmount',
        'volume_ranges' => 'setVolumeRanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'graduated_ranges' => 'getGraduatedRanges',
        'graduated_percentage_ranges' => 'getGraduatedPercentageRanges',
        'free_units' => 'getFreeUnits',
        'paid_units' => 'getPaidUnits',
        'per_package_size' => 'getPerPackageSize',
        'per_package_unit_amount' => 'getPerPackageUnitAmount',
        'units' => 'getUnits',
        'free_events' => 'getFreeEvents',
        'rate' => 'getRate',
        'per_unit_total_amount' => 'getPerUnitTotalAmount',
        'paid_events' => 'getPaidEvents',
        'fixed_fee_unit_amount' => 'getFixedFeeUnitAmount',
        'fixed_fee_total_amount' => 'getFixedFeeTotalAmount',
        'min_max_adjustment_total_amount' => 'getMinMaxAdjustmentTotalAmount',
        'volume_ranges' => 'getVolumeRanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('graduated_ranges', $data ?? [], null);
        $this->setIfExists('graduated_percentage_ranges', $data ?? [], null);
        $this->setIfExists('free_units', $data ?? [], null);
        $this->setIfExists('paid_units', $data ?? [], null);
        $this->setIfExists('per_package_size', $data ?? [], null);
        $this->setIfExists('per_package_unit_amount', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('free_events', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('per_unit_total_amount', $data ?? [], null);
        $this->setIfExists('paid_events', $data ?? [], null);
        $this->setIfExists('fixed_fee_unit_amount', $data ?? [], null);
        $this->setIfExists('fixed_fee_total_amount', $data ?? [], null);
        $this->setIfExists('min_max_adjustment_total_amount', $data ?? [], null);
        $this->setIfExists('volume_ranges', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['free_units']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['free_units'])) {
            $invalidProperties[] = "invalid value for 'free_units', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        if (!is_null($this->container['paid_units']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['paid_units'])) {
            $invalidProperties[] = "invalid value for 'paid_units', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        if (!is_null($this->container['per_package_unit_amount']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['per_package_unit_amount'])) {
            $invalidProperties[] = "invalid value for 'per_package_unit_amount', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        if (!is_null($this->container['units']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['units'])) {
            $invalidProperties[] = "invalid value for 'units', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets graduated_ranges
     *
     * @return \Lago\LagoPhpClient\Model\FeeAmountDetailsGraduatedRangesInner[]|null
     */
    public function getGraduatedRanges()
    {
        return $this->container['graduated_ranges'];
    }

    /**
     * Sets graduated_ranges
     *
     * @param \Lago\LagoPhpClient\Model\FeeAmountDetailsGraduatedRangesInner[]|null $graduated_ranges Graduated ranges, used for a `graduated` charge model.
     *
     * @return self
     */
    public function setGraduatedRanges($graduated_ranges)
    {
        if (is_null($graduated_ranges)) {
            throw new \InvalidArgumentException('non-nullable graduated_ranges cannot be null');
        }
        $this->container['graduated_ranges'] = $graduated_ranges;

        return $this;
    }

    /**
     * Gets graduated_percentage_ranges
     *
     * @return \Lago\LagoPhpClient\Model\FeeAmountDetailsGraduatedPercentageRangesInner[]|null
     */
    public function getGraduatedPercentageRanges()
    {
        return $this->container['graduated_percentage_ranges'];
    }

    /**
     * Sets graduated_percentage_ranges
     *
     * @param \Lago\LagoPhpClient\Model\FeeAmountDetailsGraduatedPercentageRangesInner[]|null $graduated_percentage_ranges Graduated percentage ranges, used for a `graduated_percentage` charge model.
     *
     * @return self
     */
    public function setGraduatedPercentageRanges($graduated_percentage_ranges)
    {
        if (is_null($graduated_percentage_ranges)) {
            throw new \InvalidArgumentException('non-nullable graduated_percentage_ranges cannot be null');
        }
        $this->container['graduated_percentage_ranges'] = $graduated_percentage_ranges;

        return $this;
    }

    /**
     * Gets free_units
     *
     * @return string|null
     */
    public function getFreeUnits()
    {
        return $this->container['free_units'];
    }

    /**
     * Sets free_units
     *
     * @param string|null $free_units The quantity of units that are provided free of charge for each billing period in a `package` charge model.
     *
     * @return self
     */
    public function setFreeUnits($free_units)
    {
        if (is_null($free_units)) {
            throw new \InvalidArgumentException('non-nullable free_units cannot be null');
        }

        if ((!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($free_units)))) {
            throw new \InvalidArgumentException("invalid value for \$free_units when calling FeeAmountDetails., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['free_units'] = $free_units;

        return $this;
    }

    /**
     * Gets paid_units
     *
     * @return string|null
     */
    public function getPaidUnits()
    {
        return $this->container['paid_units'];
    }

    /**
     * Sets paid_units
     *
     * @param string|null $paid_units The quantity of units that are not provided free of charge for each billing period in a `package` charge model.
     *
     * @return self
     */
    public function setPaidUnits($paid_units)
    {
        if (is_null($paid_units)) {
            throw new \InvalidArgumentException('non-nullable paid_units cannot be null');
        }

        if ((!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($paid_units)))) {
            throw new \InvalidArgumentException("invalid value for \$paid_units when calling FeeAmountDetails., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['paid_units'] = $paid_units;

        return $this;
    }

    /**
     * Gets per_package_size
     *
     * @return int|null
     */
    public function getPerPackageSize()
    {
        return $this->container['per_package_size'];
    }

    /**
     * Sets per_package_size
     *
     * @param int|null $per_package_size The quantity of units included, defined for Package or Percentage charge model.
     *
     * @return self
     */
    public function setPerPackageSize($per_package_size)
    {
        if (is_null($per_package_size)) {
            throw new \InvalidArgumentException('non-nullable per_package_size cannot be null');
        }
        $this->container['per_package_size'] = $per_package_size;

        return $this;
    }

    /**
     * Gets per_package_unit_amount
     *
     * @return string|null
     */
    public function getPerPackageUnitAmount()
    {
        return $this->container['per_package_unit_amount'];
    }

    /**
     * Sets per_package_unit_amount
     *
     * @param string|null $per_package_unit_amount Total amount to charge for received paid_units, defined for Package or Percentage charge model.
     *
     * @return self
     */
    public function setPerPackageUnitAmount($per_package_unit_amount)
    {
        if (is_null($per_package_unit_amount)) {
            throw new \InvalidArgumentException('non-nullable per_package_unit_amount cannot be null');
        }

        if ((!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($per_package_unit_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$per_package_unit_amount when calling FeeAmountDetails., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['per_package_unit_amount'] = $per_package_unit_amount;

        return $this;
    }

    /**
     * Gets units
     *
     * @return string|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param string|null $units The total units received in Lago for the Percentage charge model.
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }

        if ((!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($units)))) {
            throw new \InvalidArgumentException("invalid value for \$units when calling FeeAmountDetails., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets free_events
     *
     * @return int|null
     */
    public function getFreeEvents()
    {
        return $this->container['free_events'];
    }

    /**
     * Sets free_events
     *
     * @param int|null $free_events Total number of free events allowed for the Percentage charge model.
     *
     * @return self
     */
    public function setFreeEvents($free_events)
    {
        if (is_null($free_events)) {
            throw new \InvalidArgumentException('non-nullable free_events cannot be null');
        }
        $this->container['free_events'] = $free_events;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return string|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param string|null $rate Percentage rate applied for the Percentage charge model.
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets per_unit_total_amount
     *
     * @return string|null
     */
    public function getPerUnitTotalAmount()
    {
        return $this->container['per_unit_total_amount'];
    }

    /**
     * Sets per_unit_total_amount
     *
     * @param string|null $per_unit_total_amount Total amount of received units to be charged for the Percentage charge model.
     *
     * @return self
     */
    public function setPerUnitTotalAmount($per_unit_total_amount)
    {
        if (is_null($per_unit_total_amount)) {
            throw new \InvalidArgumentException('non-nullable per_unit_total_amount cannot be null');
        }
        $this->container['per_unit_total_amount'] = $per_unit_total_amount;

        return $this;
    }

    /**
     * Gets paid_events
     *
     * @return int|null
     */
    public function getPaidEvents()
    {
        return $this->container['paid_events'];
    }

    /**
     * Sets paid_events
     *
     * @param int|null $paid_events Total number of paid events for the Percentage charge model.
     *
     * @return self
     */
    public function setPaidEvents($paid_events)
    {
        if (is_null($paid_events)) {
            throw new \InvalidArgumentException('non-nullable paid_events cannot be null');
        }
        $this->container['paid_events'] = $paid_events;

        return $this;
    }

    /**
     * Gets fixed_fee_unit_amount
     *
     * @return string|null
     */
    public function getFixedFeeUnitAmount()
    {
        return $this->container['fixed_fee_unit_amount'];
    }

    /**
     * Sets fixed_fee_unit_amount
     *
     * @param string|null $fixed_fee_unit_amount Fixed fee unit price per received paid_event for the Percentage charge model.
     *
     * @return self
     */
    public function setFixedFeeUnitAmount($fixed_fee_unit_amount)
    {
        if (is_null($fixed_fee_unit_amount)) {
            throw new \InvalidArgumentException('non-nullable fixed_fee_unit_amount cannot be null');
        }
        $this->container['fixed_fee_unit_amount'] = $fixed_fee_unit_amount;

        return $this;
    }

    /**
     * Gets fixed_fee_total_amount
     *
     * @return string|null
     */
    public function getFixedFeeTotalAmount()
    {
        return $this->container['fixed_fee_total_amount'];
    }

    /**
     * Sets fixed_fee_total_amount
     *
     * @param string|null $fixed_fee_total_amount Total amount to charge for received paid_events for the Percentage charge model.
     *
     * @return self
     */
    public function setFixedFeeTotalAmount($fixed_fee_total_amount)
    {
        if (is_null($fixed_fee_total_amount)) {
            throw new \InvalidArgumentException('non-nullable fixed_fee_total_amount cannot be null');
        }
        $this->container['fixed_fee_total_amount'] = $fixed_fee_total_amount;

        return $this;
    }

    /**
     * Gets min_max_adjustment_total_amount
     *
     * @return string|null
     */
    public function getMinMaxAdjustmentTotalAmount()
    {
        return $this->container['min_max_adjustment_total_amount'];
    }

    /**
     * Sets min_max_adjustment_total_amount
     *
     * @param string|null $min_max_adjustment_total_amount Total adjustment amount linked to minimum and maximum spending per transaction for the Percentage charge model.
     *
     * @return self
     */
    public function setMinMaxAdjustmentTotalAmount($min_max_adjustment_total_amount)
    {
        if (is_null($min_max_adjustment_total_amount)) {
            throw new \InvalidArgumentException('non-nullable min_max_adjustment_total_amount cannot be null');
        }
        $this->container['min_max_adjustment_total_amount'] = $min_max_adjustment_total_amount;

        return $this;
    }

    /**
     * Gets volume_ranges
     *
     * @return \Lago\LagoPhpClient\Model\FeeAmountDetailsVolumeRangesInner[]|null
     */
    public function getVolumeRanges()
    {
        return $this->container['volume_ranges'];
    }

    /**
     * Sets volume_ranges
     *
     * @param \Lago\LagoPhpClient\Model\FeeAmountDetailsVolumeRangesInner[]|null $volume_ranges Volume ranges, used for a `volume` charge model.
     *
     * @return self
     */
    public function setVolumeRanges($volume_ranges)
    {
        if (is_null($volume_ranges)) {
            throw new \InvalidArgumentException('non-nullable volume_ranges cannot be null');
        }
        $this->container['volume_ranges'] = $volume_ranges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


