<?php
/**
 * WalletCreateInputWalletRecurringTransactionRulesInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lago API documentation
 *
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 1.31.0
 * Contact: tech@getlago.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lago\LagoPhpClient\Model;

use \ArrayAccess;
use \Lago\LagoPhpClient\ObjectSerializer;

/**
 * WalletCreateInputWalletRecurringTransactionRulesInner Class Doc Comment
 *
 * @category Class
 * @description Object that represents rule for wallet recurring transactions.
 * @package  Lago\LagoPhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WalletCreateInputWalletRecurringTransactionRulesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WalletCreateInput_wallet_recurring_transaction_rules_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'paid_credits' => 'string',
        'granted_credits' => 'string',
        'method' => 'string',
        'trigger' => 'string',
        'interval' => 'string',
        'started_at' => '\DateTime',
        'expiration_at' => '\DateTime',
        'threshold_credits' => 'string',
        'target_ongoing_balance' => 'string',
        'invoice_requires_successful_payment' => 'bool',
        'transaction_metadata' => '\Lago\LagoPhpClient\Model\WalletRecurringTransactionRuleTransactionMetadataInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'paid_credits' => null,
        'granted_credits' => null,
        'method' => null,
        'trigger' => null,
        'interval' => null,
        'started_at' => 'date-time',
        'expiration_at' => 'date-time',
        'threshold_credits' => null,
        'target_ongoing_balance' => null,
        'invoice_requires_successful_payment' => null,
        'transaction_metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'paid_credits' => true,
        'granted_credits' => true,
        'method' => false,
        'trigger' => false,
        'interval' => false,
        'started_at' => true,
        'expiration_at' => true,
        'threshold_credits' => false,
        'target_ongoing_balance' => false,
        'invoice_requires_successful_payment' => false,
        'transaction_metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paid_credits' => 'paid_credits',
        'granted_credits' => 'granted_credits',
        'method' => 'method',
        'trigger' => 'trigger',
        'interval' => 'interval',
        'started_at' => 'started_at',
        'expiration_at' => 'expiration_at',
        'threshold_credits' => 'threshold_credits',
        'target_ongoing_balance' => 'target_ongoing_balance',
        'invoice_requires_successful_payment' => 'invoice_requires_successful_payment',
        'transaction_metadata' => 'transaction_metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paid_credits' => 'setPaidCredits',
        'granted_credits' => 'setGrantedCredits',
        'method' => 'setMethod',
        'trigger' => 'setTrigger',
        'interval' => 'setInterval',
        'started_at' => 'setStartedAt',
        'expiration_at' => 'setExpirationAt',
        'threshold_credits' => 'setThresholdCredits',
        'target_ongoing_balance' => 'setTargetOngoingBalance',
        'invoice_requires_successful_payment' => 'setInvoiceRequiresSuccessfulPayment',
        'transaction_metadata' => 'setTransactionMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paid_credits' => 'getPaidCredits',
        'granted_credits' => 'getGrantedCredits',
        'method' => 'getMethod',
        'trigger' => 'getTrigger',
        'interval' => 'getInterval',
        'started_at' => 'getStartedAt',
        'expiration_at' => 'getExpirationAt',
        'threshold_credits' => 'getThresholdCredits',
        'target_ongoing_balance' => 'getTargetOngoingBalance',
        'invoice_requires_successful_payment' => 'getInvoiceRequiresSuccessfulPayment',
        'transaction_metadata' => 'getTransactionMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const METHOD_FIXED = 'fixed';
    public const METHOD_TARGET = 'target';
    public const TRIGGER_INTERVAL = 'interval';
    public const TRIGGER_THRESHOLD = 'threshold';
    public const INTERVAL_WEEKLY = 'weekly';
    public const INTERVAL_MONTHLY = 'monthly';
    public const INTERVAL_QUARTERLY = 'quarterly';
    public const INTERVAL_YEARLY = 'yearly';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_FIXED,
            self::METHOD_TARGET,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggerAllowableValues()
    {
        return [
            self::TRIGGER_INTERVAL,
            self::TRIGGER_THRESHOLD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntervalAllowableValues()
    {
        return [
            self::INTERVAL_WEEKLY,
            self::INTERVAL_MONTHLY,
            self::INTERVAL_QUARTERLY,
            self::INTERVAL_YEARLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('paid_credits', $data ?? [], null);
        $this->setIfExists('granted_credits', $data ?? [], null);
        $this->setIfExists('method', $data ?? [], null);
        $this->setIfExists('trigger', $data ?? [], null);
        $this->setIfExists('interval', $data ?? [], null);
        $this->setIfExists('started_at', $data ?? [], null);
        $this->setIfExists('expiration_at', $data ?? [], null);
        $this->setIfExists('threshold_credits', $data ?? [], null);
        $this->setIfExists('target_ongoing_balance', $data ?? [], null);
        $this->setIfExists('invoice_requires_successful_payment', $data ?? [], null);
        $this->setIfExists('transaction_metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['paid_credits']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['paid_credits'])) {
            $invalidProperties[] = "invalid value for 'paid_credits', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        if (!is_null($this->container['granted_credits']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['granted_credits'])) {
            $invalidProperties[] = "invalid value for 'granted_credits', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'method', must be one of '%s'",
                $this->container['method'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['trigger'] === null) {
            $invalidProperties[] = "'trigger' can't be null";
        }
        $allowedValues = $this->getTriggerAllowableValues();
        if (!is_null($this->container['trigger']) && !in_array($this->container['trigger'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trigger', must be one of '%s'",
                $this->container['trigger'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIntervalAllowableValues();
        if (!is_null($this->container['interval']) && !in_array($this->container['interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'interval', must be one of '%s'",
                $this->container['interval'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['threshold_credits']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['threshold_credits'])) {
            $invalidProperties[] = "invalid value for 'threshold_credits', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        if (!is_null($this->container['target_ongoing_balance']) && !preg_match("/^[0-9]+.?[0-9]*$/", $this->container['target_ongoing_balance'])) {
            $invalidProperties[] = "invalid value for 'target_ongoing_balance', must be conform to the pattern /^[0-9]+.?[0-9]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paid_credits
     *
     * @return string|null
     */
    public function getPaidCredits()
    {
        return $this->container['paid_credits'];
    }

    /**
     * Sets paid_credits
     *
     * @param string|null $paid_credits The number of paid credits used for recurring top-up.
     *
     * @return self
     */
    public function setPaidCredits($paid_credits)
    {
        if (is_null($paid_credits)) {
            array_push($this->openAPINullablesSetToNull, 'paid_credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paid_credits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($paid_credits) && (!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($paid_credits)))) {
            throw new \InvalidArgumentException("invalid value for \$paid_credits when calling WalletCreateInputWalletRecurringTransactionRulesInner., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['paid_credits'] = $paid_credits;

        return $this;
    }

    /**
     * Gets granted_credits
     *
     * @return string|null
     */
    public function getGrantedCredits()
    {
        return $this->container['granted_credits'];
    }

    /**
     * Sets granted_credits
     *
     * @param string|null $granted_credits The number of free granted credits used for recurring top-up.
     *
     * @return self
     */
    public function setGrantedCredits($granted_credits)
    {
        if (is_null($granted_credits)) {
            array_push($this->openAPINullablesSetToNull, 'granted_credits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('granted_credits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($granted_credits) && (!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($granted_credits)))) {
            throw new \InvalidArgumentException("invalid value for \$granted_credits when calling WalletCreateInputWalletRecurringTransactionRulesInner., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['granted_credits'] = $granted_credits;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string|null
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string|null $method The method used for recurring top-up. Possible values are `fixed` or `target`.
     *
     * @return self
     */
    public function setMethod($method)
    {
        if (is_null($method)) {
            throw new \InvalidArgumentException('non-nullable method cannot be null');
        }
        $allowedValues = $this->getMethodAllowableValues();
        if (!in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'method', must be one of '%s'",
                    $method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets trigger
     *
     * @return string
     */
    public function getTrigger()
    {
        return $this->container['trigger'];
    }

    /**
     * Sets trigger
     *
     * @param string $trigger The trigger. Possible values are `interval` or `threshold`.
     *
     * @return self
     */
    public function setTrigger($trigger)
    {
        if (is_null($trigger)) {
            throw new \InvalidArgumentException('non-nullable trigger cannot be null');
        }
        $allowedValues = $this->getTriggerAllowableValues();
        if (!in_array($trigger, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trigger', must be one of '%s'",
                    $trigger,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trigger'] = $trigger;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string|null
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string|null $interval The interval used for recurring top-up. It represents the frequency at which automatic top-up occurs. The interval can be one of the following values: `weekly`, `monthly`, `quarterly` or `yearly`. Required only when trigger is `interval`.
     *
     * @return self
     */
    public function setInterval($interval)
    {
        if (is_null($interval)) {
            throw new \InvalidArgumentException('non-nullable interval cannot be null');
        }
        $allowedValues = $this->getIntervalAllowableValues();
        if (!in_array($interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'interval', must be one of '%s'",
                    $interval,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets started_at
     *
     * @return \DateTime|null
     */
    public function getStartedAt()
    {
        return $this->container['started_at'];
    }

    /**
     * Sets started_at
     *
     * @param \DateTime|null $started_at The effective start date for recurring top-ups. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
     *
     * @return self
     */
    public function setStartedAt($started_at)
    {
        if (is_null($started_at)) {
            array_push($this->openAPINullablesSetToNull, 'started_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('started_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['started_at'] = $started_at;

        return $this;
    }

    /**
     * Gets expiration_at
     *
     * @return \DateTime|null
     */
    public function getExpirationAt()
    {
        return $this->container['expiration_at'];
    }

    /**
     * Sets expiration_at
     *
     * @param \DateTime|null $expiration_at The expiration date and time for this specific recurring transaction rule. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
     *
     * @return self
     */
    public function setExpirationAt($expiration_at)
    {
        if (is_null($expiration_at)) {
            array_push($this->openAPINullablesSetToNull, 'expiration_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiration_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiration_at'] = $expiration_at;

        return $this;
    }

    /**
     * Gets threshold_credits
     *
     * @return string|null
     */
    public function getThresholdCredits()
    {
        return $this->container['threshold_credits'];
    }

    /**
     * Sets threshold_credits
     *
     * @param string|null $threshold_credits The threshold for recurring top-ups is the value at which an automatic top-up is triggered. For example, if this threshold is set at 10 credits, an automatic top-up will occur whenever the wallet balance falls to or below 10 credits. Required only when trigger is set to `threshold`.
     *
     * @return self
     */
    public function setThresholdCredits($threshold_credits)
    {
        if (is_null($threshold_credits)) {
            throw new \InvalidArgumentException('non-nullable threshold_credits cannot be null');
        }

        if ((!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($threshold_credits)))) {
            throw new \InvalidArgumentException("invalid value for \$threshold_credits when calling WalletCreateInputWalletRecurringTransactionRulesInner., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['threshold_credits'] = $threshold_credits;

        return $this;
    }

    /**
     * Gets target_ongoing_balance
     *
     * @return string|null
     */
    public function getTargetOngoingBalance()
    {
        return $this->container['target_ongoing_balance'];
    }

    /**
     * Sets target_ongoing_balance
     *
     * @param string|null $target_ongoing_balance The target ongoing balance is the value set for the ongoing balance to be reached by the automatic top-up. Required only when trigger is set to `target`.
     *
     * @return self
     */
    public function setTargetOngoingBalance($target_ongoing_balance)
    {
        if (is_null($target_ongoing_balance)) {
            throw new \InvalidArgumentException('non-nullable target_ongoing_balance cannot be null');
        }

        if ((!preg_match("/^[0-9]+.?[0-9]*$/", ObjectSerializer::toString($target_ongoing_balance)))) {
            throw new \InvalidArgumentException("invalid value for \$target_ongoing_balance when calling WalletCreateInputWalletRecurringTransactionRulesInner., must conform to the pattern /^[0-9]+.?[0-9]*$/.");
        }

        $this->container['target_ongoing_balance'] = $target_ongoing_balance;

        return $this;
    }

    /**
     * Gets invoice_requires_successful_payment
     *
     * @return bool|null
     */
    public function getInvoiceRequiresSuccessfulPayment()
    {
        return $this->container['invoice_requires_successful_payment'];
    }

    /**
     * Sets invoice_requires_successful_payment
     *
     * @param bool|null $invoice_requires_successful_payment A boolean setting that, when set to true, delays issuing an invoice for a wallet top-up until a successful payment is made; if false, the invoice is issued immediately upon wallet top-up, regardless of the payment status. Default value of false.
     *
     * @return self
     */
    public function setInvoiceRequiresSuccessfulPayment($invoice_requires_successful_payment)
    {
        if (is_null($invoice_requires_successful_payment)) {
            throw new \InvalidArgumentException('non-nullable invoice_requires_successful_payment cannot be null');
        }
        $this->container['invoice_requires_successful_payment'] = $invoice_requires_successful_payment;

        return $this;
    }

    /**
     * Gets transaction_metadata
     *
     * @return \Lago\LagoPhpClient\Model\WalletRecurringTransactionRuleTransactionMetadataInner[]|null
     */
    public function getTransactionMetadata()
    {
        return $this->container['transaction_metadata'];
    }

    /**
     * Sets transaction_metadata
     *
     * @param \Lago\LagoPhpClient\Model\WalletRecurringTransactionRuleTransactionMetadataInner[]|null $transaction_metadata This optional field allows you to store a list of key-value pairs containing additional information or custom attributes. These key-value pairs will populate the metadata of the wallet transactions triggered by this rule.
     *
     * @return self
     */
    public function setTransactionMetadata($transaction_metadata)
    {
        if (is_null($transaction_metadata)) {
            throw new \InvalidArgumentException('non-nullable transaction_metadata cannot be null');
        }
        $this->container['transaction_metadata'] = $transaction_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


